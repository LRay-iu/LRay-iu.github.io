<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024/08/06-13:39</title>
    <url>/2024/08/06/20240806_1339/</url>
    <content><![CDATA[<p>​	今天是在市场部实习的最后一天，转眼已经在市场部实习了4个多月了，明天开始就要培训了，之后就是正式员工，能拿五金和正式工资了（其实现在已经开始拿了）；</p>
<p>昨天看了一眼培训名单，基本上都是陌生人，这一点有点羡慕隔壁上海电气的培训，700多号人居然还能找着老同学。</p>
<style>
        .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 5px;
            width: 300px; /* 调整总宽度以适应图片 */
            margin-left: 0;
        }
        .grid-container img {
            width: 100%;
            height: 100px; /* 固定高度以确保正方形 */
            object-fit: cover; /* 裁切图片以适应容器 */
            object-position: center; /* 中心对齐裁切 */
            display: block;
            border-radius: 10px; 
        }
    </style>
 <div class="grid-container">
    <img src="/2024/08/06/20240806_1339/feizhaidaile.png" alt="肥宅呆了">
</div>

]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>2024/07/20</title>
    <url>/2024/08/05/20240721_1727/</url>
    <content><![CDATA[<p>​	你的名字是？</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-07-21 17:48</li>
<li>updateTime: 2024-08-05 16:09</li>
</ul>
</blockquote>
<p>​	当初被关在小黑屋里面的时候为数不多能看的下去的电影，刷了很多遍，最开始是看剧情和细节，后面几遍就纯粹是听里面的配乐（真的很好听），S还问这配乐是不是重新做的，纯云😭。小曲一响，当初在那台做听说的电脑前反复观看的感觉蹭蹭蹭地一下又回来了。</p>
<p>​	大学前看-&gt;大学毕业补票看，贯穿了人生最开心的四年时光，时间过得是真的快</p>
<img src="/2024/08/05/20240721_1727/yourName(5).png" alt="yourName(5)" style="zoom:10%;">

<br>

<img src="/2024/08/05/20240721_1727/yourName(6).png" alt="yourName(6)" style="zoom:12%;">

<br>

<img src="/2024/08/05/20240721_1727/yourName(7).png" alt="yourName(7)" style="zoom:14%;">

<br>

<img src="/2024/08/05/20240721_1727/yourName(4).png" alt="yourName(4)" style="zoom:25%;">

<br>

<img src="/2024/08/05/20240721_1727/yourName(3).png" alt="yourName(3)" style="zoom:15%;">

<br>

<img src="/2024/08/05/20240721_1727/yourName(1).png" alt="yourName(1)" style="zoom:17%;">

<br>

<img src="/2024/08/05/20240721_1727/yourName(2).png" alt="yourName(2)" style="zoom:25%;">

<center><b>————分割线————</b></center>

<p>说实话，新海诚之后的作品我都有看，但是之后的作品都很难吊起我这么强烈的情绪反馈了。我的青春已经像风一样飘散了，逐渐对主角们的奔跑失去兴趣，更不用说和主角们产生情感上的共鸣；即便是这次的重映，之所以能引起我的情绪波动，也不过是因为它十分难得地让我想起了自己曾经的时光，那段自由热烈，对未来憧憬着渴望的青春。</p>
<p>不知不觉间就染上了班味，彻底沦落成了一名打工社畜。不知道还要多久才能适应这样的生活节奏。与其说是适应，麻木会不会更合适一些，麻木、冷漠，直到变成自己曾经最讨厌的章鱼哥的模样。</p>
<p>分享一点我拿的周边吧。</p>
<img src="/2024/08/05/20240721_1727/IMG_20240721_204959.png" alt="IMG_20240721_204959" style="zoom:20%;">

<br>

<p>奉贤龙湖的星轶影院只给了我三叶的特典卡，后来发现少了一张，实在是不甘心，去咸鱼花了10.9元又淘了一张泷的特典卡，后面到货了我再把照片补上</p>
<center><b>————2024.7.27———</b></center>

<p>今天家里人不在，我又跑去电影院二刷了，拍拍照片，虽然说周边没有拿到，不过最后咸鱼上全部收齐了。</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>东岳-泰山</title>
    <url>/2024/07/25/taishan_travel/</url>
    <content><![CDATA[<p>2024年6月24日到6月26号，到东岳泰山进行了游玩。</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-07-25 14:31</li>
<li>updateTime: 2024-07-25 14:31</li>
</ul>
</blockquote>
<h2 id="行程记录"><a href="#行程记录" class="headerlink" title="行程记录"></a>行程记录</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">6月24日：晴</span><br><span class="line">09：25 搓顿早饭</span><br><span class="line">11：30 到达酒店，洗个澡准备休息</span><br><span class="line">15：00 购买一些用品，准备出发</span><br><span class="line">15：27 到达红门游客中心</span><br><span class="line">17：13 到达中天门</span><br><span class="line">18：21 到达龙门</span><br><span class="line">18：40 到达升仙坊</span><br><span class="line">18：50 到达南天门</span><br><span class="line">19：00 到达天街</span><br><span class="line">19：25 日落</span><br><span class="line">20：26 到达玉皇顶，准备休息</span><br><span class="line">6月25日：晴</span><br><span class="line">04：00 被挤得站起来等日出</span><br><span class="line">05：00 观日出</span><br><span class="line">07：00 最后看了一眼瞻鲁台，日观峰，准备下山</span><br><span class="line">11：20 到达红门，打车返回酒店</span><br><span class="line">狠狠地休息</span><br><span class="line">17：30 前往县衙大院吃晚饭</span><br><span class="line">6月26日：晴</span><br><span class="line">08：00 前往县衙大院吃早饭</span><br><span class="line">09：20 到达岱庙</span><br><span class="line">10：45 前往县衙大院吃中饭</span><br><span class="line">13：14 乘坐高铁G1705返回虹桥</span><br></pre></td></tr></table></figure>

<h2 id="出行路线"><a href="#出行路线" class="headerlink" title="出行路线"></a>出行路线</h2><center>“什么下山的索道是为上山的勇士准备的，<br>真男人都是红门进红门出”<br></center>

<img src="/2024/07/25/taishan_travel/%E7%99%BB%E5%B1%B1%E8%B7%AF%E7%BA%BF.png" alt="登山路线" style="zoom:25%;">

<h2 id="中天门"><a href="#中天门" class="headerlink" title="中天门"></a>中天门</h2><img src="/2024/07/25/taishan_travel/IMG_20240624_171323.jpg" alt="IMG_20240624_171323" style="zoom:15%;">

<p>中天门前大约走了两小时不到一点，地段较平整，甚至会感觉不需要登山杖也能轻松走到这里，这里由于可以直接大巴从天外村坐到这里，所以这里的水价格还是比较便宜的，10r&#x2F;4瓶吧好像</p>
<h2 id="龙门"><a href="#龙门" class="headerlink" title="龙门"></a>龙门</h2><img src="/2024/07/25/taishan_travel/IMG_20240624_182059.jpg" alt="IMG_20240624_182059" style="zoom:12%;">

<h2 id="升仙坊"><a href="#升仙坊" class="headerlink" title="升仙坊"></a>升仙坊</h2><img src="/2024/07/25/taishan_travel/IMG_20240624_184010.jpg" alt="IMG_20240624_184010" style="zoom:12%;">

<h2 id="刻字"><a href="#刻字" class="headerlink" title="刻字"></a>刻字</h2><img src="/2024/07/25/taishan_travel/IMG_20240624_173655_edit_62212043219672.jpg" alt="IMG_20240624_173655_edit_62212043219672" style="zoom:12%;">

<br>

<img src="/2024/07/25/taishan_travel/IMG_20240624_175207_edit_62156931195202.jpg" alt="IMG_20240624_175207_edit_62156931195202" style="zoom:10%;">

<br>

<img src="/2024/07/25/taishan_travel/IMG_20240625_063755.jpg" alt="IMG_20240625_063755" style="zoom:12%;">

<p>像这样的刻字在这个地方还有不计其数，如果要说最久远的，可能要数岱庙里李斯为秦二世的刻字了，那副刻字随着时间的消磨只剩寥寥几个字。</p>
<img src="/2024/07/25/taishan_travel/image-20240726110457865.png" alt="image-20240726110457865" style="zoom: 40%;">

<center>图片来源于网络</center>

<h2 id="南天门-天街-玉皇顶"><a href="#南天门-天街-玉皇顶" class="headerlink" title="南天门-天街-玉皇顶"></a>南天门-天街-玉皇顶</h2><img src="/2024/07/25/taishan_travel/IMG_20240624_185345_edit_62433046371201.jpg" alt="IMG_20240624_185345_edit_62433046371201" style="zoom:15%;">

<center>路人大哥帮我拍的</center>

<img src="/2024/07/25/taishan_travel/IMG_20240624_190641.jpg" alt="IMG_20240624_190641" style="zoom:12%;">

<br>

<img src="/2024/07/25/taishan_travel/Screenshot_20240624_223334_com.autonavi.minimap_e.jpg" alt="Screenshot_20240624_223334_com.autonavi.minimap_e" style="zoom:25%;">

<br>

<img src="/2024/07/25/taishan_travel/Screenshot_20240624_202610_com.huawei.compass_edi.jpg" alt="Screenshot_20240624_202610_com.huawei.compass_edi" style="zoom:25%;">

<p>到南天门的时候正好赶上日落，夕阳颜色偏橙红，很绚丽但是没有特别大的温度</p>
<img src="/2024/07/25/taishan_travel/IMG_20240624_185754.jpg" alt="IMG_20240624_185754" style="zoom:10%;">

<br>

<img src="/2024/07/25/taishan_travel/南天门夕阳.jpg" alt="IMG_20240624_192902_edit_61600039356224" style="zoom:8%;">

<h2 id="观日出"><a href="#观日出" class="headerlink" title="观日出"></a>观日出</h2><p>在山顶裹着军大衣等了一晚上，100r押金，30r租金，人真的很多，玉皇顶上都没什么位置可以坐着，尤其到了4点，红旗一举，人群全站起来了，根本不敢坐在地上，怕被踩。。</p>
<img src="/2024/07/25/taishan_travel/IMG_20240625_032804_edit_5404153770528.jpg" alt="IMG_20240625_032804_edit_5404153770528" style="zoom:15%;">

<p>虽然不太清楚这是为什么，但是太阳是从东北方向出来的，而不是东南方向，甚至我们还花了很长时间才找准方位；</p>
<p>朝阳颜色比较清淡，从最初的小光点逐渐变亮，变黄，变得火热，直到7点钟开始，太阳的温度照在身上已经有滚烫的感觉；</p>
<img src="/2024/07/25/taishan_travel/Collage_20240625_124523.jpg" alt="Collage_20240625_124523" style="zoom:18%;">

<br>

<img src="/2024/07/25/taishan_travel/%E6%9C%9D%E9%98%B32.png" alt="朝阳2" style="zoom:17%;">

<p>这天还是日月同辉</p>
<img src="/2024/07/25/taishan_travel/IMG_20240625_051334.jpg" alt="IMG_20240625_051334" style="zoom:10%;">

<p>人真的很多</p>
<img src="/2024/07/25/taishan_travel/勇闯天涯.jpg" alt="IMG_20240625_055243_edit_5254111300759" style="zoom:10%;">

<p>泰山的气象站。</p>
<img src="/2024/07/25/taishan_travel/IMG_20240625_043819.jpg" alt="IMG_20240625_043819" style="zoom:10%;">

<br>

<img src="/2024/07/25/taishan_travel/IMG_20240625_051923.jpg" alt="IMG_20240625_051923" style="zoom:10%;">

<p>那路人姐说的一点没错，真的很难绷，真想删掉（<strong>要黑化了</strong>）</p>
<img src="/2024/07/25/taishan_travel/mmexport1719446927162_edit_99879125112362.jpg" alt="mmexport1719446927162_edit_99879125112362" style="zoom:20%;">

<p>最后去瞻鲁台看了一眼，顾名思义，这个地方可以看见过去鲁国的境内（好像是这样）</p>
<img src="/2024/07/25/taishan_travel/%E7%9E%BB%E9%B2%81%E5%8F%B0.png" alt="瞻鲁台" style="zoom:10%;">



<h2 id="下山所见"><a href="#下山所见" class="headerlink" title="下山所见"></a>下山所见</h2><img src="/2024/07/25/taishan_travel/IMG_20240625_073157.jpg" alt="IMG_20240625_073157" style="zoom:12%;">

<p>刚出南天门前的阶梯上看到的，之前闷头爬是背对它的，下山才看到还有这样的风景，”一览众山小“大概就是这意思吧</p>
<img src="/2024/07/25/taishan_travel/一览众山小.jpg" alt="IMG_20240625_073447_edit_82847305208190" style="zoom:10%;">

<p>从南天门往下走的商贩（南天门有索道可以到桃花源）</p>
<img src="/2024/07/25/taishan_travel/IMG_20240625_073600.jpg" alt="IMG_20240625_073600" style="zoom:11%;">

<p>在龙门碰到的，好像是中国石油大学的博士，跟他妈妈一块过来的</p>
<img src="/2024/07/25/taishan_travel/%E4%B8%8B%E5%B1%B1%E6%89%80%E8%A7%81%EF%BC%882%EF%BC%89.png" alt="下山所见（2）" style="zoom:12%;">

<p>下山途中碰到的小情侣组合</p>
<img src="/2024/07/25/taishan_travel/%E4%B8%8B%E5%B1%B1%E6%89%80%E8%A7%81%EF%BC%881%EF%BC%89.png" alt="下山所见（1）" style="zoom:15%;">

<p>在中天门见到的，其实五元纸币上的情景是合成出来的，现实是找不到一模一样的地方的</p>
<img src="/2024/07/25/taishan_travel/%E4%BA%94%E5%85%83%E7%BA%B8%E5%B8%81.png" alt="五元纸币" style="zoom:25%;">

<p>红门附近看到的，手机打鸟打不清楚，懒得修图了</p>
<img src="/2024/07/25/taishan_travel/IMG_20240626_092948.jpg" alt="IMG_20240626_092948" style="zoom:10%;">

<h2 id="岱庙"><a href="#岱庙" class="headerlink" title="岱庙"></a>岱庙</h2><p>传说中祭祀的地方，举行封禅大典的地方</p>
<img src="/2024/07/25/taishan_travel/IMG_20240626_100914_edit_49982107513205.jpg" alt="IMG_20240626_100914_edit_49982107513205" style="zoom:15%;">

<br>

<img src="/2024/07/25/taishan_travel/%E5%B2%B1%E5%BA%992.png" alt="岱庙2" style="zoom:13%;">

<p>这里没有过多的拍摄照片，毕竟还是很庄重的地方，泰山石自古就有真邪祟的说法，泰山更是被称作泰山奶奶的道场。</p>
<p>在泰山最北边可以看到非常不错的景色。</p>
<img src="/2024/07/25/taishan_travel/%E6%B3%B0%E5%B1%B1%E8%BF%9C%E6%99%AF.png" alt="泰山远景" style="zoom:15%;">

<h2 id="县衙大院"><a href="#县衙大院" class="headerlink" title="县衙大院"></a>县衙大院</h2><h3 id="糁汤"><a href="#糁汤" class="headerlink" title="糁汤"></a>糁汤</h3><p>这里的特色，糁汤，味道很棒，微微咸口，而且这家店的规则是8块钱自主，面食和糁汤可以随便拿，但是吃多少拿多少。</p>
<img src="/2024/07/25/taishan_travel/%E7%B3%81%E6%B1%A4.png" alt="糁汤" style="zoom:12%;">

<p>这个看起来，是用滚烫的羹汁（羹汁里有什么我并不清楚）去冲熟蛋液，再加入他们自制的姜末和醋，味道非常不错</p>
<h3 id="茶豆腐"><a href="#茶豆腐" class="headerlink" title="茶豆腐"></a>茶豆腐</h3><p>我怀疑我被骗了，但我没有证据，因为这个怎么吃味道都是普通臭豆腐，主要是老板自己表现出来的样子，好像他自己也不清楚茶豆腐是什么。</p>
<img src="/2024/07/25/taishan_travel/IMG_20240626_104302.jpg" alt="IMG_20240626_104302" style="zoom:10%;">

<h3 id="油酥火烧"><a href="#油酥火烧" class="headerlink" title="油酥火烧"></a>油酥火烧</h3><p>这个挺便宜的，味道也一般般吧，比较干巴，可能要搭配糁汤什么的一块吃。</p>
<img src="/2024/07/25/taishan_travel/%E6%B2%B9%E9%85%A5%E7%81%AB%E7%83%A7.png" alt="油酥火烧" style="zoom:10%;">

<h2 id="LAST"><a href="#LAST" class="headerlink" title="LAST"></a>LAST</h2><p>至此，为期6天（2024.6.21-&gt;2024.6.26)的山东毕业单人旅行就结束了，玩得可以说是非常尽兴啊，虽然也因为第一次出远门，经验不足，吃了不少亏，但总体来看这趟旅行还是非常不错的，见识到了自然风光也见到了人文文化。</p>
<p>都说泰山专治嘴硬的人，我这一趟算不算合格了呢，嘿嘿嘿</p>
<h4 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h4><blockquote>
<p>1）6月24号刚到达泰山脚下，想着洗个澡休息一段时间再去爬山，结果手一拧莲蓬头，直接碎掉了，是的，直接碎掉了（呆若木鸡）</p>
<p>2）玉皇顶上人挤人，一开始人是躺着的，到了00点就只能坐着了，差不多2点开始就只能蜷着了，到后面就人叠人，我腰窝里还夹了一个女生的脑袋，腿压在另一个男的身上</p>
</blockquote>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>旅途</tag>
      </tags>
  </entry>
  <entry>
    <title>2024/07/18-15:56</title>
    <url>/2024/07/18/20240718_1556/</url>
    <content><![CDATA[<p>​	自从发现工位后面有个碎纸机，每天想着法子往里面丢纸，甚至连盒马买面包的小票都要留着塞进去，就为了听那个兹拉兹拉的声音，那叫一个酸爽解压。</p>
<style>
        .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 5px;
            width: 300px; /* 调整总宽度以适应图片 */
            margin-left: 0;
        }
        .grid-container img {
            width: 100%;
            height: 100px; /* 固定高度以确保正方形 */
            object-fit: cover; /* 裁切图片以适应容器 */
            object-position: center; /* 中心对齐裁切 */
            display: block;
            border-radius: 10px; 
        }
    </style>
 <div class="grid-container">
    <img src="/2024/07/18/20240718_1556/终于.png" alt="终于上当了">
</div>

]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>淄博旅行</title>
    <url>/2024/07/15/zibo_travel/</url>
    <content><![CDATA[<p>​	2024年6月23日，在淄博市停留了一天时间游玩。</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-07-15 10:48</li>
<li>updateTime: 2024-07-15 10:48</li>
</ul>
</blockquote>
<h2 id="行程记录"><a href="#行程记录" class="headerlink" title="行程记录"></a>行程记录</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">6月23日：晴</span><br><span class="line">08：40 骑电瓶车前往八大局便民市场</span><br><span class="line">11：30 骑共享电动车前往齐风塔</span><br><span class="line">12：15 打车前取吃午饭</span><br><span class="line">14：00 骑共享电瓶车前往中国琉璃博物馆</span><br><span class="line">17：00 骑电瓶车前往海岱楼</span><br><span class="line">18：20 搓顿烧烤</span><br><span class="line">19：05 骑车返回酒店拿行李</span><br><span class="line">19：46 打车前往淄博站</span><br><span class="line">20：15 乘坐班次G454前往泰安站</span><br></pre></td></tr></table></figure>

<h2 id="出行路线"><a href="#出行路线" class="headerlink" title="出行路线"></a>出行路线</h2><img src="/2024/07/15/zibo_travel/eb43fd68f43fd31e4d26e0f8586056c.png" alt="eb43fd68f43fd31e4d26e0f8586056c" style="zoom: 33%;">

<h2 id="八大局便民市场"><a href="#八大局便民市场" class="headerlink" title="八大局便民市场"></a>八大局便民市场</h2><img src="/2024/07/15/zibo_travel/%E5%85%AB%E5%A4%A7%E5%B1%80%E4%BE%BF%E6%B0%91%E5%B8%82%E5%9C%BA.png" alt="八大局便民市场" style="zoom:15%;">

<p>早上一大早骑车过来的，这里看上去像是一个巨大的集市，售卖各种小物件，琉璃，小吃等等。</p>
<p>香酥牛奶棒，蓝莓味的，3r一个，还可以，外面口感吃起来像面包，其实味道和土司涂蓝莓酱真的很像。</p>
<img src="/2024/07/15/zibo_travel/%E8%93%9D%E8%8E%93%E5%91%B3%E9%A6%99%E9%85%A5%E7%89%9B%E5%A5%B6%E6%A3%92.png" alt="蓝莓味香酥牛奶棒" style="zoom:15%;">

<p>抹茶味的紫米饼，12.3r一个，老板人很好，坚持要给我这么一大块，但说真的，谁能吃得下呢，尤其这天还特别热，啃一口太干了，带着又不方便，扔垃圾桶了，太可惜了，要是有试吃装就好了，味道其实挺不错的。</p>
<img src="/2024/07/15/zibo_travel/%E7%B4%AB%E7%B1%B3%E9%A5%BC.png" alt="紫米饼" style="zoom: 15%;">

<p>锅盔饼，分量太大了，实在吃不完，口感脆脆的，适合当零食吃，后来吃不完扔烤肉店了。</p>
<img src="/2024/07/15/zibo_travel/%E9%94%85%E7%9B%94%E9%A5%BC.png" alt="锅盔饼" style="zoom:15%;">

<p>路过买了一斤鲜啤，6r，味道很清爽，主要是天太热了，医生上次和我说戒烟酒戒辛辣，不要熬夜久坐，烟我是不抽的，以往夏天我会喝啤酒，但是医生这么说了，所以我也是隔了几个月没有喝过一滴酒【上一回喝是过年和家里亲戚喝的】，但是现在来到了山东，不搞一点其实也挺可惜的，姑且破一回例。</p>
<img src="/2024/07/15/zibo_travel/%E5%95%A4%E9%85%92.png" alt="啤酒" style="zoom:25%;">

<p>从集市出来，买的琉璃小物件，其实还有一对龙虎，三个加在一起90多，那对龙虎买完就后悔了【不好看】</p>
<img src="/2024/07/15/zibo_travel/%E7%90%89%E7%92%83%E5%B0%8F%E7%8C%AA.png" alt="琉璃小猪" style="zoom:25%;">

<h2 id="齐风塔"><a href="#齐风塔" class="headerlink" title="齐风塔"></a>齐风塔</h2><p>孝妇河湿地公园的标志建筑，但是天气太热加上路线似乎有点问题，我过去了之后没找到能直接进入的地方，所以远远地拍了一张照片就撤了。</p>
<img src="/2024/07/15/zibo_travel/%E9%BD%90%E9%A3%8E%E5%A1%94.png" alt="齐风塔" style="zoom:15%;">

<h2 id="中国琉璃博物馆"><a href="#中国琉璃博物馆" class="headerlink" title="中国琉璃博物馆"></a>中国琉璃博物馆</h2><img src="/2024/07/15/zibo_travel/%E7%90%89%E7%92%83%E5%8D%9A%E7%89%A9%E9%A6%86.png" alt="琉璃博物馆" style="zoom:15%;">

<p>这里有中国的陶瓷发展史，包括了早期原始人用的瓦罐，瓦器等等，拍了一点图片。</p>
<img src="/2024/07/15/zibo_travel/%E3%80%8A%E6%A8%8A%E5%8D%8E%E5%87%80%E7%95%8C%E3%80%8B%E7%8E%89%E5%87%80%E7%93%B6.png" alt="《樊华净界》玉净瓶" style="zoom:15%;">

<br>

<img src="/2024/07/15/zibo_travel/%E5%87%A4%E8%88%9E%E5%92%8C%E9%B8%A3%E5%9B%BD%E5%AE%B4%E7%94%A8%E7%93%B7.png" alt="凤舞和鸣国宴用瓷" style="zoom:10%;">

<br>

<img src="/2024/07/15/zibo_travel/%E9%B8%A1%E8%A1%80%E7%BA%A2%E8%A7%82%E9%9F%B3%E7%93%B6.png" alt="鸡血红观音瓶" style="zoom:15%;">

<br>

<img src="/2024/07/15/zibo_travel/%E9%B8%A1%E6%B2%B9%E9%BB%84%E9%95%8C%E5%88%BB%E7%BD%97%E6%B1%89%E5%9B%BE.png" alt="鸡油黄镌刻罗汉图" style="zoom:13%;">

<br>

<img src="/2024/07/15/zibo_travel/%E9%99%B6%E7%93%B7%E7%90%89%E7%92%83%E7%93%B6.png" alt="陶瓷琉璃瓶" style="zoom:15%;">

<br>

<img src="/2024/07/15/zibo_travel/%E9%99%B6%E7%93%B7%E9%BE%99%E8%99%BE.png" alt="陶瓷龙虾" style="zoom: 15%;">

<br>

<img src="/2024/07/15/zibo_travel/%E9%99%B6%E7%93%B7%E8%8C%89%E8%8E%89%E8%8A%B1.png" alt="陶瓷茉莉花" style="zoom:15%;">

<br>

<img src="/2024/07/15/zibo_travel/%E9%99%B6%E7%93%B7%E8%91%A1%E8%90%84.png" alt="陶瓷葡萄" style="zoom:15%;">

<br>

<img src="/2024/07/15/zibo_travel/%E5%BF%98%E8%AE%B0%E6%8B%8D%E5%90%8D%E5%AD%97%E4%BA%86%E7%9A%84%E7%93%B7%E7%93%B6.png" alt="忘记拍名字了的瓷瓶" style="zoom:13%;">

<br>

<img src="/2024/07/15/zibo_travel/%E5%BF%98%E8%AE%B0%E6%8B%8D%E5%90%8D%E5%AD%97%E4%BA%86%E7%9A%84%E7%93%B7%E5%99%A8.png" alt="忘记拍名字了的瓷器" style="zoom:10%;">

<h2 id="海岱楼"><a href="#海岱楼" class="headerlink" title="海岱楼"></a>海岱楼</h2><p>这其实是个书阁，外观很漂亮</p>
<img src="/2024/07/15/zibo_travel/%E6%B5%B7%E5%B2%B1%E6%A5%BC.png" alt="海岱楼" style="zoom:15%;">

<h2 id="淄博烧烤"><a href="#淄博烧烤" class="headerlink" title="淄博烧烤"></a>淄博烧烤</h2><p>比较赶时间，只吃了两家，一家看起来是连锁店</p>
<img src="/2024/07/15/zibo_travel/%E5%B0%8F%E7%83%A7%E7%83%A4.png" alt="小烧烤" style="zoom:12%;">

<br>

<img src="/2024/07/15/zibo_travel/%E5%B0%8F%E7%83%A7%E7%83%A4(2).png" alt="小烧烤(2)" style="zoom:15%;">

<br>

<img src="/2024/07/15/zibo_travel/%E5%B0%8F%E7%83%A7%E7%83%A4(3).png" alt="小烧烤(3)" style="zoom:12%;">

<p>花了40来块钱买了一份套餐，本来以为已经蛮划算的了</p>
<p>直到晚上那顿。。。</p>
<img src="/2024/07/15/zibo_travel/%E5%B0%8F%E7%83%A7%E7%83%A4(4).png" alt="小烧烤(4)" style="zoom:25%;">

<p>80r这么多</p>
<img src="/2024/07/15/zibo_travel/%E5%A4%A7%E7%83%A7%E7%83%A4.png" alt="大烧烤" style="zoom:25%;">

<p>哈哈哈~</p>
<p>不过说实话，没点面皮就这么直接吃，有点腻了【当时想着点多了吃不完，事实上也确实没吃完】</p>
<img src="/2024/07/15/zibo_travel/%E5%A4%A7%E7%83%A7%E7%83%A4(2).png" alt="大烧烤(2)" style="zoom:12%;">

<h2 id="LAST"><a href="#LAST" class="headerlink" title="LAST"></a>LAST</h2><p>至此，淄博的旅途就告一段落了，这一次由于交通工具、时间以及精力上的限制，我只游玩了张店区，我在这个地方做的攻略不是特别彻底，淄博看起来并不适合一个人来玩，吃烧烤这种事一个人吃不是很得劲。。。</p>
<p>琉璃馆怎么说呢，很华丽，但不是特别值得大老远跑过来看。。。可能这个地方还是更适合组团或者自驾游，听说博山区的烧烤要更加出色。</p>
<p>另外。。。我请问？？？</p>
<img src="/2024/07/15/zibo_travel/image-20240724162657704.png" alt="image-20240724162657704" style="zoom: 33%;">

<br>

<img src="/2024/07/15/zibo_travel/image-20240725095327146.png" alt="image-20240725095327146" style="zoom:40%;">

<h4 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h4><blockquote>
<p>1）定房间定错了，定的无窗房，太压抑了，哥们在济南奔波了一天来到淄博，进房间直接给干自闭了</p>
<p>2）吃完烧烤，骑着电驴回旅店拿寄存的行李，结果发现时间没把握好【电瓶车限速太狠了】，差点错过高铁了，好在最后师傅足够给力，外加运气好高铁晚点，最后还是赶上了。</p>
<img src="/2024/07/15/zibo_travel/image-20240725095442762.png" alt="image-20240725095442762" style="zoom:25%;">
</blockquote>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>旅途</tag>
      </tags>
  </entry>
  <entry>
    <title>泉城-济南</title>
    <url>/2024/07/14/jinan_travel/</url>
    <content><![CDATA[<p>​	2024年6月21日，独自前往山东进行游玩，济南市停留了一天半时间游玩。</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-06-28 10:48</li>
<li>updateTime: 2024-07-14 10:48</li>
</ul>
</blockquote>
<h2 id="行程记录"><a href="#行程记录" class="headerlink" title="行程记录"></a>行程记录</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">6月21日：小雨转暴雨</span><br><span class="line">05：40 驱车前往上海虹桥火车站</span><br><span class="line">07：38 乘坐G110次列车前往济南西站</span><br><span class="line">11：40 到达济南西站，买了两张刮刮乐，一张没中</span><br><span class="line">12：35 乘坐G6999次列车前往济南站</span><br><span class="line">13：00 前往酒店，放下行李，前往最近的一个超意兴吃饭</span><br><span class="line">15：00 步行前往大观园</span><br><span class="line">16：00 抵达趵突泉</span><br><span class="line">19：00 返回酒店</span><br><span class="line">19：40 骑自行车前往千佛山</span><br><span class="line">21：15 打车返回酒店</span><br><span class="line"></span><br><span class="line">6月22日：晴</span><br><span class="line">08：30 出发前往济南站办理行李寄存，加一顿早饭</span><br><span class="line">08：52 乘坐K3次公交车，在共青团路站下车，骑车前往五龙潭公园 </span><br><span class="line">11：30 骑车前往芙蓉街</span><br><span class="line">12：30 穿过芙蓉街来到曲水亭街</span><br><span class="line">12：55 穿过曲水亭街来到大明湖</span><br><span class="line">13：00 沿着大明湖步行游览</span><br><span class="line">14：00 进入超然楼进行观光</span><br><span class="line">16：45 骑车前往宽厚里</span><br><span class="line">17：15 从宽厚里步行前往黑虎泉</span><br><span class="line">18：00 骑车返回曲水亭街</span><br><span class="line">18：40 骑车前往超然楼</span><br><span class="line">19：30 骑车前往济南站</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="出行路线"><a href="#出行路线" class="headerlink" title="出行路线"></a>出行路线</h2><img src="/2024/07/14/jinan_travel/7707e2487fcdfccad200b6d92c858b1.png" alt="7707e2487fcdfccad200b6d92c858b1" style="zoom: 50%;">

<h2 id="大观园"><a href="#大观园" class="headerlink" title="大观园"></a>大观园</h2><p>阿油给我的酒店定在槐荫区经三路省立医院附近地希岸酒店，个人还是很满意这家酒店的，不论是卫生还是配套设施；</p>
<p>因为下雨，我刚开始的计划是步行前往大观园，结束之后直接返回酒店休息的</p>
<p>步行路上正好路过了网红打卡点，有不少人在此处拍照，老城区的一些城市文化做的还是很可以的</p>
<img src="/2024/07/14/jinan_travel/%E5%A4%B9%E5%BF%83%E8%83%A1%E5%90%8C.png" alt="夹心胡同" style="zoom:15%;">

<br>

<img src="/2024/07/14/jinan_travel/%E6%B5%8E%E5%8D%97%E5%A2%99.png" alt="济南墙" style="zoom:15%;">

<br>

<img src="/2024/07/14/jinan_travel/%E7%88%B1%E5%BF%83%E7%BA%A2%E7%81%AF.png" alt="爱心红灯" style="zoom:13.5%;">

<p>计划赶不上变化，大观园显然是被自媒体捧过头了😂</p>
<p>小吃街规模不算很大，能逛的区域不算很多，个人觉得不算很惊艳，不过里面有一些非物质文化的小店，包括相声，泥砖等等</p>
<img src="/2024/07/14/jinan_travel/%E5%A4%A7%E8%A7%82%E5%9B%AD.png" alt="大观园" style="zoom:20%;">

<h2 id="趵突泉"><a href="#趵突泉" class="headerlink" title="趵突泉"></a>趵突泉</h2><p>向东一路步行过去，走到了济南绿地普利中心，运气不太妙啊，到这的时候突然下起了暴雨</p>
<img src="/2024/07/14/jinan_travel/e77f1a35c400301fb207671d1211242.png" alt="e77f1a35c400301fb207671d1211242" style="zoom:25%;">

<p>一阵暴雨过后，前往趵突泉的路上走错了地方，误入了一个小胡同里，遇到一个阿姨，帮我指明了前往趵突泉的途径，然后塞给了我一本小册子（果然是考公考编大省）</p>
<img src="/2024/07/14/jinan_travel/image-20240702132800880.png" alt="image-20240702132800880" style="zoom: 75%;">

<p>趵突泉这个景点凭借全日制学生证，在当地的一个app—–369出行上绑定学信网信息之后会生成一个通过码，免费参观趵突泉，不过学校在这个节骨眼提前给我的学信网提交了毕业信息，导致这个认证并没有通过，最后还是购买的学生票，这个只看学生证信息，比较宽松，20r一张</p>
<p><img src="/2024/07/14/jinan_travel/image-20240702134340918.png" alt="image-20240702134340918"></p>
<p>济南之所以叫泉城，不是因为这里有号称天下第一趵突泉，而是因为这里有着一个较大范围的泉群，包括一些小胡同的命名也是根据小胡同里的泉名来的。</p>
<p>所谓的趵突泉其实是一个三眼泉，我刚到的时候正在下雨，泉水的翻腾并不是很明显，看过去就像是小泡泡升起一样。</p>
<p><img src="/2024/07/14/jinan_travel/%E8%B6%B5%E7%AA%81%E6%B3%89.png" alt="趵突泉"></p>
<p>值得一提的是，不仅是这一片泉水池，几乎园区里能观察到的泉水池几乎都有这个特性，水池清澈见底，观赏的鱼也是肥美华丽，鱼和水之间虽然达不到皆若空游无所依的地步，但也能轻松的望见鱼的游耍以及池底的植被。这一方面是因为泉水本身的水质足够好，另一方面也是因为园区对泉群的管理到位，几乎每一个有泉池的地方都能听见广播在播放禁止游客投喂米油，馒头，面包之类的话语。</p>
<p>在这片园区之中，还有一些纪念馆，包括李清照纪念馆以及五三惨案纪念馆等等</p>
<img src="/2024/07/14/jinan_travel/%E6%9D%8E%E6%B8%85%E7%85%A7%E7%94%BB%E5%83%8F.png" alt="李清照画像" style="zoom:15%;">

<blockquote>
<p>济南惨案，又称五三惨案。1928年2月，蒋、桂、冯、阎联合发动了与张作霖争夺东北的战争。1928年4月，蒋介石军队北进。为阻止英、美势力向北发展，1928年5月3日，日本侵略者在山东省济南向国民党军发动进攻。由于蒋介石一味妥协退让并下达不抵抗命令，大量中国军民遭到屠杀。当国民革命军进占济南时，日本帝国主义借口保护日侨，出兵干涉，并于1928年5月3日凶残地杀害了国民政府山东特派交涉员蔡公时等17名外交人员，进而强占全城，恣意杀戮中国军民6123人，激起全中国人民的极大愤慨，同时也受到世界舆论的谴责。美、英等国从他们在华利益出发，也向日本施加压力。1929年2月28日，日本政府与国民党政府达成协定，并从济南撤军，济南事件即告结束。</p>
</blockquote>
<p>出于对不幸遇难的那些亡者的敬意，五三惨案纪念馆以及纪念碑都没有拍摄照片。不过，在纪念馆中存放着济南城墙的原貌修复模型。</p>
<img src="/2024/07/14/jinan_travel/%E8%80%81%E6%B5%8E%E5%8D%97%E5%A4%8D%E5%8E%9F%E6%A8%A1%E5%9E%8B.png" alt="老济南复原模型" style="zoom: 15%;">

<p>可以看到济南曾经也是有里外两层城墙的，在经历了五三惨案中的炮击过后，城墙损失惨重，建国之后又拆除了一大部分，直至现在前去的时候已经看不到城墙的影子了。</p>
<h2 id="千佛山"><a href="#千佛山" class="headerlink" title="千佛山"></a>千佛山</h2><p>千佛山本来没准备爬的，但是始终碍于想弄个收集，所以在19点多的时候，眼瞅着雨下的不大，外套一披，登山杖一挂，美团自行车一蹬就出发了。</p>
<img src="/2024/07/14/jinan_travel/image-20240703101658725.png" alt="image-20240703101658725" style="zoom:25%;">

<p>走错了地方，从偏门进去的，千佛山晚上18点之后不收门票。不过今天天气不是特别好，所以，夜里过来的人并不多，但偶尔还是可以碰到一些的。</p>
<p>上山走的路似乎不是大路，不仅狭窄，而且没有什么路灯。</p>
<img src="/2024/07/14/jinan_travel/image-20240704121142124.png" alt="image-20240704121142124" style="zoom:25%;">

<br>

<img src="/2024/07/14/jinan_travel/image-20240704110017720.png" alt="image-20240704110017720" style="zoom: 80%;">

<p>在接近山顶的位置有一个较大的平台，因为下午下雨，往山顶方向的台阶被放了告示牌，因此，实际上这一次我并没有登顶。</p>
<p><img src="/2024/07/14/jinan_travel/image-20240704110552965.png" alt="image-20240704110552965"></p>
<p>平台上方可以看到济南老城区的全貌，不过由于下午下了一场不小的阵雨，导致晚间的雾气遮住了夜景</p>
<img src="/2024/07/14/jinan_travel/image-20240704110651807.png" alt="image-20240704110651807" style="zoom: 10%;">

<p>下山走的大路，从正门出来的。</p>
<img src="/2024/07/14/jinan_travel/image-20240704121647858.png" alt="image-20240704121647858" style="zoom:25%;">

<h2 id="五龙潭公园"><a href="#五龙潭公园" class="headerlink" title="五龙潭公园"></a>五龙潭公园</h2><p>乘坐K3次公交车，至共青团路之后，骑车到达五龙潭公园南部，实际上我是从中共山东早期历史纪念馆的后门（南）进入公园的。</p>
<img src="/2024/07/14/jinan_travel/image-20240704155606548.png" alt="image-20240704155606548" style="zoom: 50%;">

<p>五龙潭因为五龙迎宾得名，这里依着泉群修建，自然也搭配了直饮水，不过，水不如黑虎泉的量大，因此小小的水龙头前排起了长长的队伍，我也就没有去打水了。</p>
<p>在超然楼中的木雕也刻了五龙迎宾的画面。</p>
<img src="/2024/07/14/jinan_travel/%E4%BA%94%E9%BE%99%E8%BF%8E%E5%AE%BE.png" alt="五龙迎宾" style="zoom:15%;">

<p>水池边有不少的小孩在嬉水，拿着水枪喷水玩。</p>
<p>水池中的水很清澈，事实上大多泉水都像这样，不负泉城之名；听说九寨沟的水更加的神奇，希望有一天能亲眼看看。</p>
<img src="/2024/07/14/jinan_travel/%E4%BA%94%E9%BE%99%E6%BD%AD%E5%85%AC%E5%9B%AD.png" alt="五龙潭公园" style="zoom:13%;">

<h2 id="芙蓉街"><a href="#芙蓉街" class="headerlink" title="芙蓉街"></a>芙蓉街</h2><p>从五龙潭公园南门出来向东骑行可以快速抵达芙蓉街。</p>
<img src="/2024/07/14/jinan_travel/%E8%8A%99%E8%93%89%E8%A1%97.png" alt="芙蓉街" style="zoom:15%;">

<p>芙蓉街因为芙蓉泉得名，这边有很多的小吃店，规模略微逊色于宽厚里。</p>
<p>在这里踩了第一个坑，30r买的爆肚，感觉不是很划算，味道也中规中矩。</p>
<img src="/2024/07/14/jinan_travel/image-20240704161658983.png" alt="image-20240704161658983" style="zoom: 50%;">

<p>买的烧饼夹牛肉，味道非常不错，饼烤得很好，14r</p>
<img src="/2024/07/14/jinan_travel/%E7%83%A7%E9%A5%BC%E5%A4%B9%E7%89%9B%E8%82%89.png" alt="烧饼夹牛肉" style="zoom:10%;">

<p>继续往北走，会碰到一家卖西瓜汁的，用广播放“免费灌泉水”，我看了眼背包，两瓶水都见底了，但我又不好意思只灌水，所以又花了5r买了一小杯西瓜汁，西瓜汁是鲜榨的，味道很甜。</p>
<img src="/2024/07/14/jinan_travel/image-20240704162422780.png" alt="image-20240704162422780" style="zoom:15%;">

<h2 id="大明湖"><a href="#大明湖" class="headerlink" title="大明湖"></a>大明湖</h2><p>无意间走进了曲水亭街，一路向北，就到达了大明湖</p>
<img src="/2024/07/14/jinan_travel/%E5%A4%A7%E6%98%8E%E6%B9%96.png" alt="大明湖" style="zoom:25%;">

<p>这个时间选择去逛大明湖实在不是一个比较合适的时机，正值夏至的中午，太阳毒辣无比，但也正是这种高温天，荷花开的十分旺盛。</p>
<p>天气太热了，确实是有点影响观光的心情，我觉得这片糊域或许更适合晚饭后散步或者春秋天观光。</p>
<img src="/2024/07/14/jinan_travel/%E5%A4%A7%E6%98%8E%E6%B9%96%E8%8D%B7%E8%8A%B1.png" alt="大明湖荷花" style="zoom:15%;">

<p>这是一块放在超然楼门口的木雕，压缩了整个老济南的景点。</p>
<img src="/2024/07/14/jinan_travel/%E8%B6%85%E7%84%B6%E6%A5%BC%E6%9C%A8%E9%9B%95.png" alt="超然楼木雕" style="zoom:25%;">

<p>这个应该是大明湖的荷花木雕图</p>
<img src="/2024/07/14/jinan_travel/%E8%B6%85%E7%84%B6%E6%A5%BC%E6%9C%A8%E9%9B%952.png" alt="超然楼木雕2" style="zoom:25%;">

<p>超然楼外景</p>
<img src="/2024/07/14/jinan_travel/%E8%B6%85%E7%84%B6%E6%A5%BC.png" alt="超然楼" style="zoom:13%;">

<p>在前往济南站之前我从曲水亭街又专门骑车过来看超然楼的灯景，但是正值夏至，等到19：25分都没有开灯，只好先行放弃了。</p>
<p>不过，看了一会广场舞哈哈哈。</p>
<img src="/2024/07/14/jinan_travel/Videoframe_20240713_153346_com.huawei.himovie.loc.jpg" alt="Videoframe_20240713_153346_com.huawei.himovie.loc" style="zoom:25%;">

<p>最后前往济南站的路线是骑自行车去的，济南的老城区非机动车道还是很宽阔的，路修得也很不错，非常适合骑车</p>
<img src="/2024/07/14/jinan_travel/%E6%B5%8E%E5%8D%97%E8%87%AA%E8%A1%8C%E8%BD%A6%E9%81%93.png" alt="济南自行车道" style="zoom: 10%;">

<br>

<img src="/2024/07/14/jinan_travel/sporthealth-1-20240713-153633_edit_42309425324064.jpg" alt="sporthealth-1-20240713-153633_edit_42309425324064" style="zoom:25%;">

<h2 id="解放阁"><a href="#解放阁" class="headerlink" title="解放阁"></a>解放阁</h2><p>这里我没上去。。。路过拍了张照片</p>
<img src="/2024/07/14/jinan_travel/%E8%A7%A3%E6%94%BE%E9%98%81.png" alt="解放阁" style="zoom:15%;">

<h2 id="宽厚里"><a href="#宽厚里" class="headerlink" title="宽厚里"></a>宽厚里</h2><p>性质和芙蓉街很像，属于被改造过的商业街道，但是小吃数量不亚于芙蓉街</p>
<img src="/2024/07/14/jinan_travel/%E5%AE%BD%E5%8E%9A%E9%87%8C.png" alt="宽厚里" style="zoom:15%;">

<br>

<img src="/2024/07/14/jinan_travel/%E5%AE%BD%E5%8E%9A%E9%87%8C2.png" alt="宽厚里2" style="zoom:18%;">

<h2 id="黑虎泉"><a href="#黑虎泉" class="headerlink" title="黑虎泉"></a>黑虎泉</h2><p>黑虎泉位于解放阁的西南角，需要穿过一条护城河</p>
<p>黑虎泉的水源可以说是十分充足，水池边上也有很多好看的模特在拍照，如果有个大光圈镜头，确实是非常出片的。</p>
<img src="/2024/07/14/jinan_travel/%E9%BB%91%E8%99%8E%E6%B3%892.png" alt="黑虎泉泉水" style="zoom:15%;">

<p>景区有为游客开槽，借助石壁开好的槽口，可以直接灌水，当地的居民也经常会用一个一个的大桶去接水。我把自己已经空空如也的两个水瓶全都打满了。这里的水和平时买到的矿泉水和家里的自来水口感不太一样，要更加绵软柔和。</p>
<img src="/2024/07/14/jinan_travel/%E9%BB%91%E8%99%8E%E6%B3%89.png" alt="黑虎泉" style="zoom:20%;">

<h2 id="曲水亭街"><a href="#曲水亭街" class="headerlink" title="曲水亭街"></a>曲水亭街</h2><p>之后听了阿油的建议，我又返回了曲水亭街，虽然都是所谓的老街，但是和芙蓉街还是有着明显的不同。</p>
<p>曲水亭街更像是旧时代遗留下的纯粹的遗产，而芙蓉街更像是新时代用来吸引游客的产物。</p>
<p>但事实上，曲水亭街现在也在逐步改造，可以看到有不少老房子里面已经人去房空，被贴上封条了。</p>
<img src="/2024/07/14/jinan_travel/%E8%80%81%E6%B5%8E%E5%8D%97%E8%83%A1%E5%90%8C%E6%94%B9%E9%80%A0.png" alt="老济南胡同改造" style="zoom:25%;">

<br>

<img src="/2024/07/14/jinan_travel/%E8%80%81%E6%B5%8E%E5%8D%97%E5%A5%B6%E6%B2%B9%E5%86%B0%E6%A3%8D.png" alt="老济南奶油冰棍" style="zoom:25%;">

<br>

<img src="/2024/07/14/jinan_travel/%E6%9B%B2%E6%B0%B4%E4%BA%AD%E8%A1%97.png" alt="曲水亭街" style="zoom: 33%;">

<br>

<img src="/2024/07/14/jinan_travel/%E6%B5%8E%E5%8D%97%E8%80%81%E8%83%A1%E5%90%8C.png" alt="济南老胡同" style="zoom:10%;">

<br>

<img src="/2024/07/14/jinan_travel/%E8%B5%B7%E9%A3%8E%E6%A1%A5.png" alt="起风桥" style="zoom:15%;">

<p>【这里要是有一架无人机就好了】</p>
<p>【一定会有的！！】</p>
<h2 id="超意兴"><a href="#超意兴" class="headerlink" title="超意兴"></a>超意兴</h2><p>来到济南的第一顿饭，在超意兴吃的快餐，25r，非常的划算</p>
<img src="/2024/07/14/jinan_travel/IMG_20240621_135248.png" alt="IMG_20240621_135248" style="zoom:20%;">

<p>从大明湖出来以后还有一些时间，去武岳庙吃了块把子肉，个人评价口感有些比不上超意兴（切的有点厚，虽然知道它是快餐），当然这也有可能是天气太炎热了，又从大明湖走了一圈导致的食欲下降。</p>
<h2 id="LAST"><a href="#LAST" class="headerlink" title="LAST"></a>LAST</h2><p>济南老城区的文化部署还是做的很到位的，很多地方都成立了第三产业发展的部门，它的产物包括大观园（似乎还并不完善？）、芙蓉街、宽厚里以及未来的曲水亭街，在不破坏布局的情况下进行翻新，既保留了过去老胡同的徒感，又保证了新时代的观赏性，如果换一个合适的天气和气温，这样的地方或许会有一个更好的旅行体验。</p>
<p>另外，一个人的旅行或许是孤独了一些，包括应对一些突发状况并不成熟，但是相比团队出行，多了一份宁静和自由，对于突如其来的念头，也可以随时付诸实践想法产生-&gt;制定计划-&gt;执行计划），不仅如此，因为旅行个体数量的减少，和当地人接触的频率也提高了很多，这有助于我们产生对不同地域的人的看法和观感（或者说纠正更合适？），网上总是有很多人在开地图炮，人云亦云地传播，以至于演变到后面可能对没有见过的人产生一些错误的认知。</p>
<p>当然了，就我这两天和当地人接触下来，济南这边的人是非常热情好客的，不仅不抗拒和陌生游客的交流，还很乐意为游客提供一些经验上的帮助，包括路线，景点等等。</p>
<h4 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h4><blockquote>
<p>1）车票定的是学生票，但其实我是不具备购买学生票的条件的（学生证上需要盖章），但是最后也没有查这个，也算是占了点小便宜吧</p>
<p>2）11点到13点那会的太阳太毒辣了，胳膊没做防晒，导致两条手臂和后脖子都被晒伤了，持续不断的蜕皮。😥</p>
<img src="/2024/07/14/jinan_travel/wx_camera_1719046544940.jpg" alt="wx_camera_1719046544940" style="zoom:25%;">

<p>后来的后来，过了几天</p>
<img src="/2024/07/14/jinan_travel/wx_camera_1719390403383.jpg" alt="wx_camera_1719390403383" style="zoom:25%;">

<p>3）大明湖边上买了一包济南老酸奶大麻花，10r，里面也没吃到酸奶，纯面，太干了，啃了半个扔掉了</p>
<p>4）订票定错了，定成18点出发的车票了，导致19点45到的时候急得团团转，最后上车补票才坐到末班车，不仅比原来定的票贵而且还是站票。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>旅途</tag>
      </tags>
  </entry>
  <entry>
    <title>无锡-军嶂古道</title>
    <url>/2024/06/04/wuxi_travel/</url>
    <content><![CDATA[<p>​	2024年5月26日，LRay、汤日成、东南DNF三人前往无锡太湖周边进行游玩，天气阴凉，适合徒步</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-06-04 08:55</li>
<li>updateTime: 2024-06-06 13:32</li>
</ul>
</blockquote>
<h2 id="行程记录"><a href="#行程记录" class="headerlink" title="行程记录"></a>行程记录</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">5月26日：</span><br><span class="line">18：00 上海火车站集合</span><br><span class="line">19：35 到达无锡</span><br><span class="line">19：55 乘坐一号线前往南禅寺</span><br><span class="line">20：00 游玩南长街，茶颜悦色1.0</span><br><span class="line">21：40 前往酒店，休息</span><br><span class="line"></span><br><span class="line">5月27日：</span><br><span class="line">8：00 集合</span><br><span class="line">8：30 吃早餐</span><br><span class="line">9：20 打车抵达蠡园公园，并购置门票</span><br><span class="line">10：30 前往鼋头渚，准备进行徒步</span><br><span class="line">10：45 抵达宝界山林公园，军嶂古道A线启动</span><br><span class="line">12：00 徒步结束</span><br><span class="line">12：20 打车抵达酒店，汤老板请客吃中饭</span><br><span class="line">14：00 前往鼋头渚风景区</span><br><span class="line">15：12 爬上鹿顶山</span><br><span class="line">16：15 乘坐轮渡前往太湖仙岛</span><br><span class="line">18：20 打车前去晚饭</span><br><span class="line">19：00 茶颜悦色2.0启动</span><br><span class="line">21：00 返回酒店</span><br><span class="line"></span><br><span class="line">5月28日：</span><br><span class="line">8：00 集合</span><br><span class="line">8：25 早饭</span><br><span class="line">9：10 打车前去惠山古镇</span><br><span class="line">11：30 打车去吃中饭，茶颜悦色3.0启动</span><br><span class="line">12：49 乘坐高铁返回</span><br><span class="line">15：33 到家</span><br></pre></td></tr></table></figure>

<h2 id="南长街"><a href="#南长街" class="headerlink" title="南长街"></a>南长街</h2><br>

<img src="/2024/06/04/wuxi_travel/4b89c957cac4bc0340105379d6c3149.png" alt="4b89c957cac4bc0340105379d6c3149" style="zoom: 33%;">

<center><br>
    南禅寺站外的一条步行街<br><br>
    有很多各地的特色小吃以及小酒馆<br><br>
    小酒馆之中还有驻唱的吉他手在唱歌<br><br></center>
<img src="/2024/06/04/wuxi_travel/635f0a2b8f0d55d73afeacf15acf14d.png" alt="635f0a2b8f0d55d73afeacf15acf14d" style="zoom: 33%;">

<center><br>小吃街还是非常热闹的<br><br>即便是旅游淡季<br><br>也依然有相当多的人带着小孩在附近游玩<br><br>只是作为一个游客<br><br>我挺好奇为啥一眼看过去<br><br>好多都是其他地方的美食(・∀・(・∀・(・∀・*)<br><br></center>

<img src="/2024/06/04/wuxi_travel/b48121421dd91a5276f90bd6856e5df.png" alt="b48121421dd91a5276f90bd6856e5df" style="zoom: 33%;">

<center><br>步行街个人非常喜欢，真的很步行街<br><br>两侧还有很多很适合放松的小店<br><br>建筑也大多是江南特有的白墙黑瓦<br><br></center>

<img src="/2024/06/04/wuxi_travel/0b63e55eccb17bade774d1e96d9536f.png" alt="0b63e55eccb17bade774d1e96d9536f" style="zoom: 33%;">

<center><br>路边碰到的 ↑ <br><br>非常老的一个机器<br><br>所以这是为什么呢哈哈哈<br><br></center>

<img src="/2024/06/04/wuxi_travel/c12eeb504affac83d6290c9d77ffdc6.png" alt="c12eeb504affac83d6290c9d77ffdc6" style="zoom: 33%;">

<center><br>在无锡喝到了长沙特产茶颜悦色<br><br>排队的人蛮多的<br><br></center>

<img src="/2024/06/04/wuxi_travel/9d4365c205960d054f77e6c999aa47f.png" alt="9d4365c205960d054f77e6c999aa47f" style="zoom: 33%;">

<center><br>茶颜悦色1.0<br><br></center>

<img src="/2024/06/04/wuxi_travel/ec95c4c41b95b38a6a8bac1f6e1601b.png" alt="ec95c4c41b95b38a6a8bac1f6e1601b" style="zoom: 33%;">

<center><br>非常经典的小桥流水<br><br>位于南长街的出口位置<br><br></center>

<img src="/2024/06/04/wuxi_travel/19d00734826c8aa0045369227f2f991.png" alt="19d00734826c8aa0045369227f2f991" style="zoom: 33%;">

<br>

<h2 id="蠡园公园"><a href="#蠡园公园" class="headerlink" title="蠡园公园"></a>蠡园公园</h2><br>

<img src="/2024/06/04/wuxi_travel/62b721fd8eb56b9ecebe3d7b3a9e94e.png" alt="62b721fd8eb56b9ecebe3d7b3a9e94e" style="zoom: 33%;">

<center><br>天气预报原本说今天有中雨<br><br>所以暂时取消了徒步计划<br><br>选择了先去蠡园进行游玩<br><br></center>

<img src="/2024/06/04/wuxi_travel/618cb82399ff8e5247523225e7c3295.png" alt="618cb82399ff8e5247523225e7c3295" style="zoom: 33%;">

<br>

<img src="/2024/06/04/wuxi_travel/0b2f97d92d81bbdc082b15c55b8719d.png" alt="0b2f97d92d81bbdc082b15c55b8719d" style="zoom: 33%;">

<br>

<img src="/2024/06/04/wuxi_travel/7652f4176a3e53757f2de430679e66a.png" alt="7652f4176a3e53757f2de430679e66a" style="zoom: 33%;">

<center><br>非常神奇有没有!<br><br>到现在都没有下雨<br><br>甚至隐隐有要出太阳的迹象！<br><br>所以我们果断选择前去徒步<br><br></center>

<h2 id="宝界山林公园-军嶂古道"><a href="#宝界山林公园-军嶂古道" class="headerlink" title="宝界山林公园-军嶂古道"></a>宝界山林公园-军嶂古道</h2><center><h3>徒步路线如下</h3></center>

<img src="/2024/06/04/wuxi_travel/image-20240605135725673.png" alt="image-20240605135725673" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/75a68aa3be4521d319d2f2ace73a094.png" alt="75a68aa3be4521d319d2f2ace73a094" style="zoom: 33%;">

<br>

<img src="/2024/06/04/wuxi_travel/6b140467433f8c6cabce2ef700fc0bb.png" alt="6b140467433f8c6cabce2ef700fc0bb" style="zoom:33%;">


<center><br>路线有些偏野山的感觉<br><br>并没有人工开凿的痕迹<br><br>但是沿途可以看到有徒步团扎的飘带标记以及有人居住的场所（隐居？）<br><br>当然了，也时不时能碰到别人的小土包...<br><br></center>

<img src="/2024/06/04/wuxi_travel/6f8701a00ada2c7bf0ecfffd450d00b.png" alt="6f8701a00ada2c7bf0ecfffd450d00b" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/dc85f46992113347bf299d7aaedfd6d.png" alt="dc85f46992113347bf299d7aaedfd6d" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/fa67438411b13a560d498928e194bf8.png" alt="fa67438411b13a560d498928e194bf8" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/6ba64f8a74f8fd370d169393e0be116.png" alt="6ba64f8a74f8fd370d169393e0be116" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/df31837900c348bfd7662a540513daf.png" alt="df31837900c348bfd7662a540513daf" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/1427443a2e73c9c941f33ea93460927.png" alt="1427443a2e73c9c941f33ea93460927" style="zoom:33%;">

<center><br>珈瑜的大疆<br><br></center>

<img src="/2024/06/04/wuxi_travel/a2e775fb556f3202d3430f8a788803f.png" alt="a2e775fb556f3202d3430f8a788803f" style="zoom:33%;">

<center><br>众神之父请赐予我视野<br><br>走出来看到的小花↓<br><br></center>

<img src="/2024/06/04/wuxi_travel/f99b0a70d8fe594a1cb60876a89c5d0.png" alt="f99b0a70d8fe594a1cb60876a89c5d0" style="zoom:15%;">

<br>

<img src="/2024/06/04/wuxi_travel/e5e782b62f70befbee201f721164abd.png" alt="e5e782b62f70befbee201f721164abd" style="zoom:33%;">

<br>

<h2 id="太湖仙岛"><a href="#太湖仙岛" class="headerlink" title="太湖仙岛"></a>太湖仙岛</h2><center><h3>徒步路线如下</h3></center>

<img src="/2024/06/04/wuxi_travel/4a495848762e2f1ac7a93606bbfd2a3.png" alt="4a495848762e2f1ac7a93606bbfd2a3" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/e77e651e41cfffac455256ee30a62e7.png" alt="e77e651e41cfffac455256ee30a62e7" style="zoom:33%;">

<center><br>好歹是有台阶可以爬得了<br><br></center>

<img src="/2024/06/04/wuxi_travel/e10bf3fe081a0e31a17601c68bc5373.png" alt="e10bf3fe081a0e31a17601c68bc5373" style="zoom:33%;">

<center><br>鹿顶山晖<br><br>在这附近有范蠡的祠堂<br><br></center>

<img src="/2024/06/04/wuxi_travel/d8627057731e73a4529c303c82ff675.png" alt="d8627057731e73a4529c303c82ff675" style="zoom:33%;">

<center><br>下山碰到的一只哈基米<br><br>不过它的一只眼睛坏掉了<br><br></center>

<img src="/2024/06/04/wuxi_travel/95d6958ac2f4bdfe5576f6bd7e568c4.png" alt="95d6958ac2f4bdfe5576f6bd7e568c4" style="zoom:33%;">

<center><br>坐船前往太湖仙岛<br><br>这附近有不少像这样的木帆船<br><br></center>

<img src="/2024/06/04/wuxi_travel/082e66374891cb305cb637aba10c3f1.png" alt="082e66374891cb305cb637aba10c3f1" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/8dae16d449f1457f5fce533e2dab31d.png" alt="8dae16d449f1457f5fce533e2dab31d" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/1590570e99863f157b79663b746aa71.png" alt="1590570e99863f157b79663b746aa71" style="zoom:33%;">

<br>

<img src="/2024/06/04/wuxi_travel/08ba68d5c6cdcd8d8fed92638f6831e.png" alt="08ba68d5c6cdcd8d8fed92638f6831e" style="zoom:33%;">

<center><br>雨停了，正好赶上夕阳还有彩虹<br><br></center>

<img src="/2024/06/04/wuxi_travel/932115e476bfe0ce837efe884767298.png" alt="932115e476bfe0ce837efe884767298" style="zoom:33%;">

<br>

<h2 id="惠山古镇"><a href="#惠山古镇" class="headerlink" title="惠山古镇"></a>惠山古镇</h2><br>

<img src="/2024/06/04/wuxi_travel/958626e2f2af371925aef1288d50b0a.png" alt="958626e2f2af371925aef1288d50b0a" style="zoom:33%;">

<center><h3>鸟瞰图</h3></center>

<img src="/2024/06/04/wuxi_travel/49f67c697ac74de2f1dc938fe5f5007.jpg" alt="49f67c697ac74de2f1dc938fe5f5007" style="zoom: 20%;">

<center><br>BY 东南DNF<br><br></center>

<img src="/2024/06/04/wuxi_travel/ee0d47a4f62780f85d318749fc25a8f.png" alt="ee0d47a4f62780f85d318749fc25a8f" style="zoom:33%;">

<center><br>这幅窗很有意思<br>像画一样<br><br></center>

<img src="/2024/06/04/wuxi_travel/02767365218acc958e8136d77decad8.png" alt="02767365218acc958e8136d77decad8" style="zoom:25%;">

<br>

<h2 id="无锡特色小吃"><a href="#无锡特色小吃" class="headerlink" title="无锡特色小吃"></a>无锡特色小吃</h2><br>

<img src="/2024/06/04/wuxi_travel/97dea71c2818e9e05ffde08045531b4.jpg" alt="97dea71c2818e9e05ffde08045531b4" style="zoom:12.7%;">

<br>

<img src="/2024/06/04/wuxi_travel/252625631f0c6b7aa772de90aec5d2c.png" alt="252625631f0c6b7aa772de90aec5d2c" style="zoom: 33%;">

<center><br>美兰饼，有点像肉馅的麻薯，咸口的<br><br></center>

<img src="/2024/06/04/wuxi_travel/1d904be0143789bacf088db2455ed31.png" alt="1d904be0143789bacf088db2455ed31" style="zoom: 33%;">

<center><br>桂花糖芋头<br><br></center>

<img src="/2024/06/04/wuxi_travel/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240529122839.jpg" alt="微信图片_20240529122839" style="zoom:7%;">

<center><br>油馄饨<br><br></center>

<img src="/2024/06/04/wuxi_travel/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240529122852.jpg" alt="微信图片_20240529122852" style="zoom:16%;">

<center><br>太湖白鱼<br><br></center>

<img src="/2024/06/04/wuxi_travel/c46d2fb753b96b77cca1985ccf7d70d.png" alt="c46d2fb753b96b77cca1985ccf7d70d" style="zoom:33%;">

<center><br>茶颜悦色2.0<br><br></center>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>旅途</tag>
      </tags>
  </entry>
  <entry>
    <title>水门车险的开发记录（区块链）</title>
    <url>/2024/05/06/minatosys_Blockchain_note/</url>
    <content><![CDATA[<p>​	该文档为水门车险的区块链部分，记录了水门车险在区块链这个模块的开发以及部署过程，语言方面使用了Solidity。语法接近js，上手较为容易。合约的部署则介绍了两种方式，Remix以及Hardhat。</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-03-09 14:12</li>
<li>updateTime: 2024-05-06 16:10</li>
</ul>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个文档记录了<strong>水门车险区块链模块</strong>的开发过程。</p>
<p>内容是基于区块链技术开发的一个车险系统，关于区块链的的概念详见其他markdown；</p>
<p>这个系统并没有往实际使用的方向开发，纯粹是应付毕业设计所准备的，因此可能存在很多不合理的设计或者是奇奇怪怪的bugs，总之，一切努力只为能够通过毕设考核。</p>
<p>整个项目暂定分成三个模块，前端、后端、区块链。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:.</span><br><span class="line">├─gin-minato</span><br><span class="line">├─hardhat-minato</span><br><span class="line">└─vue-minato</span><br></pre></td></tr></table></figure>

<ul>
<li>架构设计</li>
</ul>
<img src="/2024/05/06/minatosys_Blockchain_note/image-20240423222551537.png" alt="image-20240423222551537" style="zoom:67%;">

<p>go ~ go ~ go！</p>
<h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><p>Remix网址：<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p>
<p>测试币水龙头：<a href="https://faucets.chain.link/">https://faucets.chain.link</a></p>
<p>Sepolia区块链浏览器：<a href="https://sepolia.etherscan.io/">https://sepolia.etherscan.io/</a></p>
<p>Chainlink官方文档：<a href="https://docs.chain.link/">https://docs.chain.link</a></p>
<p>以太坊货币换算：<a href="https://eth-converter.com/">https://eth-converter.com/</a></p>
<p>Solidity 使用文档：<a href="https://solidity-by-example.org/">https://solidity-by-example.org</a></p>
<h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><h3 id="合约"><a href="#合约" class="headerlink" title="合约"></a>合约</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol&quot;;</span><br><span class="line">import &quot;./PriceConverter.sol&quot;;</span><br><span class="line"></span><br><span class="line">// EVM, Ethereum Virtual Machine</span><br><span class="line">error NotOwner();</span><br><span class="line"></span><br><span class="line">contract Minatosys &#123;</span><br><span class="line">    using PriceConverter for uint256;</span><br><span class="line">    uint256 constant minimumUsd = 0;</span><br><span class="line">    address public immutable i_owner;</span><br><span class="line">    AggregatorV3Interface public priceFeed;</span><br><span class="line"></span><br><span class="line">    constructor(address priceFeedAddress) &#123;//构造，合约部署时需要向它传入以下参数</span><br><span class="line">        i_owner = msg.sender;</span><br><span class="line">        priceFeed = AggregatorV3Interface(priceFeedAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function fund() public payable &#123;//资金注入方法</span><br><span class="line">        require(</span><br><span class="line">            msg.value.getConversionRate(priceFeed) &gt; 0,//判断金额是否大于0，否则会回滚交易</span><br><span class="line">            &quot;Didn&#x27;t send enough&quot;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public onlyOwner &#123;</span><br><span class="line">        (bool callSuccess, ) = payable(msg.sender).call&#123;//提取资金，非合约部署账户不能调用这个方法</span><br><span class="line">            value: address(this).balance</span><br><span class="line">        &#125;(&quot;&quot;);</span><br><span class="line">        require(callSuccess, &quot;call failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 管理员转账</span><br><span class="line">    function withdrawToAddress(</span><br><span class="line">        address payable _to,</span><br><span class="line">        uint256 _amount</span><br><span class="line">    ) public onlyOwner &#123;//提取资金，非合约部署账户不能调用这个方法</span><br><span class="line">        // 检查目标地址是否有效</span><br><span class="line">        require(_to != address(0), &quot;Invalid address&quot;);</span><br><span class="line">        // 检查合约余额是否足够支付转账金额</span><br><span class="line">        require(address(this).balance &gt;= _amount, &quot;Insufficient balance&quot;);</span><br><span class="line">        // 使用 call 方法向目标地址发送以太币</span><br><span class="line">        // 设置发送者为合约的所有者</span><br><span class="line">        (bool callSuccess, ) = _to.call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">        // 检查调用是否成功</span><br><span class="line">        require(callSuccess, &quot;Call failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 莫名其妙地收到钱就执行下面两个方法</span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        fund();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        fund();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 自定义修饰符，带上这个标签的方法将只对合约发布者开放使用权限</span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == address(0) || msg.sender == i_owner,</span><br><span class="line">            &quot;Sender is not owner&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line">import &quot;@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol&quot;;</span><br><span class="line"></span><br><span class="line">library PriceConverter &#123;</span><br><span class="line">    function getPrice(</span><br><span class="line">        AggregatorV3Interface priceFeed</span><br><span class="line">    ) internal view returns (uint256) &#123;</span><br><span class="line">        //得到汇率(USD/ETH)</span><br><span class="line">        //ABIw</span><br><span class="line">        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306</span><br><span class="line">        // AggregatorV3Interface priceFeed = AggregatorV3Interface(</span><br><span class="line">        //     0x694AA1769357215DE4FAC081bf1f309aDC325306</span><br><span class="line">        // );</span><br><span class="line">        (, int256 answer, , , ) = priceFeed.latestRoundData();</span><br><span class="line"></span><br><span class="line">        return uint256(answer * 1e10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getVersion() internal view returns (uint256) &#123;</span><br><span class="line">        //获取了链外数据源的版本信息，并将其作为uint256类型返回</span><br><span class="line">        AggregatorV3Interface priceFeed = AggregatorV3Interface(</span><br><span class="line">            0x694AA1769357215DE4FAC081bf1f309aDC325306</span><br><span class="line">        );</span><br><span class="line">        return priceFeed.version();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getConversionRate(</span><br><span class="line">        uint256 ethAmount,</span><br><span class="line">        AggregatorV3Interface priceFeed</span><br><span class="line">    ) internal view returns (uint256) &#123;</span><br><span class="line">        uint256 ethPrice = getPrice(priceFeed);</span><br><span class="line">        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;</span><br><span class="line">        return ethAmountInUsd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体写法以及solidity的语法可以参考《Patrick Collins-区块链学习笔记》</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="Remix"><a href="#Remix" class="headerlink" title="Remix"></a>Remix</h4><p>有两种部署方法，这边强力推荐使用<strong>Remix</strong>，真的很方便，合约输进去可以直接部署，非常适合需求不高的合约部署，唯一缺点就是网速似乎不太理想，经常链接钱包和测试网连接不上。</p>
<p>如果使用Remix的话，基本上到此就结束了😂输入喂价地址之后，直接deploy就行，喂价地址可以从Chainlink那里获取，此处可以试着使用Sepolia的喂价地址：<code>0x694AA1769357215DE4FAC081bf1f309aDC325306(这个不保真，可能会更新换代，还是建议自己去官网获取)</code></p>
<p><em>值得一提的是，Patrick Collins是他们的开发者大使，被请来录制的课程并且被Chainlink_cn翻译成中文放在B站上供大家学习，内容还是很新鲜且经常更新的，值得初学者去观看。另外，他们在Github上还有一个社区，可以供大家提问，虽然我问了但是没有得到解答，不过问题不大，有总比没有强😭</em></p>
<img src="/2024/05/06/minatosys_Blockchain_note/image-20240423231604679.png" alt="image-20240423231604679" style="zoom:80%;">

<p>本项目使用了第二种方式，如下：</p>
<h4 id="Hardhat"><a href="#Hardhat" class="headerlink" title="Hardhat"></a>Hardhat</h4><p>Hardhat是一个轻量级的合约部署框架，优点是可以安装自己需要的插件，这对于高级开发来说是非常使用的，包括prettier这样的代码格式化插件等等；并且可以自行编写脚本，包括部署脚本以及测试脚本等等等等</p>
<p>但是Hardhat貌似？更新起来，文档有时会跟不上，这会导致对于新手来说，可能看文档并不会有很好的体验，【差点把我折磨疯了】，</p>
<p>即便是2年内录制的课程，实际操作时也会有所不同。因此，如果你是一名想用区块链来完成毕业设计之类的项目，强力推荐Remix。</p>
<p>Hardhat部署所需的插件以及搭建过程这里不做赘述，详情请见《Patrick Collins-区块链 笔记》，这里只简单说明部署过程以及合约内容</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">  |-- artifacts			#编译结果保存，包括ABI等等</span><br><span class="line">  |-- cache				#Hardhat框架生成的缓存文件</span><br><span class="line">  |-- contracts			#合约以及喂价合约等等</span><br><span class="line">  |-- deploy			#部署合约的脚本</span><br><span class="line">  |-- deployments		#已经部署的合约的相关数据，比如部署时产生的地址、交易哈希等信息</span><br><span class="line">  |-- ignition			#Hardhat框架的一些配置文件或模板文件</span><br><span class="line">  |-- node_modules		#依赖</span><br><span class="line">  |-- test				#测试文件夹，包含一些测试脚本</span><br><span class="line">  |-- utils				#辅助开发的工具函数或辅助脚本文件，比如verify.js等等</span><br><span class="line">  |-- package.json		#依赖管理</span><br><span class="line">  |-- hardhat.config.js	#框架配置文件</span><br><span class="line">  |-- helper-hardhat-config.js	#辅助框架配置文件</span><br><span class="line">  |-- yarn.lock</span><br><span class="line">  \-- README.md</span><br><span class="line"></span><br><span class="line">9 directories, 5 files</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>框架配置信息<code>hardhat.config.js</code>，包括编译器版本，账户私钥等等信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-toolbox&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;hardhat-deploy&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;hardhat-gas-reporter&quot;</span>);</span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> import(&#x27;hardhat/config&#x27;).HardhatUserConfig */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SEPOLIA_RPC_URL</span> = process.<span class="property">env</span>.<span class="property">SEPOLIA_RPC_URL</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PRIVATE_KEY</span> = process.<span class="property">env</span>.<span class="property">PRIVATE_KEY</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ETHERSCAN_API_KEY</span> = process.<span class="property">env</span>.<span class="property">ETHERSCAN_API_KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: &#123;</span><br><span class="line">    <span class="attr">compilers</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&quot;0.8.7&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&quot;0.6.6&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">defaultNetwork</span>: <span class="string">&quot;hardhat&quot;</span>,</span><br><span class="line">  <span class="attr">networks</span>: &#123;</span><br><span class="line">    <span class="attr">hardhat</span>: &#123;</span><br><span class="line">      <span class="attr">chainId</span>: <span class="number">31337</span>,</span><br><span class="line">      <span class="comment">// gasPrice: 130000000000,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sepolia</span>: &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="variable constant_">SEPOLIA_RPC_URL</span>,</span><br><span class="line">      <span class="attr">accounts</span>: [<span class="variable constant_">PRIVATE_KEY</span>],</span><br><span class="line">      <span class="attr">chainId</span>: <span class="number">11155111</span>,</span><br><span class="line">      <span class="attr">blockConfirmations</span>: <span class="number">6</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">gasReporter</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">currency</span>: <span class="string">&quot;USD&quot;</span>,</span><br><span class="line">    <span class="attr">outputFile</span>: <span class="string">&quot;gas-report.txt&quot;</span>,</span><br><span class="line">    <span class="attr">noColors</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// coinmarketcap: COINMARKETCAP_API_KEY,</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">etherscan</span>: &#123;</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="variable constant_">ETHERSCAN_API_KEY</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">namedAccounts</span>: &#123;</span><br><span class="line">    <span class="attr">deployer</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span>, <span class="comment">// here this will by default take the first account as deployer</span></span><br><span class="line">      <span class="number">1</span>: <span class="number">0</span>, <span class="comment">// similarly on mainnet it will take the first account as deployer. Note though that depending on how hardhat network are configured, the account 0 on one network can be different than on another</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mocha</span>: &#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">500000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="本地网"><a href="#本地网" class="headerlink" title="本地网"></a>本地网</h5><p>也就是<code>Hardhat</code>自带的本地网络，优点是，测试币很多，可以随意霍霍，交易速度非常快而且不容易出岔子</p>
<p>但是，本地网络是无法获取喂价合约的，换句话说Chainlink预言机在这方面并不能给予你帮助，因此，在部署之前，我们需要先部署一个虚拟的喂价合约，这里并不完全需要自己去写，在<code>chainlink</code>的<code>github</code>中仔细翻找可以找到<code>node_modules\@chainlink\contracts\src\v0.6\tests\MockV3Aggregator.sol</code>，因此，我们可以在喂价合约中直接引入，效果等同于复制粘贴；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//SPDX-License-Identifier:MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;@chainlink/contracts/src/v0.6/tests/MockV3Aggregator.sol&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>之后我们就可以开始着手准备部署合约的脚本了；</p>
<p>首先，我们需要处理喂价合约以及合约的chainID，也就是用于判断合约被部署在了哪条链上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//helper-hardhat-config.js</span></span><br><span class="line"><span class="keyword">const</span> networkConfig = &#123;</span><br><span class="line">    <span class="number">31337</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Price Feed Address, values can be obtained at https://docs.chain.link/data-feeds/price-feeds/addresses</span></span><br><span class="line">    <span class="number">11155111</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;sepolia&quot;</span>,</span><br><span class="line">        <span class="attr">ethUsdPriceFeed</span>: <span class="string">&quot;0x694AA1769357215DE4FAC081bf1f309aDC325306&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> developmentChains = [<span class="string">&quot;hardhat&quot;</span>, <span class="string">&quot;localhost&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    networkConfig,</span><br><span class="line">    developmentChains,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先将我们自己编写的喂价合约发布到<code>Hardhat</code>链上,这样我们部署的合约就可以通过本地链上的喂价合约得到USD&#x2F;ETH的汇率<br>这里脚本做了一个判断，如果<code>chainID</code>为<code>31337</code>，也就是处于开发链上时，会对合约进行部署</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//00-deploy-mocks.js</span></span><br><span class="line"><span class="comment">//这段是部署本地预言机</span></span><br><span class="line"><span class="keyword">const</span> &#123; network &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DECIMALS</span> = <span class="string">&quot;8&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INITIAL_PRICE</span> = <span class="string">&quot;200000000000&quot;</span>; <span class="comment">// 2000</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (&#123; getNamedAccounts, deployments &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; deploy, log &#125; = deployments;</span><br><span class="line">  <span class="keyword">const</span> &#123; deployer &#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>();</span><br><span class="line">  <span class="keyword">const</span> chainId = network.<span class="property">config</span>.<span class="property">chainId</span>;</span><br><span class="line">  <span class="title function_">log</span>(network.<span class="property">name</span>);</span><br><span class="line">  <span class="keyword">if</span> (chainId == <span class="number">31337</span>) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;Local network detected!Deploying mocks...&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">deploy</span>(<span class="string">&quot;MockV3Aggregator&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">contract</span>: <span class="string">&quot;MockV3Aggregator&quot;</span>,</span><br><span class="line">      <span class="attr">from</span>: deployer,</span><br><span class="line">      <span class="attr">log</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">args</span>: [<span class="variable constant_">DECIMALS</span>, <span class="variable constant_">INITIAL_PRICE</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;Mocks deployed!&quot;</span>);</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;--------------------------------------------------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这段代码指定了当前部署脚本相关的标签。在这里，使用了两个标签：&quot;all&quot; 和 &quot;mocks&quot;。</span></span><br><span class="line"><span class="comment">// &quot;all&quot; 标签： 这个标签可能用于将部署脚本与整个项目的所有部署任务关联起来。</span></span><br><span class="line"><span class="comment">// 当运行 npx hardhat deploy --tags all 时，将运行所有带有 &quot;all&quot; 标签的部署任务。</span></span><br><span class="line"><span class="comment">// &quot;mocks&quot; 标签： 这个标签可能用于将部署脚本与与模拟合约相关的其他部署任务关联起来。</span></span><br><span class="line"><span class="comment">// 当运行 npx hardhat deploy --tags mocks 时，将运行所有带有 &quot;mocks&quot; 标签的部署任务。</span></span><br><span class="line"><span class="comment">//yarn hardhat deploy --tags mocks</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">tags</span> = [<span class="string">&quot;all&quot;</span>, <span class="string">&quot;mocks&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>接着，我们需要部署<strong>水门车险</strong>的合约，这里是第二个脚本</p>
<p>脚本对预言机的选择上会进行一个判断，如果是在开发链，也就是本地链上，则会使用开发链上部署的喂价合约<code>MockV3Aggregator</code>，反之就会根据chainID，从<code>networkConfig[chainId][&quot;ethUsdPriceFeed&quot;]</code>获取喂价地址；</p>
<p>另外，如果是在非开发链上，并且以太坊API KEY被正确配置时，会触发对合约的验证。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01-deploy-fund-me.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    networkConfig,</span><br><span class="line">    developmentChains,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;../helper-hardhat-config.js&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; network &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; verify &#125; = <span class="built_in">require</span>(<span class="string">&quot;../utils/verify.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//hre代表hardhat运行环境</span></span><br><span class="line"><span class="comment">// module.exports = async (hre) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const &#123;getNameAccounts,deployments&#125; = hre</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//node.js的语法糖，写法等同于上方的</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (&#123; getNamedAccounts, deployments &#125;) =&gt; &#123;</span><br><span class="line">    <span class="comment">//将deploy和log从deployments这个对象中提取出来，等同于</span></span><br><span class="line">    <span class="comment">//const deploy = deployments.deploy;</span></span><br><span class="line">    <span class="comment">//const log = deployments.log</span></span><br><span class="line">    <span class="keyword">const</span> &#123; deploy, log &#125; = deployments</span><br><span class="line">    <span class="comment">//getNameAccounts() 返回一个包含 deployer 属性的对象，等同于</span></span><br><span class="line">    <span class="comment">//const getNameAccountsResult = await getNameAccounts();</span></span><br><span class="line">    <span class="comment">//const deployer = getNameAccountsResult.deployer;</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;Deploy Minatosys...&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123; deployer &#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>()</span><br><span class="line">    <span class="keyword">const</span> chainId = network.<span class="property">config</span>.<span class="property">chainId</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------确认预言机地址-----------------</span></span><br><span class="line">    <span class="keyword">if</span> (developmentChains.<span class="title function_">includes</span>(network.<span class="property">name</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> ethUsdAggregator = <span class="keyword">await</span> deployments.<span class="title function_">get</span>(<span class="string">&quot;MockV3Aggregator&quot;</span>)</span><br><span class="line">        ethUsdPriceFeedAddress = ethUsdAggregator.<span class="property">address</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ethUsdPriceFeedAddress的格式：0x694AA1769357215DE4FAC081bf1f309aDC325306</span></span><br><span class="line">        ethUsdPriceFeedAddress = networkConfig[chainId][<span class="string">&quot;ethUsdPriceFeed&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// log(ethUsdPriceFeedAddress);</span></span><br><span class="line">    <span class="comment">//-----------------deploy-----------------------</span></span><br><span class="line">    <span class="keyword">const</span> args = [ethUsdPriceFeedAddress]</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Minatosys</span> = <span class="keyword">await</span> <span class="title function_">deploy</span>(<span class="string">&quot;Minatosys&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">from</span>: deployer,</span><br><span class="line">        <span class="attr">args</span>: args, <span class="comment">//喂价地址</span></span><br><span class="line">        <span class="attr">log</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">waitConfirmation</span>: network.<span class="property">config</span>.<span class="property">blockConfirmations</span> || <span class="number">1</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//-------------------verify-----------------------</span></span><br><span class="line">    <span class="comment">//当合约部署网络与指定的不符时会进行检查</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        !developmentChains.<span class="title function_">includes</span>(network.<span class="property">name</span>) &amp;&amp;</span><br><span class="line">        process.<span class="property">env</span>.<span class="property">ETHERSCAN_API_KEY</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">//verify</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">verify</span>(<span class="title class_">Minatosys</span>.<span class="property">address</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;--------------------------------------------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">tags</span> = [<span class="string">&quot;all&quot;</span>, <span class="string">&quot;minatosys&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>命令行进行本地链部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\study_test\Minato_Sys\hardhat-Minato&gt; yarn hardhat deploy --network hardhat</span><br><span class="line">yarn run v1.22.21</span><br><span class="line">warning package.json: No license field</span><br><span class="line">$ D:\study_test\Minato_Sys\hardhat-Minato\node_modules\.bin\hardhat deploy --network hardhat</span><br><span class="line">Compiled 1 Solidity file successfully (evm target: london).</span><br><span class="line">hardhat</span><br><span class="line">Local network detected!Deploying mocks...</span><br><span class="line">deploying &quot;MockV3Aggregator&quot; (tx: 0x3d732abdeda8235691578f5eae48ec57c18e6860c18196ab7b211ca8f74dce2b)...: deployed at 0x5FbDB2315678afecb367f032d93F642f64180aa3 with 569759 gas</span><br><span class="line">Mocks deployed!</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">Deploy Minatosys...</span><br><span class="line">deploying &quot;Minatosys&quot; (tx: 0x1756b51c675657ec993c19959606c37e39b7ef407cfa1e84177b93f0e4449881)...: deployed at 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 with 839016 gas</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">Done in 8.47s.</span><br></pre></td></tr></table></figure>

<h5 id="测试网"><a href="#测试网" class="headerlink" title="测试网"></a>测试网</h5><p>测试网的部署不需要手动配置Mock合约，我们可以直接通过喂价地址获得合约</p>
<p>但是完成在测试网的部署之后，我们需要编写一个验证脚本，用以检查被部署的合约与我们想部署的合约是否一致，避免发生被篡改的事件。</p>
<p>这里<code>Hardhat</code>框架有为我们提供验证方法，直接调用即可</p>
<p><code>verify:verify</code> 是 Hardhat 框架中的一个任务（task），它用于执行智能合约的验证过程。具体来说，这个任务会将智能合约的源代码和部署信息提交给以太坊的验证服务（如 Etherscan 或其他类似的服务）。验证服务将检查合约的源代码是否与已部署的合约匹配，以及是否包含了正确的构造函数参数。</p>
<p><em>&#x2F;&#x2F;以上说法来自chatgpt，但是验证部分我记得有些不太清楚了，具体<code>Hardhat</code>是怎么完成的，我确认好之后会进行修改；</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//verify.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; run &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">verify</span> = <span class="keyword">async</span> (<span class="params">contractAddress, args</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Verifying Contract...&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">run</span>(<span class="string">&quot;verify:verify&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">address</span>: contractAddress,</span><br><span class="line">      <span class="attr">constructorArguments</span>: args,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">message</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;already verified&quot;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Already Verified!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; verify &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>命令行进行测试网部署（以Sepolia为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\study_test\Minato_Sys\hardhat-Minato&gt; yarn hardhat deploy --network sepolia</span><br><span class="line">yarn run v1.22.21</span><br><span class="line">warning package.json: No license field</span><br><span class="line">$ D:\study_test\Minato_Sys\hardhat-Minato\node_modules\.bin\hardhat deploy --network sepolia</span><br><span class="line">Compiled 1 Solidity file successfully (evm target: london).</span><br><span class="line">sepolia</span><br><span class="line">Deploy Minatosys...</span><br><span class="line">deploying &quot;Minatosys&quot; (tx: 0x5eeadc93ad11de1fc2cec56c48aa77eb2d3775cfa2a8769cc38cd75c783f6246)...: deployed at 0x03cDbE6020084eb013b02B8d8e0A90BE018fb39E with 806890 gas</span><br><span class="line">Verifying Contract...</span><br><span class="line">UnexpectedError: An unexpected error occurred during the verification process.</span><br><span class="line">Please report this issue to the Hardhat team.</span><br><span class="line">Error Details: Connect Timeout Error</span><br><span class="line">    at Etherscan.isVerified (D:\study_test\Minato_Sys\hardhat-Minato\node_modules\@nomicfoundation\hardhat-verify\src\internal\etherscan.ts:126:13)</span><br><span class="line">    at processTicksAndRejections (node:internal/process/task_queues:95:5)</span><br><span class="line">    at SimpleTaskDefinition.action (D:\study_test\Minato_Sys\hardhat-Minato\node_modules\@nomicfoundation\hardhat-verify\src\internal\tasks\etherscan.ts:101:24)</span><br><span class="line">    at Environment._runTaskDefinition (D:\study_test\Minato_Sys\hardhat-Minato\node_modules\hardhat\src\internal\core\runtime-environment.ts:359:14)</span><br><span class="line">    at Environment.run (D:\study_test\Minato_Sys\hardhat-Minato\node_modules\hardhat\src\internal\core\runtime-environment.ts:192:14)</span><br><span class="line">    at SimpleTaskDefinition.action (D:\study_test\Minato_Sys\hardhat-Minato\node_modules\@nomicfoundation\hardhat-verify\src\index.ts:284:9)</span><br><span class="line">    at Environment._runTaskDefinition (D:\study_test\Minato_Sys\hardhat-Minato\node_modules\hardhat\src\internal\core\runtime-environment.ts:359:14)</span><br><span class="line">    at Environment.run (D:\study_test\Minato_Sys\hardhat-Minato\node_modules\hardhat\src\internal\core\runtime-environment.ts:192:14)</span><br><span class="line">    at verify (D:\study_test\Minato_Sys\hardhat-Minato\utils\verify.js:6:5)</span><br><span class="line">    at Object.module.exports [as func] (D:\study_test\Minato_Sys\hardhat-Minato\deploy\01-deploy.js:61:7)</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">Done in 85.66s.</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此，水门车险的合约部分就被部署完成了，个人还是很推荐使用Remix的部署方式，当然，如果你有意向深入学习使用智能合约，那Hardhat这样的框架也是非常有学习的价值</p>
]]></content>
      <categories>
        <category>Web3</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>以太坊</tag>
        <tag>智能合约</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>水门车险的开发记录（前端）</title>
    <url>/2024/05/06/minatosys_FrontEnd_note/</url>
    <content><![CDATA[<p>​	该文档为水门车险的前端部分，记录了水门车险在前端这个模块的开发过程，组件库方面选择了 ElementPLUS，这个组件库在官网有着非常详细的文档，非常适合前端不熟悉的人用其制作精美的页面；</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-04-25 14:00</li>
<li>updateTime: 2024-05-06 16:08</li>
</ul>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个文档记录了<strong>水门车险前端模块</strong>开发过程中的部分功能实现方法。</p>
<p>内容是基于区块链技术开发的一个车险系统，关于区块链的的概念详见其他 Markdown；</p>
<p>这个系统并没有往实际使用的方向开发，纯粹是应付毕业设计所准备的，因此可能存在很多不合理的设计或者是奇奇怪怪的 bug，总之，一切努力只为能够通过毕设考核。</p>
<p>整个项目暂定分成三个模块，前端、后端、区块链。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:.</span><br><span class="line">├─gin-minato</span><br><span class="line">├─hardhat-minato</span><br><span class="line">└─vue-minato</span><br></pre></td></tr></table></figure>

<ul>
<li>架构设计</li>
</ul>
<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240423222551537.png" alt="image-20240423222551537" style="zoom:67%;">

<p>go ~ go ~ go！</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>需要安装<code>node.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\study_test\Minato_Sys\vue-Minato&gt; node --version</span><br><span class="line">v18.18.0</span><br></pre></td></tr></table></figure>

<h4 id="安装和部署"><a href="#安装和部署" class="headerlink" title="安装和部署"></a>安装和部署</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 选择一个你喜欢的包管理器</span><br><span class="line"># 安装element-plus</span><br><span class="line"># NPM</span><br><span class="line">$ npm install element-plus --save</span><br><span class="line"># Yarn</span><br><span class="line">$ yarn add element-plus</span><br><span class="line"># pnpm</span><br><span class="line">$ pnpm install element-plus</span><br><span class="line"></span><br><span class="line"># “自动导入”插件</span><br><span class="line">$ npm install -D unplugin-vue-components unplugin-auto-import</span><br><span class="line"></span><br><span class="line"># 安装setup语法糖插件</span><br><span class="line">$ npm i vite-plugin-vue-setup-extend -D</span><br><span class="line"></span><br><span class="line"># 安装icon图标库</span><br><span class="line">$ npm install @element-plus/icons-vue</span><br><span class="line"></span><br><span class="line"># 安装Metamask插件</span><br><span class="line">$ npm i @metamask/detect-provider</span><br><span class="line"></span><br><span class="line"># 安装axios</span><br><span class="line">$ npm i axios</span><br><span class="line"></span><br><span class="line"># 安装pinia</span><br><span class="line">$ npm i pinia</span><br></pre></td></tr></table></figure>

<p>使用 Element-plus 的方法请参考官方文档，写得非常详细，我觉得完全没必要多此一举再写一遍：<a href="https://element-plus.org/zh-CN">https://element-plus.org/zh-CN</a></p>
<p>同时，您还需要准备一个<code>Metamask</code>钱包，用以对接接受支付和接受赔偿金的环节</p>
<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240429092312447.png" alt="image-20240429092312447" style="zoom: 67%;">

<h2 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h2><p><code>src</code>下的目录大概像这样，其中经常复用的如侧边栏、顶栏、页脚被写进了<code>components</code>文件夹</p>
<p><em>&#x2F;&#x2F;很多页面的 UI 都是”<strong>借鉴</strong>“了各大网页的，包括了<code>Mozilla</code>、中国平安等等等等</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- App.vue</span><br><span class="line">|-- components</span><br><span class="line">|   |-- ClaimSide.vue</span><br><span class="line">|   |-- InsuranceSide.vue</span><br><span class="line">|   |-- PageBotton.vue</span><br><span class="line">|   `-- PageTop.vue</span><br><span class="line">|-- interface</span><br><span class="line">|   |-- claimForm.ts</span><br><span class="line">|   `-- loginResult.ts</span><br><span class="line">|-- main.ts</span><br><span class="line">|-- pages</span><br><span class="line">|   |-- HomePage.vue</span><br><span class="line">|   |-- Login.vue</span><br><span class="line">|   |-- Register.vue</span><br><span class="line">|   |-- admin_Claim.vue</span><br><span class="line">|   |-- admin_Claim_Detail.vue</span><br><span class="line">|   |-- user_Claim.vue</span><br><span class="line">|   |-- user_ClaimQuery.vue</span><br><span class="line">|   |-- user_InsuranceBought.vue</span><br><span class="line">|   `-- user_InsuranceQuery.vue</span><br><span class="line">|-- router</span><br><span class="line">|   `-- index.ts</span><br><span class="line">|-- scripts</span><br><span class="line">|   |-- Codecheck.ts</span><br><span class="line">|   |-- Minatosys.ts</span><br><span class="line">|   |-- chineseCities.ts</span><br><span class="line">|   |-- claim_helper.ts</span><br><span class="line">|   |-- constants.ts</span><br><span class="line">|   `-- ethers-5.7.esm.min.js</span><br><span class="line">|-- store</span><br><span class="line">|   `-- loginStore.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240429095339280.png" alt="image-20240429095339280" style="zoom:80%;">

<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240429100428388.png" alt="image-20240429100428388" style="zoom:80%;">

<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240429100543929.png" alt="image-20240429100543929" style="zoom:80%;">

<p><img src="/2024/05/06/minatosys_FrontEnd_note/image-20240429100702637.png" alt="image-20240429100702637"></p>
<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240429100754037.png" alt="image-20240429100754037" style="zoom:80%;">

<h2 id="理赔申报"><a href="#理赔申报" class="headerlink" title="理赔申报"></a>理赔申报</h2><p>用户需要填写表单并且上传文件</p>
<p>上传文件使用的是<code>ElementPlus</code>中的<code>el-upload</code>，这里上传的文件会直接以 POST 的方法传到 <a href="http://localhost:8080/update%EF%BC%8C%E5%90%8E%E7%AB%AF%E9%9C%80%E8%A6%81%E5%AF%B9%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%8E%A5%E6%94%B6">http://localhost:8080/update，后端需要对这个文件进行接收</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item</span><br><span class="line">  label=&quot;上传事故责任确认书、保险单复印件、驾驶证复印件以及维修费清单&quot;</span><br><span class="line">  required</span><br><span class="line">  prop=&quot;claimfile&quot;&gt;</span><br><span class="line">	&lt;el-upload</span><br><span class="line">		ref=&quot;uploadRef&quot;</span><br><span class="line">        class=&quot;upload-demo&quot;</span><br><span class="line">        drag action=&quot;http://localhost:8080/update&quot;</span><br><span class="line">      	multiple style=&quot;width: 50vw&quot;</span><br><span class="line">       	:auto-upload=&quot;false&quot;</span><br><span class="line">       	list-type=&quot;picture&quot;</span><br><span class="line">       :before-upload=&quot;beforeClaimfileUpload&quot;</span><br><span class="line">        @change=&quot;handleChange&quot;&gt;</span><br><span class="line">        	&lt;el-icon class=&quot;el-icon--upload&quot;&gt;&lt;upload-filled /&gt;&lt;/el-icon&gt;</span><br><span class="line">            	&lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                	将文件拖至此处或 &lt;em&gt;点击上传&lt;/em&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>

<p>后端接收文件，这里以<code>Gin</code>为例</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f FileController)</span></span> Updatefile(ctx *gin.Context) &#123;</span><br><span class="line">	file, err := ctx.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Sprintf(<span class="string">&quot;get form err: %s&quot;</span>, err.Error())</span><br><span class="line">		config.ReturnFalse(ctx, <span class="number">3001</span>, <span class="string">&quot;接收文件失败&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 保存文件到本地</span></span><br><span class="line">	err = ctx.SaveUploadedFile(file, <span class="string">&quot;uploads/&quot;</span>+file.Filename)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Sprintf(<span class="string">&quot;upload file err: %s&quot;</span>, err.Error())</span><br><span class="line">		config.ReturnFalse(ctx, <span class="number">3002</span>, <span class="string">&quot;保存文件失败&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	config.ReturnSuccess(ctx, <span class="number">200</span>, <span class="string">&quot;成功接受并保存文件！&quot;</span>, file, <span class="number">1</span>) <span class="comment">// 返回文件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>申报需要对用户提交的内容进行验证</p>
<p>这里我们尽量在前端将这些都完成，避免无用表单对后端造成压力</p>
<p>首先在 el-form 中添加规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form ref=&quot;claimFormRef&quot; :rules=&quot;rules&quot;&gt;&lt;/el-form&gt;</span><br></pre></td></tr></table></figure>

<p>接着引入数据类型，也可以在当前页面直接定义，不过因为这个和表单提交部分复用了，所以我单独写了一个接口，方便之后使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入ClaimForm的钩子</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">type</span> <span class="title class_">ClaimForm</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/interface/claimForm&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>定义响应式，初始化和接收数据</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化各项数据，其中insuranceid不论怎么写最终读取都是字符串格式</span></span><br><span class="line"><span class="comment">// 因此不必过多纠结，打包的时候将其转换成number类型即可</span></span><br><span class="line"><span class="keyword">const</span> claimForm = reactive&lt;<span class="title class_">ClaimForm</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">claimid</span>: <span class="title function_">nanoid</span>(),</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">userid</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">callnumber</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">insuranceid</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">carid</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">region</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">date</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">claimfile</span>: [<span class="string">&quot;&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>定义验证规则</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rules = reactive&lt;<span class="title class_">FormRules</span>&lt;<span class="title class_">ClaimForm</span>&gt;&gt;(&#123;</span><br><span class="line">  <span class="attr">username</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入用户名！&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">&quot;请输入真实用户名！&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">userid</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入身份证号！&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">validator</span>: checkID, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//以下验证规则省略，基本同上</span></span><br><span class="line">  <span class="attr">callnumber</span>: [],</span><br><span class="line">  <span class="attr">carid</span>: [],</span><br><span class="line">  <span class="attr">insuranceid</span>: [],</span><br><span class="line">  <span class="attr">region</span>: [],</span><br><span class="line">  <span class="attr">date</span>: [],</span><br><span class="line">  <span class="attr">claimfile</span>: [],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其中，身份证校验需要单独写一份正则表达式加以验证：</p>
<p><em>&#x2F;&#x2F;这部分来自网上，下方有链接</em></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有关身份证校验码</span></span><br><span class="line"><span class="comment">// 原文链接：https://blog.csdn.net/Cavendixe/article/details/129581874</span></span><br><span class="line"><span class="keyword">let</span> checkProv = <span class="keyword">function</span> (<span class="params">val: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> pattern = <span class="regexp">/^[1-9][0-9]/</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">provs</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="number">11</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    <span class="number">12</span>: <span class="string">&quot;天津&quot;</span>,</span><br><span class="line">    <span class="number">13</span>: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">    <span class="number">14</span>: <span class="string">&quot;山西&quot;</span>,</span><br><span class="line">    <span class="number">15</span>: <span class="string">&quot;内蒙古&quot;</span>,</span><br><span class="line">    <span class="number">21</span>: <span class="string">&quot;辽宁&quot;</span>,</span><br><span class="line">    <span class="number">22</span>: <span class="string">&quot;吉林&quot;</span>,</span><br><span class="line">    <span class="number">23</span>: <span class="string">&quot;黑龙江&quot;</span>,</span><br><span class="line">    <span class="number">31</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">    <span class="number">32</span>: <span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">    <span class="number">33</span>: <span class="string">&quot;浙江&quot;</span>,</span><br><span class="line">    <span class="number">34</span>: <span class="string">&quot;安徽&quot;</span>,</span><br><span class="line">    <span class="number">35</span>: <span class="string">&quot;福建&quot;</span>,</span><br><span class="line">    <span class="number">36</span>: <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">    <span class="number">37</span>: <span class="string">&quot;山东&quot;</span>,</span><br><span class="line">    <span class="number">41</span>: <span class="string">&quot;河南&quot;</span>,</span><br><span class="line">    <span class="number">42</span>: <span class="string">&quot;湖北&quot;</span>,</span><br><span class="line">    <span class="number">43</span>: <span class="string">&quot;湖南&quot;</span>,</span><br><span class="line">    <span class="number">44</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">    <span class="number">45</span>: <span class="string">&quot;广西&quot;</span>,</span><br><span class="line">    <span class="number">46</span>: <span class="string">&quot;海南&quot;</span>,</span><br><span class="line">    <span class="number">50</span>: <span class="string">&quot;重庆&quot;</span>,</span><br><span class="line">    <span class="number">51</span>: <span class="string">&quot;四川&quot;</span>,</span><br><span class="line">    <span class="number">52</span>: <span class="string">&quot;贵州&quot;</span>,</span><br><span class="line">    <span class="number">53</span>: <span class="string">&quot;云南&quot;</span>,</span><br><span class="line">    <span class="number">54</span>: <span class="string">&quot;西藏&quot;</span>,</span><br><span class="line">    <span class="number">61</span>: <span class="string">&quot;陕西&quot;</span>,</span><br><span class="line">    <span class="number">62</span>: <span class="string">&quot;甘肃&quot;</span>,</span><br><span class="line">    <span class="number">63</span>: <span class="string">&quot;青海&quot;</span>,</span><br><span class="line">    <span class="number">64</span>: <span class="string">&quot;宁夏&quot;</span>,</span><br><span class="line">    <span class="number">65</span>: <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">    <span class="number">71</span>: <span class="string">&quot;台湾&quot;</span>,</span><br><span class="line">    <span class="number">81</span>: <span class="string">&quot;香港&quot;</span>,</span><br><span class="line">    <span class="number">82</span>: <span class="string">&quot;澳门&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (pattern.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (provs[val]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> checkDate = <span class="keyword">function</span> (<span class="params">val: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> pattern =</span><br><span class="line">    <span class="regexp">/^(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (pattern.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">    <span class="keyword">var</span> year = val.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">var</span> month = val.<span class="title function_">substring</span>(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">var</span> date = val.<span class="title function_">substring</span>(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + date);</span><br><span class="line">    <span class="keyword">if</span> (date2 &amp;&amp; date2.<span class="title function_">getMonth</span>() == <span class="built_in">parseInt</span>(month) - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> checkCode = <span class="keyword">function</span> (<span class="params">val: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> p =</span><br><span class="line">    <span class="regexp">/^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;</span><br><span class="line">  <span class="keyword">var</span> factor = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">var</span> parity = [<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;X&quot;</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">var</span> code = val.<span class="title function_">substring</span>(<span class="number">17</span>);</span><br><span class="line">  <span class="keyword">if</span> (p.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">      sum += val[i] * factor[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parity[sum % <span class="number">11</span>] == code.<span class="title function_">toUpperCase</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(parity[sum % <span class="number">11</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> checkID = <span class="keyword">function</span> (<span class="params">rule: <span class="built_in">any</span>, value: <span class="built_in">any</span>, callback: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">checkCode</span>(value)) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = value.<span class="title function_">substring</span>(<span class="number">6</span>, <span class="number">14</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">checkDate</span>(date)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">checkProv</span>(value.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">2</span>))) &#123;</span><br><span class="line">        <span class="title function_">callback</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请输入合法身份证号&quot;</span>));</span><br><span class="line">    <span class="comment">// console.log(value)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>同时，我们还需要在提交表单前，手动确认表单，也就是在点击提交按钮后执行一次表单验证</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formcheck = <span class="keyword">async</span> (</span><br><span class="line">  <span class="attr">formEl</span>: <span class="title class_">FormInstance</span> | <span class="literal">undefined</span></span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!formEl) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> formEl.<span class="title function_">validate</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;submit!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!&quot;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">combinedClick</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//这里先经过表单验证，通过后会像后端开始发送json报文</span></span><br><span class="line">  <span class="keyword">const</span> isValid = <span class="keyword">await</span> <span class="title function_">formcheck</span>(claimFormRef.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">    <span class="comment">//通过表单验证之后执行下方的方法</span></span><br><span class="line">    <span class="title function_">submitClaimForm</span>();</span><br><span class="line">    <span class="title function_">submitUpload</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>提交表单</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">submitClaimForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//打包表单内容</span></span><br><span class="line">  <span class="keyword">let</span> claimMessage = &#123;</span><br><span class="line">    <span class="attr">claim_id</span>: claimForm.<span class="property">claimid</span>,</span><br><span class="line">    <span class="attr">claim_user</span>: claimForm.<span class="property">userid</span>,</span><br><span class="line">    <span class="attr">claim_insurance</span>: <span class="built_in">parseInt</span>(claimForm.<span class="property">insuranceid</span>),</span><br><span class="line">    <span class="attr">callnumber</span>: claimForm.<span class="property">callnumber</span>,</span><br><span class="line">    <span class="attr">car_id</span>: claimForm.<span class="property">carid</span>,</span><br><span class="line">    <span class="attr">region</span>: claimForm.<span class="property">region</span>,</span><br><span class="line">    <span class="attr">createtime</span>: claimForm.<span class="property">date</span>,</span><br><span class="line">    <span class="comment">// claim_file: claimForm.claimfile,</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// console.log(&quot;提交表单内容为&quot;, claimMessage)</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(</span><br><span class="line">      <span class="string">&quot;http://localhost:8080/addclaim&quot;</span>,</span><br><span class="line">      claimMessage</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// console.log(&quot;send successful:&quot;, response.data.data)</span></span><br><span class="line">    <span class="keyword">switch</span> (response.<span class="property">data</span>.<span class="property">code</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;申报成功！&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3秒后跳转至理赔查询</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          router.<span class="title function_">push</span>(<span class="string">&quot;/3-2&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">// 可以添加其他情况的处理</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//其他提交失败的结果</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2001</span>:</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Claim failed:&quot;</span>, error);</span><br><span class="line">    <span class="comment">// 申报失败的处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，el-update 提交的表单不能修改文件名，始终会显示变量只读，我也不知道怎么修改</p>
<p>所以我换了一个思路，在前端拿到文件的时候，将文件名存储在一个数组中，同时记录对应的申报 id，也就是<code>claimid</code>，将这些内容打包发送至后端，由后端接受并对保存的文件进行改名。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上传前会对文件进行检查，只允许jpg格式的文件上传至后端</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">beforeClaimfileUpload</span>: <span class="title class_">UploadProps</span>[<span class="string">&quot;beforeUpload&quot;</span>] = <span class="function">(<span class="params">rawFile</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (rawFile.<span class="property">type</span> !== <span class="string">&quot;image/jpeg&quot;</span>) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;图片仅支持jpeg格式&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawFile.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;图片不能超过5MB!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 监听上传组件的 change 事件，只要一有文件被加进来就会触发</span></span><br><span class="line"><span class="comment">//目的是为了获取上传的文件名并就将其保存在claimForm.claimfile[]这个数组中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">file: <span class="built_in">any</span>, fileList: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取第一个文件的文件名</span></span><br><span class="line">  <span class="keyword">if</span> (fileList.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fileList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">//fileList.name这个属性是只读的，没办法修改，很叫人头疼</span></span><br><span class="line">      claimForm.<span class="property">claimfile</span>[i] = fileList[i].<span class="property">name</span>;</span><br><span class="line">      <span class="comment">// console.log(&quot;上传文件为&quot;, claimForm.claimfile[i])</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    claimForm.<span class="property">claimfile</span>[<span class="number">0</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能是对提交表单的补充，目的是上传文件并将上传的文件名，绑定的申报单号发送至后端</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">submitUpload</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  uploadRef.<span class="property">value</span>!.<span class="title function_">submit</span>();</span><br><span class="line">  <span class="keyword">let</span> fileMessage = &#123;</span><br><span class="line">    <span class="attr">filename</span>: claimForm.<span class="property">claimfile</span>,</span><br><span class="line">    <span class="attr">file_according</span>: claimForm.<span class="property">claimid</span>,</span><br><span class="line">    <span class="attr">createtime</span>: claimForm.<span class="property">date</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// console.log(&quot;修改表单内容为&quot;, fileMessage)</span></span><br><span class="line">  <span class="comment">//延迟提交，这个补充的改名接口必须等到图片以及被保存之后再执行，否则可能会出现图片还没保存，改名指令已经提交过来了，后端会因为找不到文件名而改名失败。</span></span><br><span class="line">  <span class="comment">//这实在不是一个很好地办法，最好的办法还是能够在前端就对文件进行改名</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8080/updatesupport&quot;</span>, fileMessage);</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">  <span class="comment">// console.log(&quot;send successful:&quot;, response.data.data)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>至此，用户申报部分就完成了，整个背后的流程分别是：</p>
<p>用户填写表单&#x2F;存储表单文件名&#x3D;&gt;表单验证&#x3D;&gt;表单提交&#x3D;&gt;表单文件验证&#x3D;&gt;表单文件提交&#x3D;&gt;表单文件名数组+表单号提交</p>
<h2 id="区块链交互"><a href="#区块链交互" class="headerlink" title="区块链交互"></a>区块链交互</h2><p>区块链的交易需要使用用户私钥，如果完全由我们执行的话，但是对于区块链而言，账户私钥基本上算是把钱包权限完全交出去了，不仅我们需要花费资源和精力妥善保管，一不小心可能还有被篡改的风险。</p>
<p>因此，在水门车险中我们使用<code>Metamask</code>来完成这一点，<code>Metamask</code>算是一个比较成熟的钱包，由它来负责保管用户的私钥。就好比我们使用支付宝进行支付一样，我们无需在商店门口一个一个输入自己的银行卡号和密码，只需要支付宝轻轻一扫。</p>
<p>但是在使用前我们需要在前端验证浏览器有没有安装<code>Metamask</code>插件，这里我们使用<code>ethers-5.7.esm.min.js</code>，可以自己下载也可以npm安装。但是具体使用方法要看版本号以及对应的文档。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;@/scripts/ethers-5.7.esm.min.js&quot;</span></span><br><span class="line"><span class="comment">// 用以检查浏览器有没有安装Metamask扩展</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">ethereum</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> (<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">ethereum</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;eth_requestAccounts&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No metamask!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们需要实例化一个合约钱包，用以调用钱包中的方法，在那之前我们需要将合约的信息封装起来</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//constant.ts</span></span><br><span class="line"><span class="comment">//合约地址</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> contractAddress = <span class="string">&quot;0x03cDbE6020084eb013b02B8d8e0A90BE018fb39E&quot;</span></span><br><span class="line"><span class="comment">//合约编译生成的abi</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> abi = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">inputs</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">internalType</span>: <span class="string">&quot;address&quot;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;priceFeedAddress&quot;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;address&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">stateMutability</span>: <span class="string">&quot;nonpayable&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;constructor&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>接着实例化</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;@/scripts/ethers-5.7.esm.min.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; abi, contractAddress &#125; <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span></span><br><span class="line"><span class="comment">// 假设 1 人民币 = 39,583,333,333,333 wei</span></span><br><span class="line"><span class="comment">// 其实这里偷懒了，和合约那边的喂价合约没对应上，最好是传数字到合约中的方法，之后再通过喂价合约转换成wei</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RMB_TO_WEI_RATE</span> = <span class="title class_">BigInt</span>(<span class="string">&quot;39583333333333&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> provider = <span class="keyword">new</span> ethers.<span class="property">providers</span>.<span class="title class_">Web3Provider</span>((<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">ethereum</span>)</span><br><span class="line"><span class="keyword">const</span> signer = provider.<span class="title function_">getSigner</span>()</span><br><span class="line"><span class="comment">//创建智能合约实例</span></span><br><span class="line"><span class="keyword">const</span> contract = <span class="keyword">new</span> ethers.<span class="title class_">Contract</span>(contractAddress, abi, signer)</span><br></pre></td></tr></table></figure>

<p>接着我们使用这个实例化后的钱包调用合约中的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Minatosys.ts</span></span><br><span class="line"><span class="comment">//管理员转账</span></span><br><span class="line"><span class="keyword">import</span> &#123; updateAddress &#125; <span class="keyword">from</span> <span class="string">&quot;./claim_helper&quot;</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">compensation</span>(<span class="params"></span></span><br><span class="line"><span class="params">    toAddress: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    amountInCNY: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    claimid: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">amountInWei</span>: <span class="title class_">BigInt</span> = <span class="title class_">BigInt</span>(amountInCNY) * <span class="variable constant_">RMB_TO_WEI_RATE</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Funding with&quot;</span>, toAddress)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">ethereum</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里需要严格对应上合约中的方法，注意方法需要的参数类型</span></span><br><span class="line">        <span class="keyword">const</span> tx = <span class="keyword">await</span> contract.<span class="title function_">withdrawToAddress</span>(</span><br><span class="line">            toAddress,</span><br><span class="line">            ethers.<span class="property">BigNumber</span>.<span class="title function_">from</span>(amountInWei),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">await</span> tx.<span class="title function_">wait</span>()</span><br><span class="line">        <span class="title function_">updateAddress</span>(tx.<span class="property">hash</span>, claimid)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Transaction successful&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No metamask!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，关于引入的<code>updateAddress</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//updateAddress.ts</span></span><br><span class="line"><span class="comment">//用以更新数据库中交易的地址</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateAddress</span>(<span class="params">address: <span class="built_in">string</span>, claimid: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> updateaddress = &#123;</span><br><span class="line">        <span class="attr">claim_id</span>: claimid,</span><br><span class="line">        <span class="attr">address</span>: address,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> axios</span><br><span class="line">        .<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8080/updateaddress&quot;</span>, updateaddress)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateCompensation</span>(<span class="params"></span></span><br><span class="line"><span class="params">    compensation: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    claimid: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> updatestatus = &#123;</span><br><span class="line">        <span class="attr">claim_id</span>: claimid,</span><br><span class="line">        <span class="attr">compensation</span>: compensation,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> axios</span><br><span class="line">        .<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8080/updatestatus&quot;</span>, updatestatus)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在封装好方法之后，我们需要调用它</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title class_">ElMessageBox</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;请输入赔偿金额（元）&#x27;</span>, <span class="string">&#x27;确认&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;交易执行&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="attr">inputErrorMessage</span>: <span class="string">&#x27;Invalid Email&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> updatePromise = <span class="title function_">updateCompensation</span>(<span class="built_in">parseFloat</span>(value), tableData.<span class="property">value</span>.<span class="property">claimid</span>);</span><br><span class="line">            <span class="keyword">const</span> compenstationPromise = <span class="title function_">compensation</span>(tableData.<span class="property">value</span>.<span class="property">publicKey</span>, <span class="title class_">BigInt</span>(value), tableData.<span class="property">value</span>.<span class="property">claimid</span>);</span><br><span class="line">            <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">`正在建立交易，请稍后`</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([updatePromise, compenstationPromise]);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                router.<span class="title function_">push</span>(<span class="string">&quot;/3-4&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;交易取消&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就大功告成了，效果如下：</p>
<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240506160655596.png" alt="image-20240506160655596" style="zoom:80%;">

<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240506160609536.png" alt="image-20240506160609536" style="zoom:80%;">

<p>静等片刻得到如下回复(当然你也可以再掏一笔燃气费用于加速交易)</p>
<img src="/2024/05/06/minatosys_FrontEnd_note/image-20240506160424465.png" alt="image-20240506160424465" style="zoom:80%;">
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue3.0</tag>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Patrick Collins-区块链 笔记</title>
    <url>/2024/04/25/Patrick%20Collins_blockchain_note/</url>
    <content><![CDATA[<p>​	有关区块链和WEB3全栈开发的课程笔记，来源是Patrick Collins 讲解的区块链课程，使用了Solidity，Javascript进行了智能合约的编写，部署和交互。这是比较流行的写法，当然合约不止Solidity一种编写方法，在引入库的之后，Javascript、Python、Golang都可以做到。</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-01-09 15:31</li>
<li>updateTime: 2024-04-25 22:11</li>
</ul>
</blockquote>
<h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><p>课程链接：【（32 小时最全课程）区块链，智能合约 &amp; 全栈 Web3 开发】 <a href="https://www.bilibili.com/video/BV1Ca411n7ta">https://www.bilibili.com/video/BV1Ca411n7ta</a></p>
<p>原视频链接（生肉）：<a href="https://www.youtube.com/watch?v=gyMwXuJrbJQ">https://www.youtube.com/watch?v=gyMwXuJrbJQ</a></p>
<p>课程Repo链接：<a href="https://github.com/smartcontractkit/full-blockchain-solidity-course-js">https://github.com/smartcontractkit/full-blockchain-solidity-course-js</a></p>
<p>Remix网址：<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p>
<p>测试币水龙头：<a href="https://faucets.chain.link/">https://faucets.chain.link</a></p>
<p>Sepolia区块链浏览器：<a href="https://sepolia.etherscan.io/">https://sepolia.etherscan.io/</a></p>
<p>Chainlink官方文档：<a href="https://docs.chain.link/">https://docs.chain.link</a></p>
<p>以太坊货币换算：<a href="https://eth-converter.com/">https://eth-converter.com/</a></p>
<p>AggregatorV3Interface接口源码：<a href="https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol">https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol</a></p>
<p>Solidity 使用文档：<a href="https://solidity-by-example.org/">https://solidity-by-example.org</a></p>
<h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>智能合约是约定多个参与方的一些列指令。不同的是，传统合同是写在纸上的，而智能合约是代码写的，并且嵌入到一个去中心化区块链平台，在这个去中心化区块链平台中被执行；</p>
<p>将链上去中心化逻辑和链下去中心化数据和计算相结合，这个东西就叫做混合型智能合约。</p>
<p>混合智能合约会用到<code>Chainlink</code>。这是一个组件化，去中心化的预言机网络；不仅可以为智能合约提供外部数据，还可以提供链下计算。本课程和笔记都将基于这个进行开展。</p>
<blockquote>
<p>from Chatgpt : 预言机网络（Oracle network）是一种基于区块链技术的系统，它的主要目标是将现实世界的数据引入区块链中，从而使智能合约能够访问并使用这些数据。智能合约通常无法直接获取外部数据，因为它们在区块链内部运行，并且无法直接连接到外部世界的数据源。预言机网络解决了这个问题，允许区块链与外部数据进行交互。</p>
</blockquote>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>不容易被机构欺骗，通过智能合约可以亲身进入这个行业，所有记录都是公开，透明且不可篡改的。</p>
<h2 id="第一笔交易"><a href="#第一笔交易" class="headerlink" title="第一笔交易"></a>第一笔交易</h2><p>在chrome浏览器中安装插件METAMASK，注册一个账户并开通两个钱包，分别叫Account 1和 Account 2</p>
<p>因为是学习与测试用的钱包，所以哈希地址就不打码了（反正里面也没钱）</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240109233040953.png" alt="image-20240109233040953" style="zoom:80%;">

<p>连接测试网络 Sepolia：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240109233120241.png" alt="image-20240109233120241" style="zoom:80%;">

<p>前往测试网络的水龙头，获取测试币<a href="https://faucets.chain.link/">https://faucets.chain.link</a></p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240110144901761.png" alt="image-20240110144901761" style="zoom: 67%;">

<p>在METAMASK中也能看到已经获取到了测试币</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240110145343247.png" alt="image-20240110145343247" style="zoom:50%;">

<p>在<a href="https://sepolia.etherscan.io/%E4%B8%AD%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%9F%A5%E8%AF%A2%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BA%A4%E6%98%93">https://sepolia.etherscan.io/中也可以查询到对应的交易</a></p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240112093457519.png" alt="image-20240112093457519">

<p>对于上图，交易手续费价格计算：<br>$$<br>Transaction(交易手续费) &#x3D; Gas,,Price(燃气价格),, * ,, Usage,,by,,Txn(使用了的燃气量)<br>$$<br>有Account 1 向 Account 2 发送 0.05个测试币</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240112094858855.png" alt="image-20240112094858855">

<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240112095159024.png" alt="image-20240112095159024" style="zoom:50%;">

<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240112095206377.png" alt="image-20240112095206377" style="zoom:50%;">

<center><b>OKay，恭喜你已经完整地完成了一笔交易！</b></center>



<h2 id="概念知识快速总结"><a href="#概念知识快速总结" class="headerlink" title="概念知识快速总结"></a>概念知识快速总结</h2><p><em>&#x2F;&#x2F; P.S说到底，这份笔记更多是为了记载实战方面的，因此，关于概念的概括一下就过了</em></p>
<h3 id="权益机制"><a href="#权益机制" class="headerlink" title="权益机制"></a>权益机制</h3><p>比特币和前期的以太坊使用的是工作量证明机制（具体见”北京大学肖臻老师《区块链技术与应用》公开课 笔记.md”），而在以太坊2.0中，改为了权益机制；</p>
<p>不同于工作量的证明，在权益机制中，参与区块创建以及验证的叫验证者，而成为验证者需要抵押一定数量的以太币用来确保不会恶意发布交易区块；之后系统会根据算法选举出是哪一个验证者来负责创建新的区块（算法在未来可能更新换代，作为开发者没什么必要学习），在其他验证者验证这个区块交易的真实性以及有效性之后会给予他奖励，如果出现不正当行为，可能会被踢出验证者甚至失去那部分抵押的比特币；</p>
<p>以太坊 2.0 的权益机制还包括社区治理，即验证者可以参与提案和投票，对网络的升级和改变提出建议，并共同决定网络的发展方向。</p>
<p>关于验证者退出：验证者可以随时退出，但是抵押的以太币不会立刻归还，这是为了防止恶意进出的问题</p>
<h3 id="关于攻击"><a href="#关于攻击" class="headerlink" title="关于攻击"></a>关于攻击</h3><p>区块链攻击主要分为女巫攻击以及51%攻击</p>
<p>在权益证明机制中，由于成为验证者需要支付一定量的以太币，并且存在验证这一环节，导致试图创建假帐号影响区块链这一行为需要付出高额成本，这可以很好地预防女巫攻击。</p>
<p>关于51%攻击，当其掌握足够多的算力，直接创造一条区块链，长度比中心链的一半还要长，那么就可以影响中心链到它之上运行，但是随着区块链不断使用，中心链不断加长，51%攻击所需要的算力也在不断提高，直至近乎不可能做到。</p>
<h2 id="Solidity-Remix"><a href="#Solidity-Remix" class="headerlink" title="Solidity(Remix)"></a>Solidity(Remix)</h2><p>网站地址：<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p>
<p>一个集成开发环境，编写和交互智能合约的地方</p>
<h3 id="第一个智能合约"><a href="#第一个智能合约" class="headerlink" title="第一个智能合约"></a>第一个智能合约</h3><p>新建一个sol文件，输入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//SPDX-License-Identifier: MIT</span><br><span class="line">//因为solidity更新频率极高，我们需要在文件开头告诉代码，solidity的版本</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">//关键字，告诉接下来是定义智能合约的内容</span><br><span class="line">contract SimpleStorage&#123;</span><br><span class="line">    //↓这个初始化默认是0</span><br><span class="line">    uint256 favNum;</span><br><span class="line">    function store(uint256 _favNum) public&#123;</span><br><span class="line">        favNum = _favNum;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想定义其他类型的数据变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool judge = true;</span><br><span class="line">//↓这个初始化默认是0,256代表分配空间，不写的话默认是256</span><br><span class="line">uint256 favNum;</span><br><span class="line">string word = &quot;helloworld&quot;;</span><br><span class="line">int256 num2= 1018;</span><br><span class="line">address myadress = 0xE9f22C0cB28f58a74574d88679B4A3F933e3d51c;</span><br><span class="line">//byte最大为32</span><br><span class="line">bytes32 A = &quot;good&quot;;</span><br></pre></td></tr></table></figure>

<p>在虚拟环境部署合约：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240123155705037.png" alt="image-20240123155705037">

<p>使用合约中的方法，修改区块中的数据，相当于发布一条“交易”</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240123155823210.png" alt="image-20240123155823210" style="zoom:67%;">

<p>观察到交易成功，且产生燃气费</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240123155927054.png" alt="image-20240123155927054" style="zoom:67%;">

<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240123155959166.png" alt="image-20240123155959166" style="zoom:67%;">

<p>在此基础上更进一步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //view,pure</span><br><span class="line">function retrieve() public view returns (uint256)&#123;</span><br><span class="line">    return favNum;</span><br><span class="line">&#125;</span><br><span class="line">function add() public pure returns (uint256)&#123;</span><br><span class="line">    return (1+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>view</code>：<code>solidity</code>得一个关键字，代表了这个函数只会读取合约的状态，因而不会产生燃气费；</p>
<p><code>pure</code>：<code>solidity</code>得一个关键字，代表了这个函数既不会修改合约状态也读取不了合约状态，通常会做一些常用算法或者是一些不需要读取数据的算法，因而也	不会产生燃气费；</p>
<p>图形界面上的效果：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125150543392.png" alt="image-20240125150543392" style="zoom: 67%;">



<p>点击蓝色按钮，不发送交易，我们只是在链下读取数值，因此不产生燃气费，调用这些方法是免费的，但如果在消耗gas的函数中调用它，就会产生执行费用。</p>
<h3 id="结构体和数组"><a href="#结构体和数组" class="headerlink" title="结构体和数组"></a>结构体和数组</h3><p>结构体定义全部是分号，只有使用的时候内部是逗号；</p>
<p>效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct People &#123;</span><br><span class="line">        uint256 favNum;</span><br><span class="line">        string name;</span><br><span class="line">    &#125;</span><br><span class="line">    // People 结构体的实例化</span><br><span class="line">People public person = People(&#123;favNum: 2, name: &quot;Peter&quot;&#125;);</span><br></pre></td></tr></table></figure>

<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125153122214.png" alt="image-20240125153122214" style="zoom:67%;">

<p>声明变量的类型，然后是对象的可见性，最后是变量名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">People[] public people;</span><br><span class="line">function addperson(string memory _name,uint256 _favNum) public&#123;</span><br><span class="line">    People memory newperson = People(&#123;favNum:_favNum,name:_name&#125;);</span><br><span class="line">    people.push(newperson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以对数组长度进行限制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">People[3] public people;</span><br></pre></td></tr></table></figure>

<p>最终效果：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125155456902.png" alt="image-20240125155456902" style="zoom:67%;">



<p>值得一提的是，在solidity中有6种方式可以用于存储数,分别是<code>stack</code>、<code>memory</code>、<code>storage</code>、<code>calldata</code>、<code>code</code>、<code>logs</code></p>
<p>其中，<code>memory</code>表示可以被修改的临时变量，<code>calldata</code>表示不可以被临时修改的临时变量，二者在方法结束过后会自行销毁，案例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function addperson(string memory _name,uint256 _favNum) public&#123;</span><br><span class="line">    _name = &#x27;cat&#x27;; //不会报错</span><br><span class="line">    People memory newperson = People(&#123;favNum:_favNum,name:_name&#125;);</span><br><span class="line">    people.push(newperson);</span><br><span class="line">&#125;</span><br><span class="line">function addperson(string calldata _name,uint256 _favNum) public&#123;</span><br><span class="line">    _name = &#x27;cat&#x27; ;//会报错:TypeError: Type literal_string &quot;cat&quot; is not implicitly convertible to expected type string calldata.--&gt; contracts/SimpeStorage.sol:18:17:</span><br><span class="line">    People memory newperson = People(&#123;favNum:_favNum,name:_name&#125;);</span><br><span class="line">    people.push(newperson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而storage表示可以被修改的永久变量，不写关键字的话默认存储在storage；</p>
<h3 id="Mapping映射"><a href="#Mapping映射" class="headerlink" title="Mapping映射"></a>Mapping映射</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//SPDX-License-Identifier: MIT</span><br><span class="line">//因为solidity更新频率极高，我们需要在文件开头告诉代码，solidity的版本</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">//关键字，告诉接下来是定义智能合约的内容</span><br><span class="line">contract SimpleStorage&#123;</span><br><span class="line">    //↓这个初始化默认是0</span><br><span class="line">    uint256 favNum;</span><br><span class="line">    mapping (string=&gt;uint256) public nameToFavNum;</span><br><span class="line">    // People 结构体的定义</span><br><span class="line">    struct People &#123;</span><br><span class="line">        uint256 favNum;</span><br><span class="line">        string name;</span><br><span class="line">    &#125;</span><br><span class="line">    People[] public people;</span><br><span class="line">    function addperson(string memory _name,uint256 _favNum) public&#123;</span><br><span class="line">        People memory newperson = People(&#123;favNum:_favNum,name:_name&#125;);</span><br><span class="line">        people.push(newperson);</span><br><span class="line">        nameToFavNum[_name]=_favNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>提供了一个字符转uint的索引，效果如下：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125222714288.png" alt="image-20240125222714288" style="zoom: 67%;">



<h3 id="在测试网络上布置智能合约"><a href="#在测试网络上布置智能合约" class="headerlink" title="在测试网络上布置智能合约"></a>在测试网络上布置智能合约</h3><img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125230207782.png" alt="image-20240125230207782" style="zoom: 67%;">

<p>修改环境，选择账户，部署，</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125230239939.png" alt="image-20240125230239939" style="zoom:80%;">

<p>账单：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125230536425.png" alt="image-20240125230536425" style="zoom: 67%;">

<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125230559283.png" alt="image-20240125230559283">

<p>发送交易：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125231013855.png" alt="image-20240125231013855" style="zoom:80%;">

<p>点击蓝色按钮，不会产生交易面板提示</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125231634552.png" alt="image-20240125231634552" style="zoom: 67%;">

<p>查看合约：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125230758121.png" alt="image-20240125230758121" style="zoom:80%;">

<p>进入交易链接，可以看到具体交易内容：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240125231517791.png" alt="image-20240125231517791" style="zoom:80%;">

<p>这是由于区块链的公开透明的特性。</p>
<h3 id="合约交互"><a href="#合约交互" class="headerlink" title="合约交互"></a>合约交互</h3><p>创建新的文件<code>SimpleFactory.sol</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">SimpleFactory.sol</span><br><span class="line">*/</span><br><span class="line">//SPDX-License-Identifier:MIT</span><br><span class="line">pragma solidity ^0.8.7;</span><br><span class="line">//引用其他合约</span><br><span class="line">import &quot;./SimpleDemo.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SimpleFactory&#123;</span><br><span class="line">    SimpleDemo[] public simpleDemoArray;</span><br><span class="line">    function createSimpleStorageContract() public&#123;</span><br><span class="line">        SimpleDemo simpleDemo = new SimpleDemo();</span><br><span class="line">        //存进去的其实是每一个simpleDemo的地址</span><br><span class="line">        simpleDemoArray.push(simpleDemo);</span><br><span class="line">    &#125;</span><br><span class="line">    function sfStore (uint256 _simpleDemoIndex,uint256 _simpleStorageNumber) public &#123;</span><br><span class="line">        //Address</span><br><span class="line">        //ABI 应用二进制接口</span><br><span class="line">        //通过下标查的simpleDemo的地址</span><br><span class="line">        SimpleDemo simpleDemo = simpleDemoArray[_simpleDemoIndex];</span><br><span class="line">        //调用其他合约里的方法</span><br><span class="line">        simpleDemo.FavNumEdit(_simpleStorageNumber);</span><br><span class="line">    &#125;</span><br><span class="line">    function sfGet(uint256 _simpleDemoIndex) public view returns(uint256)&#123;</span><br><span class="line">        return simpleDemoArray[_simpleDemoIndex].retrieve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240127234611622.png" alt="image-20240127234611622" style="zoom:67%;">

<h3 id="继承和重载"><a href="#继承和重载" class="headerlink" title="继承和重载"></a>继承和重载</h3><p>在<code>SimpleDemo.sol</code>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">父类SimpleDemo.sol</span><br><span class="line">*/</span><br><span class="line">contract SimpleDemo&#123;</span><br><span class="line">    //↓这个初始化默认是0</span><br><span class="line">    uint256 favNum;</span><br><span class="line">    function store(uint256 _favNum) public virtual&#123;</span><br><span class="line">        favNum = _favNum;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在子类<code>ExtraDemo.sol</code>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">子类ExtraDemo.sol</span><br><span class="line">*/</span><br><span class="line">import &quot;./SimpleDemo.sol&quot;;</span><br><span class="line">contract ExtraDemo is SimpleDemo&#123;</span><br><span class="line">    //override</span><br><span class="line">    //virtual override</span><br><span class="line">    function store(uint256 _favNum) public override&#123;</span><br><span class="line">        favNum = _favNum + 5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>&#x2F;&#x2F;在父类中用<code>virtual</code>标注可以重载的方法，在子类中用<code>override</code>标注并实现重载</em></p>
<p>效果：</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240129210306564.png" alt="image-20240129210306564" style="zoom:67%;">

<h3 id="使用dataFeed并向合约打钱"><a href="#使用dataFeed并向合约打钱" class="headerlink" title="使用dataFeed并向合约打钱"></a>使用dataFeed并向合约打钱</h3><p>本节资料来源：<a href="https://docs.chain.link/data-feeds/using-data-feeds">使用Data Feeds 关于 EVM 链 | Chainlink 文档</a></p>
<blockquote>
<p>为了发送ETH或其他区块链原生通证，函数需要被标记为payable</p>
<p>Chainlink可以在去中心化环境中为智能合约获取外部数据和进行外部计算</p>
<p>Chainlink喂价是从现实世界中读取定价信息或其他数据的方法</p>
<p>Chainlink VRF 是一种将可证明的随机数从现实世界获取到智能合约中的方法。</p>
<p>Chainlink Keepers是一种去中心化驱动事件的方法</p>
</blockquote>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240205130649419.png" alt="image-20240205130649419" style="zoom:50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">Fundeme.sol</span><br><span class="line">从用户那里拿钱</span><br><span class="line">把赚来的钱从合约取出来</span><br><span class="line">*/</span><br><span class="line">//SPDX-License-Identifier:MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line">import &quot;@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol&quot;;</span><br><span class="line">//EVM,Ethereum Virtual Machine</span><br><span class="line">contract FundMe&#123;</span><br><span class="line">    //注意交易的单位是wei</span><br><span class="line">    uint256 public minimumUsd = 50;</span><br><span class="line">    function fund() public payable&#123;// 把钱转进合约里</span><br><span class="line">        //检查msg.value是否大于一定数量的美元,为否时会revert fund()回滚并报错</span><br><span class="line">        // msg.value == 0.03*1e18</span><br><span class="line">        require(getConversionRate(msg.value)&gt;= minimumUsd,&quot;Didn&#x27;t send enough&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getPrice() public view returns(uint256)&#123;//得到汇率(USD/ETH)</span><br><span class="line">        //ABIw</span><br><span class="line">        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306</span><br><span class="line">        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);</span><br><span class="line">        ( ,int256 answer,,,) = priceFeed.latestRoundData();</span><br><span class="line">        </span><br><span class="line">        return uint256(answer*1e10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getVersion() public view returns (uint256)&#123;//获取了链外数据源的版本信息，并将其作为uint256类型返回</span><br><span class="line">        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);</span><br><span class="line">        return priceFeed.version();</span><br><span class="line">    &#125;</span><br><span class="line">    function getConversionRate(uint256 ethAmount)public view returns (uint256)&#123;</span><br><span class="line">        uint256 ethPrice = getPrice();</span><br><span class="line">        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;</span><br><span class="line">        return ethAmountInUsd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处<code>( ,int256 answer,,,) = priceFeed.latestRoundData();</code>使用<code>,</code>接受不需要的返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//注意latestRoundData()返回值</span><br><span class="line">function latestRoundData()</span><br><span class="line">  external</span><br><span class="line">  view</span><br><span class="line">  returns (</span><br><span class="line">    uint80 roundId,</span><br><span class="line">    int256 answer,</span><br><span class="line">    uint256 startedAt,</span><br><span class="line">    uint256 updatedAt,</span><br><span class="line">    uint80 answeredInRound</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>执行Fundme合约</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240205140809591.png" alt="image-20240205140809591" style="zoom: 67%;">

<p>50&#x2F;2290&#x3D;&#x3D;0.0218150087260035，因此低于这个价格的交易会失败并回滚</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240205140823024.png" alt="image-20240205140823024" style="zoom:67%;">

<h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>库的作用的是可以将一些方法写入指定文件，方便开发时调用它们</p>
<p>新建文件<code>PriceConverter.sol</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">PriceConverter.sol</span><br><span class="line">*/</span><br><span class="line">//SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line">import &quot;@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol&quot;;</span><br><span class="line">library PriceConverter&#123;</span><br><span class="line">    function getPrice() internal view returns(uint256)&#123;//得到汇率(USD/ETH)</span><br><span class="line">        //ABIw</span><br><span class="line">        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306</span><br><span class="line">        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);</span><br><span class="line">        ( ,int256 answer,,,) = priceFeed.latestRoundData();</span><br><span class="line">        </span><br><span class="line">        return uint256(answer*1e10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getVersion() internal view returns (uint256)&#123;//获取了链外数据源的版本信息，并将其作为uint256类型返回</span><br><span class="line">        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);</span><br><span class="line">        return priceFeed.version();</span><br><span class="line">    &#125;</span><br><span class="line">    function getConversionRate(uint256 ethAmount) internal view returns (uint256)&#123;</span><br><span class="line">        uint256 ethPrice = getPrice();</span><br><span class="line">        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;</span><br><span class="line">        return ethAmountInUsd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将刚才<code>Fundme.sol</code>中的<code>getPrice() , getVersion() , getConversionRate(uint256 ethAmount)</code>取出并放入新文件中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">Fundme.sol</span><br><span class="line">*/</span><br><span class="line">//EVM,Ethereum Virtual Machine</span><br><span class="line">contract FundMe&#123;</span><br><span class="line">    using PriceConverter for uint256;//会将PriceConverter放到uint256下</span><br><span class="line">    //注意交易的单位是wei</span><br><span class="line">    uint256 public minimumUsd = 50;</span><br><span class="line">    address[] public funders;</span><br><span class="line">    mapping(address=&gt;uint256) public addressToAccountFunded;</span><br><span class="line">    function fund() public payable&#123;// 把钱转进合约里</span><br><span class="line">        //检查msg.value是否大于一定数量的美元,为否时会revert fund()回滚并报错</span><br><span class="line">        // msg.value == 0.03*1e18</span><br><span class="line">        require(msg.value.getConversionRate()&gt;= minimumUsd,&quot;Didn&#x27;t send enough&quot;);</span><br><span class="line">        funders.push(msg.sender);</span><br><span class="line">        addressToAccountFunded[msg.sender]=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    // function withdraw()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>msg.value.getConversionRate()</code>会自动将<code>msg.value</code>作为<code>getConversionRate()</code>的第一参数，第二第三参数则依次写入括号内。</p>
<h3 id="从合约提取资金"><a href="#从合约提取资金" class="headerlink" title="从合约提取资金"></a>从合约提取资金</h3><p>三种提取资金的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//transfer</span><br><span class="line">payable(msg.sender).transfer(address(this).balance);</span><br><span class="line">//send</span><br><span class="line">bool sendSuccess = payable(msg.sender).send(address(this).balance);</span><br><span class="line">require(sendSuccess,&quot;Send failed&quot;);</span><br><span class="line">//call</span><br><span class="line">(bool callSuccess, )=payable(msg.sender).call&#123;value:address(this).balance&#125;.(&quot;&quot;)</span><br><span class="line">require(callSuccess,&quot;call failed&quot;);</span><br></pre></td></tr></table></figure>

<p>前两种会受到燃气费的制约，推荐最后一种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">从用户那里拿钱</span><br><span class="line">把赚来的钱从合约取出来</span><br><span class="line">*/</span><br><span class="line">//SPDX-License-Identifier:MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line">import &quot;@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol&quot;;</span><br><span class="line">import &quot;./PriceConverter.sol&quot;;</span><br><span class="line">//EVM,Ethereum Virtual Machine</span><br><span class="line">contract FundMe&#123;</span><br><span class="line">    using PriceConverter for uint256;</span><br><span class="line">    //注意交易的单位是wei</span><br><span class="line">    uint256 public minimumUsd = 50;</span><br><span class="line">    address public owner;</span><br><span class="line">    address[] public funders;</span><br><span class="line">    mapping(address=&gt;uint256) public addressToAccountFunded;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    function fund() public payable&#123;// 把钱转进合约里</span><br><span class="line">        //检查msg.value是否大于一定数量的美元,为否时会revert fund()回滚并报错</span><br><span class="line">        // msg.value == 0.03*1e18</span><br><span class="line">        require(msg.value.getConversionRate()&gt;= minimumUsd,&quot;Didn&#x27;t send enough&quot;);</span><br><span class="line">        funders.push(msg.sender);</span><br><span class="line">        addressToAccountFunded[msg.sender]=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function withdraw() public onlyOwner&#123;</span><br><span class="line">        // for(/*start index, ending index, step amount*/)</span><br><span class="line">        for (uint256 funderIndex = 0;funderIndex &lt; funders.length;funderIndex ++)&#123;</span><br><span class="line">            address funder = funders[funderIndex];</span><br><span class="line">            addressToAccountFunded[funder] = 0;//清零账户余额</span><br><span class="line">        &#125;</span><br><span class="line">        //重置数组</span><br><span class="line">        funders = new address[](0); //0个初始元素</span><br><span class="line">        //call</span><br><span class="line">        (bool callSuccess,)=payable(msg.sender).call&#123;value:address(this).balance&#125;(&quot;&quot;);</span><br><span class="line">        require(callSuccess,&quot;call failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        require(msg.sender == owner,&quot;Sender is not owner&quot;);</span><br><span class="line">        _;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>onlyOwner对withdraw的执行者进行了约束，在withdraw执行前会判断合约发起人喝执行人是否相同，只有执行人才可以使用此方法，否则回滚并报错。</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240219154857856.png" alt="image-20240219154857856" style="zoom:80%;">

<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240219154902367.png" alt="image-20240219154902367" style="zoom: 80%;">

<h3 id="优化措施"><a href="#优化措施" class="headerlink" title="优化措施"></a>优化措施</h3><h4 id="修改require"><a href="#修改require" class="headerlink" title="修改require"></a>修改require</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.8.7;</span><br><span class="line">import &quot;*******&quot;</span><br><span class="line">//EVM,Ethereum Virtual Machine</span><br><span class="line">error NotOwner();</span><br><span class="line">contract FundMe&#123;</span><br><span class="line">    ***********</span><br><span class="line">    function fund() public payable&#123;// 把钱转进合约里</span><br><span class="line">        ***********</span><br><span class="line">    &#125;</span><br><span class="line">    function withdraw() public onlyOwner&#123;</span><br><span class="line">		***********</span><br><span class="line">    &#125;</span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        // require(msg.sender == i_owner,&quot;Sender is not owner&quot;);</span><br><span class="line">        if(msg.sender == i_owner)&#123;revert NotOwner();&#125;</span><br><span class="line">        _;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用require会单独保存<code>Sender is not owner</code>，相比<code>error</code>会增加<code>gas</code></p>
<h3 id="recieve和fallback"><a href="#recieve和fallback" class="headerlink" title="recieve和fallback"></a>recieve和fallback</h3><img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240220135504952.png" alt="image-20240220135504952" style="zoom:80%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//SPDX-License-Identifier:MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">contract FallbackExample&#123;</span><br><span class="line">    uint256 public result;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        result = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fallback() external payable &#123; </span><br><span class="line">        result = 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Javascript异步编程"><a href="#Javascript异步编程" class="headerlink" title="Javascript异步编程"></a>Javascript异步编程</h2><p>关键字<code>async</code>，<code>await</code></p>
<p>只有标注了<code>async</code>了的方法中才能使用<code>await</code>关键词</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> variable = <span class="number">5</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(variable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="将私密数据保存到环境变量中"><a href="#将私密数据保存到环境变量中" class="headerlink" title="将私密数据保存到环境变量中"></a>将私密数据保存到环境变量中</h2><p>创建.env文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PRIVATE_KEY=0xE9f22C0cB28f58a74574d88679B4A3F933e3d51cyarn</span><br></pre></td></tr></table></figure>

<p>引包，使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>(); <span class="comment">// 调用 config 方法加载环境变量 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">PRIVATE_KEY</span>);</span><br></pre></td></tr></table></figure>

<h2 id="进阶：私钥管理"><a href="#进阶：私钥管理" class="headerlink" title="进阶：私钥管理"></a>进阶：私钥管理</h2><p>资料来源 P57</p>
<h2 id="HardHat"><a href="#HardHat" class="headerlink" title="HardHat"></a>HardHat</h2><h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><p>1）准备一个空文件夹，终端<code>yarn add --dev hardhat</code></p>
<p>2）<code>yarn hardhat</code></p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240225225217144.png" alt="image-20240225225217144">

<p>3）检查solidity版本</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240225231333402.png" alt="image-20240225231333402">

<p>4）编译，<code>yarn hardhat compile</code></p>
<p>5）<code>yarn add --dev hardhat-deploy</code>用于简化和管理以太坊智能合约的部署过程</p>
<p>6）删除<code>deploy.js</code>, 在<code>hardhat.config.js</code>中写入<code>require(&quot;hardhat-deploy&quot;);</code>之后执行<code>yarn hardhat</code>，在新<code>task</code>中应有<code>deploy</code></p>
<p>7）建立deploy文件夹，之后的编译脚本就写在这里面</p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240225234449556.png" alt="image-20240225234449556">

<p>8）编写脚本，并编译<code>yarn hardhat deploy</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01-deploy-fund-me.js</span></span><br><span class="line"><span class="comment">//引包，import</span></span><br><span class="line"><span class="comment">//方法定义</span></span><br><span class="line"><span class="comment">//方法使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deployFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">default</span> = deployFunc <span class="comment">//将deplyFunc设置为默认要找的函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\study_test\Hardhat\hardhat-fund-me-fcc&gt; yarn hardhat deploy</span><br><span class="line">yarn run v1.22.21</span><br><span class="line">$ D:\study_test\Hardhat\hardhat-fund-me-fcc\node_modules\.bin\hardhat deploy</span><br><span class="line">Compiled 3 Solidity files successfully (evm target: london).</span><br><span class="line">hi</span><br><span class="line">Done in 3.12s.</span><br></pre></td></tr></table></figure>

<p>使用<code>yarn add --dev @chainlink/contracts@0.8.0</code>下载chainlink预言机中的合约</p>
<h3 id="Hardhat部署智能合约"><a href="#Hardhat部署智能合约" class="headerlink" title="Hardhat部署智能合约"></a>Hardhat部署智能合约</h3><h4 id="关于node-js的脚本的接口开放和使用"><a href="#关于node-js的脚本的接口开放和使用" class="headerlink" title="关于node.js的脚本的接口开放和使用"></a>关于node.js的脚本的接口开放和使用</h4><p>这是一个TIP：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// helper-hardhat-config.js</span></span><br><span class="line"><span class="keyword">const</span> networkConfig = &#123;</span><br><span class="line">    <span class="number">11155111</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Sepolia&quot;</span>,</span><br><span class="line">        <span class="attr">ethUsdPriceFeed</span>: <span class="string">&quot;0x694AA1769357215DE4FAC081bf1f309aDC325306&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">5</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Goerli&quot;</span>,</span><br><span class="line">        <span class="attr">ethUsdPriceFeed</span>: <span class="string">&quot;0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;<span class="comment">//开放对其他脚本使用的接口</span></span><br><span class="line">    networkConfig,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01-deploy-fund-me.js</span></span><br><span class="line"><span class="comment">//使用刚才的接口</span></span><br><span class="line"><span class="comment">//helpconfig代表了helper-hardhat-config.js这个文件</span></span><br><span class="line"><span class="keyword">const</span> helperconfig = <span class="built_in">require</span>(<span class="string">&quot;../helper-hardhat-config.js&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> networkconfig = helperconfig.<span class="property">networkConfig</span></span><br></pre></td></tr></table></figure>

<p>当然也可以这么写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; networkconfig &#125; = <span class="built_in">require</span>(<span class="string">&quot;../helper-hardhat-config.js&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="本地-测试网络部署"><a href="#本地-测试网络部署" class="headerlink" title="本地&#x2F;测试网络部署"></a>本地&#x2F;测试网络部署</h4><p>如果我们没有使用任何测试网</p>
<p>我们需要写一个<code>Mock</code>脚本，即如果某个合约不存在，我们就部署一个最小化的版本来进行我们的本地测试，</p>
<p><strong>hardhat-config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-toolbox&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;hardhat-deploy&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> import(&#x27;hardhat/config&#x27;).HardhatUserConfig */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const COINMARKETCAP_API_KEY = process.env.COINMARKETCAP_API_KEY;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SEPOLIA_RPC_URL</span> = process.<span class="property">env</span>.<span class="property">SEPOLIA_RPC_URL</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PRIVATE_KEY</span> = process.<span class="property">env</span>.<span class="property">PRIVATE_KEY</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ETHERSCAN_API_KEY</span> = process.<span class="property">env</span>.<span class="property">ETHERSCAN_API_KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: &#123;</span><br><span class="line">    <span class="attr">compilers</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&quot;0.8.7&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&quot;0.6.6&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">defaultNetwork</span>: <span class="string">&quot;hardhat&quot;</span>,</span><br><span class="line">  <span class="attr">networks</span>: &#123;</span><br><span class="line">    <span class="attr">hardhat</span>: &#123;</span><br><span class="line">      <span class="attr">chainId</span>: <span class="number">31337</span>,</span><br><span class="line">      <span class="comment">// gasPrice: 130000000000,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sepolia</span>: &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="variable constant_">SEPOLIA_RPC_URL</span>,</span><br><span class="line">      <span class="attr">accounts</span>: [<span class="variable constant_">PRIVATE_KEY</span>],</span><br><span class="line">      <span class="attr">chainId</span>: <span class="number">11155111</span>,</span><br><span class="line">      <span class="attr">blockConfirmations</span>: <span class="number">6</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">gasReporter</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">currency</span>: <span class="string">&quot;USD&quot;</span>,</span><br><span class="line">    <span class="attr">outputFile</span>: <span class="string">&quot;gas-report.txt&quot;</span>,</span><br><span class="line">    <span class="attr">noColors</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// coinmarketcap: COINMARKETCAP_API_KEY,</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">etherscan</span>: &#123;</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="variable constant_">ETHERSCAN_API_KEY</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">namedAccounts</span>: &#123;</span><br><span class="line">    <span class="attr">deployer</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span>, <span class="comment">// here this will by default take the first account as deployer</span></span><br><span class="line">      <span class="number">1</span>: <span class="number">0</span>, <span class="comment">// similarly on mainnet it will take the first account as deployer. Note though that depending on how hardhat network are configured, the account 0 on one network can be different than on another</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mocha</span>: &#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">500000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>helper-hardhat-config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// helper-hardhat-config.js</span></span><br><span class="line"><span class="keyword">const</span> networkConfig = &#123;</span><br><span class="line">  <span class="number">31337</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Price Feed Address, values can be obtained at https://docs.chain.link/data-feeds/price-feeds/addresses</span></span><br><span class="line">  <span class="number">11155111</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;sepolia&quot;</span>,</span><br><span class="line">    <span class="attr">ethUsdPriceFeed</span>: <span class="string">&quot;0x694AA1769357215DE4FAC081bf1f309aDC325306&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> developmentChains = [<span class="string">&quot;hardhat&quot;</span>, <span class="string">&quot;localhost&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  networkConfig,</span><br><span class="line">  developmentChains,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>MockV3Aggregator.sol</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//MockV3Aggregator.sol</span><br><span class="line">//SPDX-License-Identifier:MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;@chainlink/contracts/src/v0.6/tests/MockV3Aggregator.sol&quot;;</span><br></pre></td></tr></table></figure>

<p><strong>00-deploy-mocks.js</strong></p>
<p>&#x2F;&#x2F;用以部署到本地网络（快）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//00-deploy-mocks.js</span><br><span class="line">//这段是部署本地预言机</span><br><span class="line">const &#123; network &#125; = require(&quot;hardhat&quot;);</span><br><span class="line"></span><br><span class="line">const DECIMALS = &quot;8&quot;;</span><br><span class="line">const INITIAL_PRICE = &quot;200000000000&quot;; // 2000</span><br><span class="line"></span><br><span class="line">module.exports = async (&#123; getNamedAccounts, deployments &#125;) =&gt; &#123;</span><br><span class="line">  const &#123; deploy, log &#125; = deployments;</span><br><span class="line">  const &#123; deployer &#125; = await getNamedAccounts();</span><br><span class="line">  const chainId = network.config.chainId;</span><br><span class="line">  log(network.name);</span><br><span class="line">  if (chainId == 31337) &#123;</span><br><span class="line">    log(&quot;Local network detected!Deploying mocks...&quot;);</span><br><span class="line">    await deploy(&quot;MockV3Aggregator&quot;, &#123;</span><br><span class="line">      contract: &quot;MockV3Aggregator&quot;,</span><br><span class="line">      from: deployer,</span><br><span class="line">      log: true,</span><br><span class="line">      args: [DECIMALS, INITIAL_PRICE],</span><br><span class="line">    &#125;);</span><br><span class="line">    log(&quot;Mocks deployed!&quot;);</span><br><span class="line">    log(&quot;--------------------------------------------------------&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 这段代码指定了当前部署脚本相关的标签。在这里，使用了两个标签：&quot;all&quot; 和 &quot;mocks&quot;。</span><br><span class="line">// &quot;all&quot; 标签： 这个标签可能用于将部署脚本与整个项目的所有部署任务关联起来。</span><br><span class="line">// 当运行 npx hardhat deploy --tags all 时，将运行所有带有 &quot;all&quot; 标签的部署任务。</span><br><span class="line">// &quot;mocks&quot; 标签： 这个标签可能用于将部署脚本与与模拟合约相关的其他部署任务关联起来。</span><br><span class="line">// 当运行 npx hardhat deploy --tags mocks 时，将运行所有带有 &quot;mocks&quot; 标签的部署任务。</span><br><span class="line">//yarn hardhat deploy --tags mocks</span><br><span class="line">module.exports.tags = [&quot;all&quot;, &quot;mocks&quot;];</span><br></pre></td></tr></table></figure>

<p>使用<code>yarn hardhat deploy --tags mocks</code>可以精准执行<code>00-deploy-mocks.js</code></p>
<p>也可以对当前<code>chainId</code>加以判断，使其能够自动判断部署在哪条链上</p>
<p><strong>01-deploy-fund-me.js</strong></p>
<p>&#x2F;&#x2F;用以部署到测试网络（慢）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//01-deploy-fund-me.js</span><br><span class="line">//helpconfig代表了helper-hardhat-config.js这个文件</span><br><span class="line">// const helperconfig = require(&quot;../helper-hardhat-config.js&quot;)</span><br><span class="line">// const networkconfig = helperconfig.networkConfig</span><br><span class="line">//node.js的快捷写法，写法等同于上方的</span><br><span class="line">const &#123;</span><br><span class="line">  networkConfig,</span><br><span class="line">  developmentChains,</span><br><span class="line">&#125; = require(&quot;../helper-hardhat-config.js&quot;);</span><br><span class="line">const &#123; network &#125; = require(&quot;hardhat&quot;);</span><br><span class="line">const &#123; verify &#125; = require(&quot;../utils/verify.js&quot;);</span><br><span class="line">//async function deployFunc(hre) &#123;</span><br><span class="line">//     hre.getNameAccounts()</span><br><span class="line">//     hre.deployments</span><br><span class="line">// &#125;</span><br><span class="line">// module.exports.default = deployFunc //将deplyFunc设置为默认要找的函数</span><br><span class="line"></span><br><span class="line">//hre代表hardhat运行环境</span><br><span class="line">//写法等同于上方的</span><br><span class="line">// module.exports = async (hre) =&gt; &#123;</span><br><span class="line">//     const &#123;getNameAccounts,deployments&#125; = hre</span><br><span class="line">// &#125;</span><br><span class="line">//node.js的语法糖，写法等同于上方的</span><br><span class="line">module.exports = async (&#123; getNamedAccounts, deployments &#125;) =&gt; &#123;</span><br><span class="line">  //将deploy和log从deployments这个对象中提取出来，等同于</span><br><span class="line">  //const deploy = deployments.deploy;</span><br><span class="line">  //const log = deployments.log</span><br><span class="line">  const &#123; deploy, log &#125; = deployments;</span><br><span class="line">  //getNameAccounts() 返回一个包含 deployer 属性的对象，等同于</span><br><span class="line">  //const getNameAccountsResult = await getNameAccounts();</span><br><span class="line">  //const deployer = getNameAccountsResult.deployer;</span><br><span class="line">  log(&quot;Deploy Fundme...&quot;);</span><br><span class="line">  const &#123; deployer &#125; = await getNamedAccounts();</span><br><span class="line">  const chainId = network.config.chainId;</span><br><span class="line"></span><br><span class="line">  //---------------确认预言机地址-----------------</span><br><span class="line">  if (developmentChains.includes(network.name)) &#123;</span><br><span class="line">    const ethUsdAggregator = await deployments.get(&quot;MockV3Aggregator&quot;);</span><br><span class="line">    ethUsdPriceFeedAddress = ethUsdAggregator.address;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // ethUsdPriceFeedAddress的格式：0x694AA1769357215DE4FAC081bf1f309aDC325306</span><br><span class="line">    ethUsdPriceFeedAddress = networkConfig[chainId][&quot;ethUsdPriceFeed&quot;];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // log(ethUsdPriceFeedAddress);</span><br><span class="line">  //-----------------deploy-----------------------</span><br><span class="line">  const args = [ethUsdPriceFeedAddress];</span><br><span class="line">  const Fundme = await deploy(&quot;Fundme&quot;, &#123;</span><br><span class="line">    from: deployer,</span><br><span class="line">    args: args, //喂价地址</span><br><span class="line">    log: true,</span><br><span class="line">    waitConfirmation: network.config.blockConfirmations || 1,</span><br><span class="line">  &#125;);</span><br><span class="line">  //-------------------verify-----------------------</span><br><span class="line">  //当合约部署网络与指定的不符时会进行检查</span><br><span class="line">  if (</span><br><span class="line">    !developmentChains.includes(network.name) &amp;&amp;</span><br><span class="line">    process.env.ETHERSCAN_API_KEY</span><br><span class="line">  ) &#123;</span><br><span class="line">    //verify</span><br><span class="line">    await verify(Fundme.address, args);</span><br><span class="line">  &#125;</span><br><span class="line">  log(&quot;--------------------------------------------------------&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports.tags = [&quot;all&quot;, &quot;fundme&quot;];</span><br></pre></td></tr></table></figure>

<p>输入<code>yarn hardhat deploy --network sepolia</code>或者<code>yarn hardhat deploy --network hardhat</code>，会识别到<code>network.name</code>的值并部署<code>Fundme</code>合约到<strong>具体的网络</strong>中，同时使用<code>MockV3Aggregator.sol</code>或者 <code>ethUsdPriceFeed: &quot;0x694AA1769357215DE4FAC081bf1f309aDC325306&quot;</code>作为喂价合约</p>
<p><code>utils</code>文件夹，用于验证合约的合法性和安全性</p>
<p><strong>verify.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//verify.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; run &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">verify</span> = <span class="keyword">async</span> (<span class="params">contractAddress, args</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Verifying Contract...&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">run</span>(<span class="string">&quot;verify:verify&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">address</span>: contractAddress,</span><br><span class="line">      <span class="attr">constructorArguments</span>: args,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">message</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;already verified&quot;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Already Verified!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; verify &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>（1）部署到本地网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\study_test\Hardhat\Harhat-Fundme&gt; yarn hardhat deploy --network hardhat</span><br><span class="line">yarn run v1.22.21</span><br><span class="line">warning package.json: No license field</span><br><span class="line">$ D:\study_test\Hardhat\Harhat-Fundme\node_modules\.bin\hardhat deploy --network hardhat</span><br><span class="line">https://eth-sepolia.api.onfinality.io/public</span><br><span class="line">Nothing to compile</span><br><span class="line">Local network detected!Deploying mocks...</span><br><span class="line">deploying &quot;MockV3Aggregator&quot; (tx: 0x3d732abdeda8235691578f5eae48ec57c18e6860c18196ab7b211ca8f74dce2b)...: deployed at 0x5FbDB2315678afecb367f032d93F642f64180aa3 with 569759 gas</span><br><span class="line">Mocks deployed!</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">Deploy Fundme...</span><br><span class="line">deploying &quot;Fundme&quot; (tx: 0x9275acdb459bd3d25e3dbf786faa9a18efb9edf2bcaa93cf56f4a7dc5b97b1e8)...: deployed at 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 with 846785 gas</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">Done in 2.94s.</span><br></pre></td></tr></table></figure>

<p>（2）部署到测试网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ D:\study_test\Hardhat\Harhat-Fundme\node_modules\.bin\hardhat deploy --network sepolia</span><br><span class="line">https://eth-sepolia.api.onfinality.io/public</span><br><span class="line">Nothing to compile</span><br><span class="line">Deploy Fundme...</span><br><span class="line">deploying &quot;Fundme&quot; (tx: 0x8c2e8759b86f8076702ed50b0abaa5d082ed8ac47589f380f367e2b62aeefc3d)...: deployed at 0x58962eaA9001b9C3F1Eb908Ac1347213b2D39A5D with 846785 gas</span><br><span class="line">Verifying Contract...</span><br><span class="line">UnexpectedError: An unexpected error occurred during the verification process.</span><br><span class="line">Please report this issue to the Hardhat team.</span><br><span class="line">Error Details: Connect Timeout Error</span><br><span class="line">    at Etherscan.isVerified (D:\study_test\Hardhat\Harhat-Fundme\node_modules\@nomicfoundation\hardhat-verify\src\internal\etherscan.ts:126:13)</span><br><span class="line">    at processTicksAndRejections (node:internal/process/task_queues:95:5)</span><br><span class="line">    at SimpleTaskDefinition.action (D:\study_test\Hardhat\Harhat-Fundme\node_modules\@nomicfoundation\hardhat-verify\src\internal\tasks\etherscan.ts:101:24)</span><br><span class="line">    at Environment._runTaskDefinition (D:\study_test\Hardhat\Harhat-Fundme\node_modules\hardhat\src\internal\core\runtime-environment.ts:358:14)</span><br><span class="line">    at Environment.run (D:\study_test\Hardhat\Harhat-Fundme\node_modules\hardhat\src\internal\core\runtime-environment.ts:191:14)        </span><br><span class="line">    at SimpleTaskDefinition.action (D:\study_test\Hardhat\Harhat-Fundme\node_modules\@nomicfoundation\hardhat-verify\src\index.ts:284:9) </span><br><span class="line">    at Environment._runTaskDefinition (D:\study_test\Hardhat\Harhat-Fundme\node_modules\hardhat\src\internal\core\runtime-environment.ts:358:14)</span><br><span class="line">    at Environment.run (D:\study_test\Hardhat\Harhat-Fundme\node_modules\hardhat\src\internal\core\runtime-environment.ts:191:14)        </span><br><span class="line">    at verify (D:\study_test\Hardhat\Harhat-Fundme\utils\verify.js:6:5)</span><br><span class="line">    at Object.module.exports [as func] (D:\study_test\Hardhat\Harhat-Fundme\deploy\01-deploy-fund-me.js:64:5)</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">Done in 84.60s.</span><br></pre></td></tr></table></figure>

<p>合约<code>0x8c2e8759b86f8076702ed50b0abaa5d082ed8ac47589f380f367e2b62aeefc3d</code></p>
<p>被部署在以太坊地址<code>0x58962eaA9001b9C3F1Eb908Ac1347213b2D39A5D</code></p>
<img src="/2024/04/25/Patrick%20Collins_blockchain_note/image-20240305002127313.png" alt="image-20240305002127313" style="zoom:67%;">

<h4 id="编写脚本注入资金"><a href="#编写脚本注入资金" class="headerlink" title="编写脚本注入资金"></a>编写脚本注入资金</h4><p>P.S 在本地Hardhat环境中运行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fund.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ethers, getNamedAccounts &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; deployer &#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Deployer address: <span class="subst">$&#123;deployer&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> fundme = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;Fundme&quot;</span>, deployer);</span><br><span class="line">  <span class="comment">// console.log(`Got contract Fundme at $&#123;fundme.address&#125;`);</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Funding contract...&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> transactionResponse = <span class="keyword">await</span> fundme.<span class="title function_">fund</span>(&#123;</span><br><span class="line">    <span class="attr">value</span>: ethers.<span class="title function_">parseEther</span>(<span class="string">&quot;0.1&quot;</span>),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> transactionResponse.<span class="title function_">wait</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Funded!&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(deployer);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(balance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\study_test\Hardhat\Harhat-Fundme&gt; yarn hardhat run scripts/fund.js --network hardhat</span><br><span class="line">yarn run v1.22.21</span><br><span class="line">warning package.json: No license field</span><br><span class="line">$ D:\study_test\Hardhat\Harhat-Fundme\node_modules\.bin\hardhat run scripts/fund.js --network hardhat</span><br><span class="line">Deployer address: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</span><br><span class="line">Funding contract...</span><br><span class="line">Funded!</span><br><span class="line">9999999960505000000000n</span><br><span class="line">Done in 5.54s.</span><br></pre></td></tr></table></figure>

<h4 id="编写脚本提取资金"><a href="#编写脚本提取资金" class="headerlink" title="编写脚本提取资金"></a>编写脚本提取资金</h4><p>P.S 在本地Hardhat环境中运行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//withdraw.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ethers, getNamedAccounts &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; deployer &#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Deployer address: <span class="subst">$&#123;deployer&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> fundme = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;Fundme&quot;</span>, deployer);</span><br><span class="line">  <span class="comment">// console.log(`Got contract Fundme at $&#123;fundme.address&#125;`);</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Funding contract...&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> transactionResponse = <span class="keyword">await</span> fundme.<span class="title function_">withdraw</span>();</span><br><span class="line">  <span class="keyword">await</span> transactionResponse.<span class="title function_">wait</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Got it back!&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(deployer);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(balance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="HTML连接到Metamask"><a href="#HTML连接到Metamask" class="headerlink" title="HTML连接到Metamask"></a>HTML连接到Metamask</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    that is good</span><br><span class="line">    &lt;button onclick=<span class="string">&quot; connect()&quot;</span>&gt;<span class="title class_">Connect</span>&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">ethereum</span> !==<span class="string">&quot;undefined&quot;</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">request</span>(&#123;<span class="attr">method</span>:<span class="string">&quot;eth_requestAccounts&quot;</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;connectBUtton&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;Connected!&quot;</span> <span class="comment">//将按钮中文字改为Connected</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No metamask!&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>也可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- index.<span class="property">html</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    that is good</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> =<span class="string">&quot;connectButton&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot; connect()&quot;</span>&gt;</span>Connect<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">ethereum</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">request</span>(&#123; <span class="attr">method</span>: <span class="string">&quot;eth_requestAccounts&quot;</span> &#125;)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;connectButton&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;Connected!&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No metamask!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTML结合js实现web端交易"><a href="#HTML结合js实现web端交易" class="headerlink" title="HTML结合js实现web端交易"></a>HTML结合js实现web端交易</h2><p><a href="https://docs.moonbeam.network/cn/builders/build/eth-api/libraries/ethersjs/">使用Ethers.js代码库发送交易和部署合约 | Moonbeam Docs</a></p>
]]></content>
      <categories>
        <category>Web3</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>以太坊</tag>
        <tag>智能合约</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin 笔记</title>
    <url>/2024/04/01/Gin_note/</url>
    <content><![CDATA[<p>​	Gin 是 Golang 常用的一种轻量型框架，可以快速部署且可以自定义项目结构，可塑性和操作性很强，搭配各种库可以实现非常不错的效果，精简的同时性能也丝毫不落下风，可以说是兼顾了性能和轻便程度，学习和开发难度较低于 Springboot 那种航空母舰型框架，但是想要使用的得心应手还需要对后端和 Golang 原生有一定的熟悉程度。</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-03-28 13:36</li>
<li>updateTime: 2024-04-01 10:43</li>
</ul>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这也不知道是我开的第几份笔记了，主打的是记录 Gin 后端的<strong>搭建</strong>，内容应该不会很多，毕竟 Gin 和 Flask 一样，是一个轻量型的框架，主打的是快速开发，但是 Gin 的响应速度上比 Flask 快的不是一点点，语言原生支持上 Golang 不需要额外的库也能完成协程，管道，映射等等功能。但是和 Goframe、SpringBoot 那些航空母舰级的框架不太一样，Gin 本身像个光杆司令，有不少功能是需要引入其他模块来实现的，比如 Gorm，godotenv 等等；</p>
<p>至于 Goframe，原先确实萌生过好好学习它的想法，不过现在情况特殊，一来是原先投的岗位貌似莫得了，二来是毕设老师催挺急的，没时间开新坑了，抓紧写完抓紧 Gap。</p>
<h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><p>Gin 快速搭建教程[来自 B 站’慕课网’]：<a href="https://www.bilibili.com/video/BV1Jy4y1F7RG/">https://www.bilibili.com/video/BV1Jy4y1F7RG/</a></p>
<p>Gin 中文开发文档：<a href="https://gin-gonic.com/zh-cn/docs/quickstart/">快速入门 | Gin Web Framework (gin-gonic.com)</a></p>
<p>Gorm 中文开发文档：<a href="https://gorm.io/zh_CN/docs/">GORM 指南 | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></p>
<h2 id="开发报错"><a href="#开发报错" class="headerlink" title="开发报错"></a>开发报错</h2><blockquote>
<ul>
<li><p>如果开发过程中出现<code>404-not-found</code>，请先检查请求模式是<code>GET</code>还是<code>POST</code></p>
</li>
<li><p>如果 gorm 查询结果为空且数据库查询正常，请检查 gorm 标签是否正确<code>gorm:&quot;column:publicKey&quot;</code></p>
</li>
<li><p>如果开发过程中，在数据库<code>Mysql</code>中设置了默认值，但是不会启用，可能是 gorm 给覆盖了，需要在<code>gorm</code>这重新定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Isvisual       <span class="type">int</span>     <span class="string">`gorm:&quot;column:isvisual;default:1&quot;`</span></span><br><span class="line">Status         <span class="type">int</span>     <span class="string">`gorm:&quot;column:status;default:1&quot;`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果 json 绑定失败，请检查结构体定义的变量头是否小写（被定义成私有变量了）</p>
</li>
<li><p><code>sqlx</code> 在把<code>timestamp</code>转为<code>go</code>的<code>time.Time</code>报错<code>Scan error on column index 6: unsupported Scan, storing driver.Value type []uint8 into type *time.Time</code>,需要在数据库配置时加上<code>parseTime=true</code>，即:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Mysqldb = fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(127.0.0.1:3306)/minato_sys?charset=utf8mb4&amp;parseTime=true&quot;</span>, name, password)</span><br></pre></td></tr></table></figure>

<p>不过，这一点我已经在数据库配置那一环修改过了，按着笔记走应该碰不到这个错误。</p>
</li>
<li></li>
</ul>
</blockquote>
<h2 id="Gin-创建工程"><a href="#Gin-创建工程" class="headerlink" title="Gin 创建工程"></a>Gin 创建工程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化项目</span><br><span class="line">$ go mod init gin-Minato</span><br><span class="line"></span><br><span class="line"># 安装Gin框架</span><br><span class="line">$ go get github.com/gin-gonic/gin@latest</span><br><span class="line"></span><br><span class="line"># 安装热加载插件fresh</span><br><span class="line">$ go install github.com/pilu/fresh@latest</span><br><span class="line">$ go get github.com/pilu/fresh</span><br><span class="line">$ fresh</span><br><span class="line"></span><br><span class="line"># 安装godotenv插件</span><br><span class="line">$ go get github.com/joho/godotenv</span><br><span class="line"></span><br><span class="line"># 安装Gorm</span><br><span class="line">$ go get -u gorm.io/gorm</span><br><span class="line">$ go get -u gorm.io/driver/mysql  #你用什么就下什么，这边以mysql为例</span><br><span class="line"></span><br><span class="line"># 安装session和redis</span><br><span class="line">$ go get github.com/gin-contrib/sessions</span><br><span class="line">$ go get github.com/gin-contrib/sessions/redis</span><br><span class="line"></span><br><span class="line"># 安装JWT-go</span><br><span class="line">$ go get github.com/dgrijalva/jwt-go</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">		ctx.String(http.StatusOK, <span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//r.Run(&quot;:8080&quot;)</span></span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">$ go run main.go</span><br><span class="line"># 如果安装过fresh，则可以</span><br><span class="line">$ fresh</span><br></pre></td></tr></table></figure>

<h2 id="路由分配"><a href="#路由分配" class="headerlink" title="路由分配"></a>路由分配</h2><p>步骤：在<code>router.go</code>中创建<code>gin引擎</code>，在<code>main.go</code>里调用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//routers.go</span></span><br><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Router</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line"></span><br><span class="line">	user := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		user.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">			ctx.String(http.StatusOK, <span class="string">&quot;hello world1!&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">		user.PUT(<span class="string">&quot;/add&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">			ctx.String(http.StatusOK, <span class="string">&quot;hello world2!&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">		user.POST(<span class="string">&quot;/post&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">			ctx.String(http.StatusOK, <span class="string">&quot;hello world3!&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">		user.DELETE(<span class="string">&quot;/delete&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">			ctx.String(http.StatusOK, <span class="string">&quot;hello world4!&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>main.go</code>中调用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;gin-Minato/router&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := router.Router()</span><br><span class="line">	<span class="comment">//r.Run(&quot;:8080&quot;)</span></span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>OK 完成，终于不用全写在 main 文件里了，不过这个写法还是不够简洁，并不符合官方文档</p>
<h2 id="将处理方法外置到其他包裹"><a href="#将处理方法外置到其他包裹" class="headerlink" title="将处理方法外置到其他包裹"></a>将处理方法外置到其他包裹</h2><p>这是我个人对它的叫法，就是提一嘴，没什么技术含量，但是能够让项目更加简洁清晰，易于维护。</p>
<p>定义控制器中常用的方法和数据结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller/commen.go</span></span><br><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> JsonStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code  <span class="type">int</span>         <span class="string">`json:&quot;code&quot;`</span>  <span class="comment">//返回状态码</span></span><br><span class="line">	Msg   <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;msg&quot;`</span>   <span class="comment">//返回的提示语</span></span><br><span class="line">	Data  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;data&quot;`</span>  <span class="comment">//返回数据</span></span><br><span class="line">	Count <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;count&quot;`</span> <span class="comment">//返回条数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> JsonErrStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code <span class="type">int</span>         <span class="string">`json:&quot;code&quot;`</span> <span class="comment">//返回状态码</span></span><br><span class="line">	Msg  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;msg&quot;`</span>  <span class="comment">//返回的提示语</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReturnSuccess</span><span class="params">(c *gin.Context, code <span class="type">int</span>, msg <span class="keyword">interface</span>&#123;&#125;, data <span class="keyword">interface</span>&#123;&#125;, count <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">	json := &amp;JsonStruct&#123;Code: code, Msg: msg, Data: data, Count: count&#125;</span><br><span class="line">	c.JSON(<span class="number">200</span>, json)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReturnFalse</span><span class="params">(c *gin.Context, code <span class="type">int</span>, msg <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	json := &amp;JsonErrStruct&#123;Code: code, Msg: msg&#125;</span><br><span class="line">	c.JSON(<span class="number">200</span>, json)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在角色控制器中使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller/user.go</span></span><br><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将其归进结构体中，避免与同一个包下的其他方法名字冲突。就是引用的时候稍微麻烦些</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UserController)</span></span> GetUserInfo(c *gin.Context) &#123;</span><br><span class="line">	ReturnSuccess(c, <span class="number">0</span>, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;user info&quot;</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>main.go</code>中引用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.go</span></span><br><span class="line">user.GET(<span class="string">&quot;/info&quot;</span>, controller.UserController&#123;&#125;.GetUserInfo)</span><br><span class="line">user.GET(<span class="string">&quot;/err&quot;</span>, controller.UserController&#123;&#125;.GetUserList)</span><br></pre></td></tr></table></figure>

<p>ok 完成，已经有一个项目的雏形了</p>
<h2 id="从上下文获取数据"><a href="#从上下文获取数据" class="headerlink" title="从上下文获取数据"></a>从上下文获取数据</h2><p><code>*c gin.context</code>显然不是吃干饭的，每回写方法都把它带上是有原因的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(U UserController)</span></span> GetUserList(c *gin.Context) &#123;</span><br><span class="line">	cid := c.PostForm(<span class="string">&quot;cid&quot;</span>)</span><br><span class="line">	name := c.DefaultPostForm(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李大壮&quot;</span>)<span class="comment">//提供默认值</span></span><br><span class="line">	ReturnSuccess(c, <span class="number">0</span>, cid, name, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个简单的接受数据的方法</p>
<p>这里使用 Apifox（免费的，好使 👍）向它发送请求</p>
<img src="/2024/04/01/Gin_note/image-20240329131341634.png" alt="image-20240329131341634" style="zoom: 67%;">

<p>ok 完成，效果显著</p>
<h2 id="将请求获取的数据绑定到结构体"><a href="#将请求获取的数据绑定到结构体" class="headerlink" title="将请求获取的数据绑定到结构体"></a>将请求获取的数据绑定到结构体</h2><p>上述方法不适合读取 json 数据报文</p>
<p>第一种,以赋值的形式读过来</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(U UserController)</span></span> GetUserList(c *gin.Context) &#123;</span><br><span class="line">	<span class="comment">//cid := c.PostForm(&quot;cid&quot;)</span></span><br><span class="line">	<span class="comment">//name := c.DefaultPostForm(&quot;name&quot;, &quot;李大壮&quot;) //提供默认值</span></span><br><span class="line">	param := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	err := c.BindJSON(&amp;param)</span><br><span class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">		ReturnSuccess(c, <span class="number">0</span>, <span class="string">&quot;success&quot;</span>,param, <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		ReturnFalse(c, <span class="number">4001</span>, gin.H&#123;<span class="string">&quot;err&quot;</span>: err&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种，绑定到结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Search <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span> <span class="string">`json:name`</span>   <span class="comment">//必须要json匹配上，否则可能读不到</span></span><br><span class="line">	Cid  <span class="type">int</span>    <span class="string">`json:cid`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(U UserController)</span></span> GetUserList(c *gin.Context) &#123;</span><br><span class="line">	search := &amp;Search&#123;&#125;</span><br><span class="line">	err := c.BindJSON(&amp;search)</span><br><span class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">		ReturnSuccess(c, <span class="number">0</span>, search.Name, search.Cid, <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		ReturnFalse(c, <span class="number">4001</span>, gin.H&#123;<span class="string">&quot;err&quot;</span>: err&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="defer-延迟捕获异常"><a href="#defer-延迟捕获异常" class="headerlink" title="defer 延迟捕获异常"></a>defer 延迟捕获异常</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;捕获异常&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<p>自动运行，塞在方法里面就行，但是前端得不到报错情况。</p>
<h2 id="Gorm"><a href="#Gorm" class="headerlink" title="Gorm"></a>Gorm</h2><p>这是一个 SQL 映射库</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>创建文件<code>config/dbconnect.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化数据库链接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/joho/godotenv/autoload&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Db      *gorm.DB</span><br><span class="line">	err     <span class="type">error</span></span><br><span class="line">	Mysqldb <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//初始化数据库的钥匙</span></span><br><span class="line">	name := os.Getenv(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">	password := os.Getenv(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> name == <span class="string">&quot;&quot;</span> || password == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;缺少必要的环境变量 name 或 password&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	Mysqldb = fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(127.0.0.1:3306)/minato_sys?charset=utf8mb4&amp;parseTime=true&quot;</span>, name, password)</span><br><span class="line">	<span class="comment">//链接数据库</span></span><br><span class="line">	Db, err = gorm.Open(mysql.Open(Mysqldb), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;mysql connect error:&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> Db.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;mysql connect error:&quot;</span>, Db.Error)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置连接池</span></span><br><span class="line">	sqlDB, _ := Db.DB()</span><br><span class="line">	<span class="comment">// SetMaxIdleConns sets the maximum number of connections in the idle connection pool.</span></span><br><span class="line">	sqlDB.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// SetMaxOpenConns sets the maximum number of open connections to the database.</span></span><br><span class="line">	sqlDB.SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// SetConnMaxLifetime sets the maximum amount of time a connection may be reused.</span></span><br><span class="line">	sqlDB.SetConnMaxLifetime(time.Hour)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后续可以根据自己需要，分别写在自己想要的文件里</p>
<p>注：此处用到了 godotenv 插件，可以从环境变量中读取数据，使用时可以参考这位老哥写的：<a href="https://darjun.github.io/2020/02/12/godailylib/godotenv/">Go 每日一库之 godotenv - 大俊的博客 (darjun.github.io)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#这是一个示例的env文件</span><br><span class="line">name = root</span><br><span class="line">password = 88888888</span><br></pre></td></tr></table></figure>

<h3 id="测试数据库是否链接"><a href="#测试数据库是否链接" class="headerlink" title="测试数据库是否链接"></a>测试数据库是否链接</h3><p>注：以下代码仅是测试使用，不可直接粘贴【直接粘贴和伪代码没啥区别】，根据需求进行改动</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义路由</span></span><br><span class="line">user.GET(<span class="string">&quot;/info/:cid&quot;</span>, controller.UserController&#123;&#125;.GetUserInfo)</span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UserController)</span></span> GetUserInfo(c *gin.Context) &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;捕获异常&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	cid := c.Param(<span class="string">&quot;cid&quot;</span>)</span><br><span class="line">	id, err := strconv.Atoi(cid)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	user, _ := model.GetUserTest(id)</span><br><span class="line">	ReturnSuccess(c, <span class="number">0</span>, <span class="string">&quot;success&quot;</span>, user, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义数据库模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id   <span class="type">int</span></span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DB = config.Db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserTest</span><span class="params">(id <span class="type">int</span>)</span></span> (User, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	err := DB.Where(<span class="string">&quot;id=?&quot;</span>, id).First(&amp;user).Error</span><br><span class="line">	<span class="keyword">return</span> user, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>且测试前，数据库需要建立好测试表</p>
<img src="/2024/04/01/Gin_note/image-20240330175545744.png" alt="image-20240330175545744" style="zoom: 80%;">

<p>最终结果：</p>
<img src="/2024/04/01/Gin_note/image-20240330175639344.png" alt="image-20240330175639344" style="zoom: 80%;">

<p>ok 完成，这下项目基本结构就搭建好了</p>
<h3 id="基础-crud"><a href="#基础-crud" class="headerlink" title="基础 crud"></a>基础 crud</h3><p>这个讲道理没啥好说的，官方文档写的蛮清晰的</p>
<p>贴点样例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserTest</span><span class="params">(id <span class="type">int</span>)</span></span> (User, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	err := DB.Where(<span class="string">&quot;id=?&quot;</span>, id).First(&amp;user).Error</span><br><span class="line">	<span class="keyword">return</span> user, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(id <span class="type">int</span>, name <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	user := User&#123;Id: id, Name: name&#125;</span><br><span class="line">	err := DB.Create(&amp;user).Error</span><br><span class="line">	<span class="keyword">return</span> user.Id, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EditUser</span><span class="params">(id <span class="type">int</span>, name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	user := User&#123;</span><br><span class="line">		Id:   id,</span><br><span class="line">		Name: name,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//传对象修改</span></span><br><span class="line">    DB.Model(&amp;User&#123;&#125;).Updates(&amp;user)</span><br><span class="line">	<span class="comment">//修改单独的列</span></span><br><span class="line">	<span class="comment">//DB.Model(&amp;User&#123;&#125;).Where(&quot;id=?&quot;, id).Update(&quot;name&quot;, name)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Delete</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	DB.Delete(&amp;User&#123;&#125;, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="登录功能（附带使用-redis-存取-session）"><a href="#登录功能（附带使用-redis-存取-session）" class="headerlink" title="登录功能（附带使用 redis 存取 session）"></a>登录功能（附带使用 redis 存取 session）</h3><p><code>Redis</code>部署进项目</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;gin-Minato/config&quot;</span></span><br><span class="line">	<span class="string">&quot;gin-Minato/controller&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line">	session_redis <span class="string">&quot;github.com/gin-contrib/sessions/redis&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Router</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//配置redis</span></span><br><span class="line">	store, _ := session_redis.NewStore(<span class="number">10</span>, <span class="string">&quot;tcp&quot;</span>, config.RedisAddress, <span class="string">&quot;&quot;</span>, []<span class="type">byte</span>(<span class="string">&quot;secret&quot;</span>))</span><br><span class="line">	r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line">	user := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		user.POST(<span class="string">&quot;/login&quot;</span>, controller.UserController&#123;&#125;.Login)</span><br><span class="line">		user.POST(<span class="string">&quot;/register&quot;</span>, controller.UserController&#123;&#125;.Register)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>redis.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	RedisAddress = <span class="string">&quot;localhost:6379&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>controller/user.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UserController)</span></span> Login(c *gin.Context) &#123;</span><br><span class="line">	username := c.DefaultPostForm(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	password := c.DefaultPostForm(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> username == <span class="string">&quot;&quot;</span> || password == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		ReturnFalse(c, <span class="number">4001</span>, <span class="string">&quot;请输入账号和密码&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	user, err := model.GetUserInfoByUsername(username)</span><br><span class="line">	<span class="keyword">if</span> user.Id == <span class="number">0</span> &#123;</span><br><span class="line">		ReturnFalse(c, <span class="number">4002</span>, <span class="string">&quot;用户名或密码不正确&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> user.Password != EncryMd5(password) &#123;</span><br><span class="line">		ReturnFalse(c, <span class="number">4002</span>, <span class="string">&quot;用户名或密码不正确&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	session := sessions.Default(c)</span><br><span class="line">	session.set(<span class="string">&quot;login&quot;</span>+strconv.Itoa(user.Id), user.Id)</span><br><span class="line">	session.Save()</span><br><span class="line">	data := UserApi&#123;Id: user.id, Username: user.Username&#125;</span><br><span class="line">	ReturnSuccess(c, <span class="number">0</span>, <span class="string">&quot;登陆成功&quot;</span>, data, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JWT-go"><a href="#JWT-go" class="headerlink" title="JWT-go"></a>JWT-go</h2><p>可以限制令牌持有者能访问的资源</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/joho/godotenv/autoload&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弄个简单一点的token</span></span><br><span class="line"><span class="keyword">type</span> Konoha <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username <span class="type">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">	jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从env文件中读取密钥</span></span><br><span class="line"><span class="keyword">var</span> salt = os.Getenv(<span class="string">&quot;salt&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> mySignkey = []<span class="type">byte</span>(salt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Tokencreate</span><span class="params">(username <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	c := Konoha&#123;</span><br><span class="line">		Username: username,</span><br><span class="line">		StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">			NotBefore: time.Now().Unix() - <span class="number">60</span>,</span><br><span class="line">			<span class="comment">//设置过期时间在5秒后</span></span><br><span class="line">			ExpiresAt: time.Now().Unix() + <span class="number">5</span>,</span><br><span class="line">			Issuer:    <span class="string">&quot;Minato&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	token := jwt.NewWithClaims(jwt.SigningMethodHS256, c)</span><br><span class="line">	tokenString, err := token.SignedString(mySignkey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;token加密出错&quot;</span>, err.Error)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(tokenString)</span><br><span class="line">	<span class="keyword">return</span> tokenString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	token, err := jwt.ParseWithClaims(tokenString, &amp;Konoha&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> mySignkey, <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(token.Claims.(*Konoha))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//制作token</span></span><br><span class="line">	s := Tokencreate(<span class="string">&quot;minato&quot;</span>)</span><br><span class="line">    <span class="comment">//等token过期</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;等六秒&quot;</span>)</span><br><span class="line">	time.Sleep(<span class="number">6</span> * time.Second)</span><br><span class="line">	ParseToken(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1pbmF0byIsImV4cCI6MTcxMjAzNDY5NywiaXNzIjoiTWluYXRvIiwibmJmIjoxNzEyMDM0NjMyfQ.rUsDMCOgP4-Tvq09UO0YWXVcfaetFtqhWejSszb2DCc</span><br><span class="line">等六秒</span><br><span class="line">token is expired by 1s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将它写成中间件的形式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;gin-Minato/controller&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/joho/godotenv/autoload&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弄个简单一点的token</span></span><br><span class="line"><span class="keyword">type</span> Konoha <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username <span class="type">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">	jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从env文件中读取密钥</span></span><br><span class="line"><span class="keyword">var</span> salt = os.Getenv(<span class="string">&quot;salt&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> mySignkey = []<span class="type">byte</span>(salt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Tokencreate</span><span class="params">(username <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	c := Konoha&#123;</span><br><span class="line">		Username: username,</span><br><span class="line">		StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">			NotBefore: time.Now().Unix() - <span class="number">60</span>,</span><br><span class="line">			<span class="comment">//设置过期时间在60秒后</span></span><br><span class="line">			ExpiresAt: time.Now().Unix() + <span class="number">60</span>,</span><br><span class="line">			Issuer:    <span class="string">&quot;Minato&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	token := jwt.NewWithClaims(jwt.SigningMethodHS256, c)</span><br><span class="line">	konohaToken, err := token.SignedString(mySignkey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;token加密出错&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(konohaToken)</span><br><span class="line">	<span class="keyword">return</span> konohaToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------在这呢，中间件解析token------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(konohaToken <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	token, err := jwt.ParseWithClaims(konohaToken, &amp;Konoha&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> mySignkey, <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err.Error())</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;1001&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !token.Valid &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;token无效&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;1002&quot;</span> <span class="comment">// 返回无效token的错误码</span></span><br><span class="line">	&#125;</span><br><span class="line">	claims, ok := token.Claims.(*Konoha)</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;token claims类型错误&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;1003&quot;</span> <span class="comment">// 返回token claims类型错误的错误码</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> claims.Username != <span class="string">&quot;Minato&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;1004&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;200&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JWTAuth</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		tokenStr := c.Request.Header.Get(<span class="string">&quot;konohaToken&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> tokenStr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			controller.ReturnFalse(c, <span class="number">1000</span>, <span class="string">&quot;token缺失&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		status := ParseToken(tokenStr)</span><br><span class="line">		<span class="keyword">switch</span> status &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;1000&quot;</span>:</span><br><span class="line">			controller.ReturnFalse(c, <span class="number">1001</span>, <span class="string">&quot;token过期&quot;</span>)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;1001&quot;</span>:</span><br><span class="line">			controller.ReturnFalse(c, <span class="number">1002</span>, <span class="string">&quot;token签发人不正确&quot;</span>)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;1002&quot;</span>:</span><br><span class="line">			controller.ReturnFalse(c, <span class="number">1003</span>, <span class="string">&quot;token claims类型错误&quot;</span>)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;1003&quot;</span>:</span><br><span class="line">			controller.ReturnFalse(c, <span class="number">1004</span>, <span class="string">&quot;token无效&quot;</span>)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;200&quot;</span>:</span><br><span class="line">			<span class="comment">// token验证通过</span></span><br><span class="line">			fmt.Println(<span class="number">200</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="comment">// 处理其他未知错误</span></span><br><span class="line">			controller.ReturnFalse(c, <span class="number">1999</span>, <span class="string">&quot;未知错误&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="跨域请求-CORS"><a href="#跨域请求-CORS" class="headerlink" title="跨域请求 CORS"></a>跨域请求 CORS</h2><p>安装 CORS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go get github.com/gin-contrib/cors</span><br></pre></td></tr></table></figure>

<p><code>main.go</code>中进行配置</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-contrib/cors&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用 CORS 中间件，默认配置，谁都能访问</span></span><br><span class="line">	r.Use(cors.Default())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用CORS中间件，并只允许来自5173端口的请求（和上面不能同时出现）</span></span><br><span class="line">    router.Use(cors.New(cors.Config&#123;</span><br><span class="line">        AllowOrigins:     []<span class="type">string</span>&#123;<span class="string">&quot;http://localhost:5173&quot;</span>&#125;,</span><br><span class="line">        AllowMethods:     []<span class="type">string</span>&#123;<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>&#125;,</span><br><span class="line">        AllowHeaders:     []<span class="type">string</span>&#123;<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>&#125;,</span><br><span class="line">        ExposeHeaders:    []<span class="type">string</span>&#123;<span class="string">&quot;Content-Length&quot;</span>&#125;,</span><br><span class="line">        AllowCredentials: <span class="literal">true</span>,</span><br><span class="line">        MaxAge:           <span class="number">12</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">	<span class="comment">// 其他路由处理逻辑</span></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">	r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Gin</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 3.0 笔记</title>
    <url>/2024/03/17/Vue3_note/</url>
    <content><![CDATA[<p>​	Vue3.0的入门笔记，特色的compositionAPI写法，可读性和可维护性得到了大幅的提升，再加上各种组件库的支持，文档齐全，非常便于使用。</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2024-01-05 09:00</li>
<li>updateTime: 2024-03-17 23:39</li>
</ul>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为我是先前并没有接触Vue3，因此这份笔记很基础很基础，尽量都写成傻瓜式的了，当然也有可能有些地方写的不是很清楚，毕竟最初的目的就是为了写给我自己看的，至于之后会不会再深入学习Typescript和Javascript，这谁又晓得呢？反正我修燃气用是不上这个。</p>
<h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><p>课程链接：【尚硅谷Vue3入门到实战，最新版vue3+TypeScript前端开发教程】 <a href="https://www.bilibili.com/video/BV1Za4y1r7KE/?share_source=copy_web&vd_source=d4c8e690ada3240d323ff6b395a76451">https://www.bilibili.com/video/BV1Za4y1r7KE/?share_source=copy_web&amp;vd_source=d4c8e690ada3240d323ff6b395a76451</a></p>
<h2 id="Vue3简介"><a href="#Vue3简介" class="headerlink" title="Vue3简介"></a>Vue3简介</h2><p>Vue3，截止至2023年10月，最新公开版本为3.3.4</p>
<h2 id="Vue创建工程"><a href="#Vue创建工程" class="headerlink" title="Vue创建工程"></a>Vue创建工程</h2><h3 id="基于vite创建"><a href="#基于vite创建" class="headerlink" title="基于vite创建"></a>基于vite创建</h3><p>新的前端构建工具，特点如下：</p>
<blockquote>
<ul>
<li>热重载</li>
<li>对<code>TS</code>、<code>JSX</code>、<code>CSS</code>支持开箱即用</li>
<li>按需编译</li>
</ul>
</blockquote>
<p>webpack与vite构建对比图如下：</p>
<img src="/2024/03/17/Vue3_note/image-20240105103235439.png" alt="image-20240105103235439">

<p>终端创建指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure>

<p><img src="/2024/03/17/Vue3_note/image-20240423215020646.png" alt="image-20240423215020646"></p>
<p><img src="/2024/03/17/Vue3_note/image-20240105104452696.png" alt="image-20240105104452696"></p>
<h3 id="工作目录介绍"><a href="#工作目录介绍" class="headerlink" title="工作目录介绍"></a>工作目录介绍</h3><ul>
<li>&#x2F;<strong>public</strong><br>  用于存放网页顶端的图标</li>
</ul>
<p><img src="/2024/03/17/Vue3_note/image-20240105104835729.png" alt="image-20240105104835729"></p>
<ul>
<li><p>&#x2F;<strong>src</strong><br>  工作目录</p>
</li>
<li><p>&#x2F;<strong>node_modules</strong></p>
<p>  执行<code>npm i</code>，下载依赖，会生成<code>node_modules</code>这个文件夹<br>  作用：写了前端常用文件（如.jpg,.txt）等等，再通过<code>env.d.ts</code>中的以下代码告诉Vue</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>&#x2F;index.html</strong><br>  入口文件</p>
</li>
<li><p>&#x2F;<strong>package.json</strong><br>  包的声明文件</p>
</li>
<li><p>&#x2F;<strong>vite.config.ts</strong><br>  工程的配置文件，配置插件等等</p>
</li>
<li><p><strong>&#x2F;src&#x2F;components</strong><br>  用于存放组件</p>
</li>
</ul>
<p><img src="/2024/03/17/Vue3_note/image-20240105120758018.png" alt="image-20240105120758018"></p>
<h2 id="编写一个App组件"><a href="#编写一个App组件" class="headerlink" title="编写一个App组件"></a>编写一个App组件</h2><p>在main.ts中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>createApp</code>:一个用于“造花盆”的方法</p>
<p><code>App</code>：从<code>App.vue</code>中引用，是一个根组件，可以看作是一朵花，包括之后写的<code>A.vue</code>、<code>B.vue</code>，其实都是安装在根组件上的组件，类似“花上的叶子”，它们直接或间接下载在<code>App.vue</code>上</p>
<p><code>createApp(App).mount(&#39;#app&#39;)</code>：将app传入<code>createApp()</code>中，创建一个名叫App的互联网应用，并且它的根组件叫<code>App</code>；<code>mount</code>：挂载，将App摆在名为app的容器中。</p>
<p>vue组件中，包含以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;hl&gt;你好&lt;/hl&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">//  JS或者TS</span><br><span class="line">export default&#123;</span><br><span class="line">    name:&#x27;App&#x27; //组件名</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 样式 */</span><br><span class="line">.app&#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>之后运行 <code>npm run dev</code>，<code>在 Local:   http://localhost:5173/</code>中查看</p>
<p><img src="/2024/03/17/Vue3_note/image-20240105155229131.png" alt="image-20240105155229131"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><code>vite</code>项目中，<code>index.html</code>是项目的入口文件，在项目最外层</li>
<li>加载<code>index.html</code>后，<code>vite</code>会解析<code>&lt;script type=&quot;module&quot; src=&quot;/src/main.ts&quot;&gt;&lt;/script&gt;</code>指向的js</li>
<li>vue3是通过createApp的函数创建一个应用实例</li>
</ul>
<h2 id="OptionAPI"><a href="#OptionAPI" class="headerlink" title="OptionAPI"></a>OptionAPI</h2><p>这是Vue2的语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue2 写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名:&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>修改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAge&quot;</span>&gt;</span>修改年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showTel&quot;</span>&gt;</span>联系方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Person&#x27;</span>,<span class="comment">//组件名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tel</span>: <span class="string">&#x27;18019328622&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showTel</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">tel</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">age</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在’枝干组件’<code>App.vue</code>中导入并引用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Person</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Person.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,<span class="comment">//组件名</span></span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">Person</span> &#125;<span class="comment">//注册组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hl</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">hl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Person</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/2024/03/17/Vue3_note/image-20240108173531398.png" alt="image-20240108173531398"></p>
<h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>optionAPI的语法弊端不难看出，数据、方法、计算属性都是分散在data、methods、computed中，想要新增功能就需要对上述进行修改，这显然是不便于维护和复用的。</p>
<h2 id="compositionAPI"><a href="#compositionAPI" class="headerlink" title="compositionAPI"></a>compositionAPI</h2><h3 id="setup概述"><a href="#setup概述" class="headerlink" title="setup概述"></a>setup概述</h3><p>与optionalAPI不同，compositionAPI将组件的数据、方法、计算属性集中在一个名为setup()的方法中，写法如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Person&#x27;</span>,<span class="comment">//组件名</span></span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//setup中的this是undefined，vue3中已经开始弱化this了</span></span><br><span class="line">        <span class="comment">//数据</span></span><br><span class="line">        <span class="comment">//此时的name，age，tel不是响应式的</span></span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line">        <span class="keyword">let</span> tel = <span class="string">&#x27;18019328622&#x27;</span></span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            name = <span class="string">&#x27;李四&#x27;</span>  <span class="comment">//name确实修改了，但不是响应式的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">            age += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">showTel</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(tel)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//必须要给予一个返回值，否则外部接收不到这些数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123; name, age, changeName, changeAge, showTel &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>值得一提的是，vue2中的选项式语法和vue3中的新语法是可以同时出现的，并且由于setup的执行优先级高于optionalAPI中的内容，这导致optinalAPI中的内容可以访问到setup中的数据变量，但setup不能访问到optionalAPI中的数据变量，用例如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Person&#x27;</span>,<span class="comment">//组件名</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">a</span>: <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//setup中的this是undefined，vue3中已经开始弱化this了</span></span><br><span class="line">        <span class="comment">//数据</span></span><br><span class="line">        <span class="comment">//此时的name，age，tel不是响应式的</span></span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line">        <span class="keyword">let</span> tel = <span class="string">&#x27;18019328622&#x27;</span></span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            name = <span class="string">&#x27;李四&#x27;</span>  <span class="comment">//name确实修改了，但不是响应式的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">            age += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">showTel</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(tel)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; name, age, changeName, changeAge, showTel &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/03/17/Vue3_note/image-20240108233851273.png" alt="image-20240108233851273"></p>
<h3 id="setup的语法糖"><a href="#setup的语法糖" class="headerlink" title="setup的语法糖"></a>setup的语法糖</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Person&#x27;</span>,<span class="comment">//组件名</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> age = <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> tel = <span class="string">&#x27;18019328622&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    name = <span class="string">&#x27;李四&#x27;</span>  <span class="comment">//name确实修改了，但不是响应式的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    age += <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">showTel</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(tel)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>像这样编写可以不用写setup的返回值</p>
<h4 id="插件配置方法"><a href="#插件配置方法" class="headerlink" title="插件配置方法"></a>插件配置方法</h4><p>如果想将上述合二为一，可以下载插件，指令 <code>npm i vite-plugin-vue-setup-extend -D</code></p>
<p>在<code>vite.config.ts</code>中进行配置插件，<strong>其他插件方法也是类似</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> <span class="title class_">VueSetupExtend</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">VueSetupExtend</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后对上述两个script合二为一</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup name=<span class="string">&quot;Person123&quot;</span>&gt;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> tel = <span class="string">&#x27;18019328622&#x27;</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    name = <span class="string">&#x27;李四&#x27;</span>  <span class="comment">//name确实修改了，但不是响应式的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    age += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showTel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(tel)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/2024/03/17/Vue3_note/image-20240109132721613.png" alt="image-20240109132721613"></p>
<h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><p>响应式:能够实时变化的数据</p>
<h3 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//包裹</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>)</span><br><span class="line"><span class="keyword">let</span> tel = <span class="string">&#x27;18019328622&#x27;</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    age.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showTel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(tel)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>觉得频繁写.value很麻烦？不妨试试volar</p>
<img src="/2024/03/17/Vue3_note/image-20240128222423403.png" align="left">
</blockquote>
<h3 id="响应式对象"><a href="#响应式对象" class="headerlink" title="响应式对象"></a>响应式对象</h3><p>响应式对象:被<code>reactive</code>包裹过后的对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">    <span class="comment">//data</span></span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123; <span class="attr">brand</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;)</span><br><span class="line">    <span class="keyword">let</span> games = <span class="title function_">reactive</span>([</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;0000001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;AAA1&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;0000001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;AAA1&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;0000001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;AAA1&#x27;</span>&#125;</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">let</span> obj =<span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">a</span>:&#123;</span><br><span class="line">            <span class="attr">b</span>:&#123;</span><br><span class="line">                <span class="attr">c</span>:<span class="number">666</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changePrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">        car.<span class="property">price</span> +=<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        games[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;BBB1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeObj</span>(<span class="params"></span>)&#123;</span><br><span class="line">        obj.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span> = <span class="number">999</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用ref定义对象类型的响应数据"><a href="#使用ref定义对象类型的响应数据" class="headerlink" title="使用ref定义对象类型的响应数据"></a>使用ref定义对象类型的响应数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//data</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="title function_">ref</span>(&#123; <span class="attr">brand</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;)</span><br><span class="line"><span class="keyword">let</span> games = <span class="title function_">ref</span>([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;0000001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;AAA1&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;0000001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;AAA1&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;0000001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;AAA1&#x27;</span> &#125;</span><br><span class="line">])</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changePrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    car.<span class="property">value</span>.<span class="property">price</span> += <span class="number">10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">value</span>.<span class="property">price</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    games.<span class="property">value</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;BBB1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2024/03/17/Vue3_note/image-20240128220343854.png" alt="image-20240128220343854"></p>
<p>可以看出表面是<code>ref</code>包裹的对象，但是实际还是使用<code>reactive</code>包裹实现的</p>
<h3 id="ref和reactive的区别"><a href="#ref和reactive的区别" class="headerlink" title="ref和reactive的区别"></a>ref和reactive的区别</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">可以定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ref</td>
<td align="center">基本类型、对象类型的响应式数据[层级不深]</td>
</tr>
<tr>
<td align="center">reactive</td>
<td align="center">可以定义：对象类型的响应式数据[层级深] <br>重新分配会丢失响应式的属性<a href="%E5%AF%B9%E5%B7%B2%E7%BB%8F%E7%94%A8%60reactive%60%E5%88%86%E9%85%8D%E5%A5%BD%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%AF%B9%E8%B1%A1%EF%BC%8C%E9%87%8D%E6%96%B0%E8%A6%86%E5%86%99%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BC%9A%E4%BD%BF%E6%96%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%A4%B1%E5%8E%BB%E5%93%8D%E5%BA%94%E5%BC%8F">^1</a></td>
</tr>
</tbody></table>
<blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//data</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="title function_">ref</span>(&#123; <span class="attr">brand</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;)</span><br><span class="line"><span class="comment">//method</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeCar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    car.<span class="property">value</span>=&#123;<span class="attr">brand</span>:<span class="string">&#x27;BYD&#x27;</span>,<span class="attr">price</span>:<span class="number">20</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时一旦使用changeCar()这个方法，那么奔驰就会被BYD覆盖并且覆盖它的BYD不具备响应式</p>
<p>可以使用Object.assign(obj1,obj2)来解决，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123; <span class="attr">brand</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;)</span><br><span class="line"><span class="comment">//method</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeCar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(car,&#123; <span class="attr">brand</span>: <span class="string">&#x27;BYD&#x27;</span>,<span class="attr">price</span>: <span class="number">20</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ref不需要这么写</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="title function_">ref</span>(&#123; <span class="attr">brand</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;)</span><br><span class="line"><span class="keyword">let</span> games = <span class="title function_">ref</span>([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;0000001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;AAA1&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;0000001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;AAA1&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;0000001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;AAA1&#x27;</span> &#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">//method</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changePrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    car.<span class="property">value</span>.<span class="property">price</span> += <span class="number">10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">value</span>.<span class="property">brand</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    games.<span class="property">value</span>[<span class="number">0</span>].<span class="property">name</span>=<span class="string">&#x27;BBB1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeCar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// Object.assign(car,&#123; brand: &#x27;BYD&#x27;,price: 20&#125;)</span></span><br><span class="line">    car.<span class="property">value</span> = &#123; <span class="attr">brand</span>: <span class="string">&#x27;BYD&#x27;</span>,<span class="attr">price</span>: <span class="number">20</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因是ref的对象覆盖是发生在car.value上的</p>
</blockquote>
<h3 id="toRefs和toRef"><a href="#toRefs和toRef" class="headerlink" title="toRefs和toRef"></a>toRefs和toRef</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref,reactive,toRefs,toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//data</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = <span class="title function_">toRefs</span>(person)</span><br><span class="line"><span class="keyword">let</span> age_2 = <span class="title function_">toRef</span>(person,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="comment">//method</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    name.<span class="property">value</span>+=<span class="string">&#x27;~&#x27;</span></span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">    age.<span class="property">value</span>+=<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>toRefs会接收一组由reactive构成的对象，然后把对象中的每一组key,value都拎出来，形成一个新的对象（依然具备响应式的属性）;</p>
<p>toRef只会接受由reactive构成的对象当中的一个元素</p>
<h2 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- html --&gt;</span><br><span class="line">&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;!-- 这样↓写是单向绑定 --&gt;</span><br><span class="line">    &lt;!-- 姓：&lt;input type=&quot;text&quot; :value=&quot;firstName&quot;&gt;&lt;br&gt;  --&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;br&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123; fullName &#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFullName&quot;&gt;修改全名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">    import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">    let firstName = ref(&#x27;张&#x27;)</span><br><span class="line">    let lastName = ref(&#x27;三&#x27;)</span><br><span class="line">    //如此定义的计算属性是只读的</span><br><span class="line">    // let fullName = computed(()=&gt;&#123;</span><br><span class="line">    //     return firstName.value.slice(0,1).toUpperCase()+firstName.value.slice(1)+&#x27;-&#x27;+lastName.value.slice(0,1).toUpperCase()+lastName.value.slice(1)</span><br><span class="line">    // &#125;)</span><br><span class="line">    //如此定义的计算属性可读可写</span><br><span class="line">    let fullName = computed(&#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            return firstName.value.slice(0, 1).toUpperCase() + firstName.value.slice(1) + &#x27;-&#x27; + lastName.value.slice(0, 1).toUpperCase() + lastName.value.slice(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        set(val) &#123;</span><br><span class="line">            const [str1, str2] = val.split(&#x27;-&#x27;)</span><br><span class="line">            firstName.value = str1</span><br><span class="line">            lastName.value = str2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //method</span><br><span class="line">    function changeFullName() &#123;</span><br><span class="line">        fullName.value = &#x27;li-si&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码段<code>let fullName = computed(&#123;//略&#125;)</code>相比于function(){ }，具备了缓存，只有计算属性依赖的数据发生变化时才会重新计算，数据不变即便是重复调用也不会反复执行computed中的内容;</p>
<h2 id="Watch监视"><a href="#Watch监视" class="headerlink" title="Watch监视"></a>Watch监视</h2><p>watch基本格式：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">import &#123; watch &#125; from &#x27;vue&#x27;</span><br><span class="line">watch(obj,func,config) //(被监视的数据，监视的回调，监视的配置)</span><br></pre></td></tr></table></figure>

<p>它能够监视：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">一个有返回值的函数，ref，reactive响应式对象，或者由以上组成的数组</span><br></pre></td></tr></table></figure>

<h3 id="监视【ref】定义的【基本类型】数据"><a href="#监视【ref】定义的【基本类型】数据" class="headerlink" title="监视【ref】定义的【基本类型】数据"></a>监视【ref】定义的【基本类型】数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h1&gt;情况一，监视[ref]定义的[基本类型]数据&lt;/h1&gt;</span><br><span class="line">       &lt;h2&gt;当前求和为:&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">       &lt;button @click=&quot;changeNum&quot;&gt;sum++&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">//data</span><br><span class="line">let sum = ref(0);</span><br><span class="line">//method</span><br><span class="line">function changeNum()&#123;</span><br><span class="line">    sum.value+=1;</span><br><span class="line">&#125;</span><br><span class="line">watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>关于停止监视以及箭头函数的补充：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stopWatch =<span class="title function_">watch</span>(sum,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">    <span class="keyword">if</span> (newValue&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="title function_">stopWatch</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>箭头函数就是<strong>不需要</strong>返回值(但是可以有)的function</p>
<h3 id="监视【ref】定义的【对象类型】数据"><a href="#监视【ref】定义的【对象类型】数据" class="headerlink" title="监视【ref】定义的【对象类型】数据"></a>监视【ref】定义的【对象类型】数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h1&gt;情况二，监视[ref]定义的[对象类型]数据&lt;/h1&gt;</span><br><span class="line">       &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">       &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">       &lt;br&gt;</span><br><span class="line">       &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">       &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">       &lt;button @click=&quot;changePerson&quot;&gt;修改人&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">//data</span><br><span class="line">let person =ref(&#123;</span><br><span class="line">    name:&quot;张三&quot;,</span><br><span class="line">    age:18,</span><br><span class="line">&#125;)</span><br><span class="line">//method</span><br><span class="line">function changeName()&#123;</span><br><span class="line">    person.value.name+=&quot;~&quot;</span><br><span class="line">&#125;</span><br><span class="line">function changeAge()&#123;</span><br><span class="line">    person.value.age+=1</span><br><span class="line">&#125;</span><br><span class="line">function changePerson()&#123;</span><br><span class="line">    person.value=&#123;name:&quot;李四&quot;,age:22&#125;</span><br><span class="line">&#125;</span><br><span class="line">//watch</span><br><span class="line">watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如上，但是和监视基础类型相比，代码变化不大</p>
<p>注意到，ref的替换对象是新旧替换，地址发生变化</p>
<p><img src="/2024/03/17/Vue3_note/image-20240201213743914.png" alt="image-20240201213743914"></p>
<h3 id="监视【reactive】定义的【对象类型】数据"><a href="#监视【reactive】定义的【对象类型】数据" class="headerlink" title="监视【reactive】定义的【对象类型】数据"></a>监视【reactive】定义的【对象类型】数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h1&gt;情况三，监视[reactive]定义的[对象类型]数据&lt;/h1&gt;</span><br><span class="line">       &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">       &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">       &lt;br&gt;</span><br><span class="line">       &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">       &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">       &lt;button @click=&quot;changePerson&quot;&gt;修改人&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123; reactive, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">//data</span><br><span class="line">let person =reactive(&#123;</span><br><span class="line">    name:&quot;张三&quot;,</span><br><span class="line">    age:18,</span><br><span class="line">&#125;)</span><br><span class="line">//method</span><br><span class="line">function changeName()&#123;</span><br><span class="line">    person.name+=&quot;~&quot;</span><br><span class="line">&#125;</span><br><span class="line">function changeAge()&#123;</span><br><span class="line">    person.age+=1</span><br><span class="line">&#125;</span><br><span class="line">function changePerson()&#123;</span><br><span class="line">    Object.assign(person,&#123;name:&quot;李四&quot;,age:22&#125;)</span><br><span class="line">&#125;</span><br><span class="line">//watch</span><br><span class="line">//监视reactive定义的对象，会默认开启深度监视，且无法手动关闭</span><br><span class="line">watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/2024/03/17/Vue3_note/image-20240201212634644.png" alt="image-20240201212634644"></p>
<p>可以注意到reactive替换对象是值覆盖，地址没有发生变化</p>
<h3 id="监视【ref】或【reactive】定义的对象当中的属性"><a href="#监视【ref】或【reactive】定义的对象当中的属性" class="headerlink" title="监视【ref】或【reactive】定义的对象当中的属性"></a>监视【ref】或【reactive】定义的对象当中的属性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h1&gt;情况四，监视[ref,reactive]定义的[对象类型]数据中的某个属性&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;姓名:&#123;&#123; person.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;年龄:&#123;&#123; person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;汽车:&#123;&#123; person.car.c1&#125;&#125;\&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;changeCar1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;changeCar2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;changeCar&quot;&gt;修改全部车&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">//data</span><br><span class="line">let person  =reactive(&#123;</span><br><span class="line">    name:&quot;张三&quot;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">        c1:&quot;奔驰&quot;,</span><br><span class="line">        c2:&quot;宝马&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//method</span><br><span class="line">function changeName()&#123;</span><br><span class="line">    person.name+=&#x27;~&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function changeAge()&#123;</span><br><span class="line">    person.age+=1</span><br><span class="line">&#125;</span><br><span class="line">function changeCar1()&#123;</span><br><span class="line">    person.car.c1=&#x27;雅迪&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function changeCar2()&#123;</span><br><span class="line">    person.car.c2=&#x27;爱玛&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function changeCar()&#123;</span><br><span class="line">    person.car=&#123;c1:&#x27;五菱&#x27;,c2:&#x27;BYD&#x27;&#125;</span><br><span class="line">&#125;</span><br><span class="line">//watch</span><br><span class="line">watch (()=&gt;&#123;return person.name&#125;,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;)</span><br><span class="line">watch (()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>监视基本类型数据的时候，需要将其写成函数式；</p>
<p>监视对象类型的时候，<strong>最好</strong>将其写成函数式（可以不写，但是有局限性）</p>
<h3 id="监视上述多个数据"><a href="#监视上述多个数据" class="headerlink" title="监视上述多个数据"></a>监视上述多个数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">watch ([<span class="function">()=&gt;</span>person.<span class="property">name</span>,person.<span class="property">car</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.car变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>拿个数组包起来就行，数组里面不一定一定要是程式，也可以是对象，看需求</p>
<h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><p>watchEffect可以自动执行监听，不需要指出监听对象</p>
<p>而watch需要指明监听对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(person.<span class="property">age</span>&gt;=<span class="number">20</span>||其他条件)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发送请求&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="ref的标签属性"><a href="#ref的标签属性" class="headerlink" title="ref的标签属性"></a>ref的标签属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">Person.vue </span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h1&gt;标签的ref属性&lt;/h1&gt;</span><br><span class="line">        &lt;h2 ref=&quot;title2&quot;&gt;北京&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showlog&quot;&gt;点我输出&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">//data</span><br><span class="line">let title2 = ref()</span><br><span class="line">let a = ref(0)</span><br><span class="line">let b = ref(1)</span><br><span class="line">let c = ref(2)</span><br><span class="line">//method</span><br><span class="line">function showlog()&#123;</span><br><span class="line">    console.log(title2.value)</span><br><span class="line">&#125;</span><br><span class="line">defineExpose(&#123;a,b&#125;)//穿过保护性机制让外界可以看到</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">App.vue </span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;showlog&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">        &lt;Person ref =&quot;ren&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">//  JS或者TS</span><br><span class="line">import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">//data</span><br><span class="line">let ren = ref()</span><br><span class="line">//method</span><br><span class="line">function showlog()&#123;</span><br><span class="line">    console.log(ren.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>点击测试按钮，会输出<code>Person</code>的组件对象，如果没有<code>defineExpose()</code>那么输出的组件对象里是看不到<code>Person</code>组件中定义的a，b，c，这也是防止多人开发的时候，命名冲突。</p>
<p>ref组件输出的特点一方面是收到保护性机制（这是使用id所不具备的），另一方面也是具有响应式的特性，就是可以数据变化的时候相互传递并且快速更新。</p>
<h2 id="回顾TS中的接口和泛型"><a href="#回顾TS中的接口和泛型" class="headerlink" title="回顾TS中的接口和泛型"></a>回顾TS中的接口和泛型</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//types/index.ts</span></span><br><span class="line"><span class="comment">//定义一个接口用于限制person对象的具体属性</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">PersonInter</span>&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Personouter</span>&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Persons</span> =<span class="title class_">PersonInter</span>[]</span><br></pre></td></tr></table></figure>

<p>可以用它来约束变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Person.vue --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123; type PersonInter, type Persons &#125; from &#x27;@/types&#x27;</span><br><span class="line">let person: Persons|PersonInter = [</span><br><span class="line">    &#123; id: &#x27;123&#x27;, name: &quot;zhangsan&quot;, age: 60 &#125;,</span><br><span class="line">    &#123; id: &#x27;123&#x27;, name: &quot;zhangsan&quot;, age: 60 &#125;,</span><br><span class="line">]</span><br><span class="line">let person2: Persons|PersonInter|Personouter = </span><br><span class="line">    &#123; id: &#x27;123&#x27;, name: &quot;zhangsan&quot;, age: 60 &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="props的使用"><a href="#props的使用" class="headerlink" title="props的使用"></a>props的使用</h2><p>简而言之就是<strong>爸爸给儿子传话</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">	&lt;!-- 爸爸给儿子传参 --&gt;</span><br><span class="line">    &lt;Person  a=&quot;hello&quot; :list = &quot;person&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">//  JS或者TS</span><br><span class="line">import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">import &#123; type PersonInter, type Personouter, type Persons &#125; from &#x27;@/types&#x27;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">let person: Persons | PersonInter = [</span><br><span class="line">    &#123; id: &#x27;123&#x27;, name: &quot;zhangsan&quot;, age: 60 &#125;,</span><br><span class="line">    &#123; id: &#x27;123&#x27;, name: &quot;zhangsan&quot;, age: 60 &#125;,</span><br><span class="line">]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Person.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;!-- v-for遍历 --&gt;</span><br><span class="line">            &lt;li v-for=&quot;personObj in list&quot; :key=&quot;personObj.id&quot;&gt;</span><br><span class="line">                &#123;&#123; personObj.name &#125;&#125; -- &#123;&#123; personObj.age &#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123; defineProps, withDefaults &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; type Persons &#125; from &#x27;@/types&#x27;;</span><br><span class="line">//接收</span><br><span class="line">// defineProps([&#x27;a&#x27;, &#x27;list&#x27;])</span><br><span class="line"></span><br><span class="line">//接收a，同时将props保存起来</span><br><span class="line">// let x = defineProps([&#x27;a&#x27;])</span><br><span class="line">// console.log(x.a)</span><br><span class="line"></span><br><span class="line">//接收加限制类型</span><br><span class="line">// defineProps&lt;&#123; list: Persons &#125;&gt;()</span><br><span class="line"></span><br><span class="line">//接收list+限制类悉尼港+限制必要性+指定默认值</span><br><span class="line">//withDefaults(defineProps(),&#123;&#125;)</span><br><span class="line">withDefaults(defineProps&lt;&#123; list?: Persons &#125;&gt;(), &#123;//第二个参数只接收函数返回值类型</span><br><span class="line">    list: () =&gt; [</span><br><span class="line">        &#123; id: &#x27;123&#x27;, name: &quot;zhangsan&quot;, age: 60 &#125;,</span><br><span class="line">        &#123; id: &#x27;123&#x27;, name: &quot;zhangsan&quot;, age: 60 &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/2024/03/17/Vue3_note/image-20240310184451213.png" alt="image-20240310184451213"></p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>组件的生命周期</p>
<blockquote>
<ul>
<li><strong>时刻</strong>[调用特定的函数]</li>
<li><strong>创建</strong>[setup自动执行]</li>
<li><strong>挂载</strong>[挂载前<code>onBeforeMount()</code>，挂载完毕<code>onMounted(</code>)]</li>
<li><strong>更新</strong>[更新前<code>onBeforeUpdate()</code>，更新完毕<code>onUpdated()</code>]</li>
<li><strong>卸载</strong>[销毁前<code>onBeforeUnmount()</code>，销毁完毕<code>onUnmounted()</code>]</li>
</ul>
</blockquote>
<p>生命周期、生命周期函数、生命周期钩子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Person.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;ul&gt;&#123;&#123; sum &#125;&#125;&lt;/ul&gt;</span><br><span class="line">        &lt;button @click=&quot;add&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- Person.vue --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import &#123; onBeforeMount, onBeforeUnmount, onBeforeUpdate, onMounted, onUnmounted, onUpdated, ref &#125; from &quot;vue&quot;</span><br><span class="line">let sum = ref(0)</span><br><span class="line">function add() &#123;</span><br><span class="line">    sum.value = sum.value + 1</span><br><span class="line">&#125;</span><br><span class="line">//创建</span><br><span class="line">console.log(&#x27;创建&#x27;)</span><br><span class="line">//挂载</span><br><span class="line">onBeforeMount(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;挂载前&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">//挂载完毕</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;挂载完毕&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">//更新前</span><br><span class="line">onBeforeUpdate(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;更新前&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">//更新完毕</span><br><span class="line">onUpdated(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;更新完毕&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">// 卸载</span><br><span class="line">onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">    console.log(&quot;卸载前&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">//卸载完毕</span><br><span class="line">onUnmounted(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;卸载完毕&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>生命周期流程图[来自官网]</p>
<img src="/2024/03/17/Vue3_note/lifecycle_zh-CN.FtDDVyNA.png" alt="组件生命周期图示" style="zoom:50%;">

<h2 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装axios，非必要，只是此处样例用到了</span><br><span class="line">$ npm i axios</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Person.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;add&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;img v-for=&quot;(dog, index) in doglist&quot; :src=&quot;dog&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;getDog&quot;&gt;获取dog&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- Person.vue --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person123&quot;&gt;</span><br><span class="line">import useDog from &#x27;@/hooks/useDog&#x27;;</span><br><span class="line">import useSum from &#x27;@/hooks/useSum&#x27;;</span><br><span class="line">const &#123; sum, add &#125; = useSum()</span><br><span class="line">const &#123; doglist, getDog &#125; = useDog()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>src/hooks</code>中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//useSum.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    sum.<span class="property">value</span> = sum.<span class="property">value</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; sum, add &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//useDog.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> doglist = <span class="title function_">reactive</span>([</span><br><span class="line">    <span class="string">&quot;https://images.dog.ceo/breeds/pembroke/n02113023_4373.jpg&quot;</span>,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDog</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(</span><br><span class="line">        <span class="string">&quot;https://dog.ceo/api/breed/pembroke/images/random&quot;</span></span><br><span class="line">      );</span><br><span class="line">      doglist.<span class="title function_">push</span>(result.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//向外部提供东西</span></span><br><span class="line">  <span class="keyword">return</span> &#123; doglist, getDog &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>作用是啥？vue里看着干净些吧，俺也不知道还有没有别的用途了？</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装vue-router最新版</span><br><span class="line">$npm i vue-router</span><br></pre></td></tr></table></figure>

<p>对App.vue稍作调整</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">App.vue </span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;h2&gt;Vue路由测试&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航区 --&gt;</span><br><span class="line">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/home&quot;&gt;首页 &lt;/RouterLink&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/news&quot;&gt;新闻 &lt;/RouterLink&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/about&quot;&gt;关于 &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div class=&quot;main-content&quot; style=&quot;border: 1px solid red;height: 300px;width:300px&quot;&gt;</span><br><span class="line">        &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">import &#123; RouterView &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>配置路由配置项<code>index.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写一个路由器并暴露出去</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&quot;@/components/News.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;@/components/About.vue&quot;</span>;</span><br><span class="line"><span class="comment">//创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">//路由器工作模式,很重要👇👇👇</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     path:&#x27;路径&#x27;,</span></span><br><span class="line">    <span class="comment">//     component:组件</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>main.ts</code>中使用路由器</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入createApp用于创建应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">//引用App根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">//使用路由器</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"><span class="comment">//挂载整个应用到app容器中</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/2024/03/17/Vue3_note/image-20240314224306984.png" alt="image-20240314224306984"></p>
<p>路由组件：</p>
<p>靠路由的规则渲染出来的：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: demo</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>一般组件：</p>
<p>亲手写标签出来的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="路由器工作模式"><a href="#路由器工作模式" class="headerlink" title="路由器工作模式"></a>路由器工作模式</h3><h5 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="attr">path</span>:<span class="variable constant_">XXX</span>,</span><br><span class="line">    	<span class="attr">component</span>:<span class="variable constant_">XXX</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统<code>URL</code></p>
<p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<strong>404错误</strong></p>
<h5 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="attr">path</span>:<span class="variable constant_">XXX</span>,</span><br><span class="line">    	<span class="attr">component</span>:<span class="variable constant_">XXX</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>优点：兼容性好，因为不需要服务器端处理路径</p>
<p>缺点：<code>URL</code>带有<code>#</code>不太美观，<strong>且在<code>SEO</code>优化方面相对较差</strong></p>
<h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//     name:&#x27;路由名&#x27;</span></span><br><span class="line">  <span class="comment">//     path:&#x27;路径&#x27;,</span></span><br><span class="line">  <span class="comment">//     component:组件</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;HOME&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;NEWS&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;ABOUT&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;navigate&quot;&gt;</span><br><span class="line">    &lt;!--三种路由跳转方式 --&gt;</span><br><span class="line">    &lt;RouterLink to=&quot;/home&quot;&gt;首页 &lt;/RouterLink&gt;</span><br><span class="line">     &lt;!--注意感叹号 --&gt;</span><br><span class="line">    &lt;RouterLink :to=&quot;&#123; name: &#x27;NEWS&#x27; &#125;&quot;&gt;新闻 &lt;/RouterLink&gt;</span><br><span class="line">    &lt;RouterLink :to=&quot;&#123; path: &#x27;/about&#x27; &#125;&quot;&gt;关于 &lt;/RouterLink&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>P.S 路由页面要有<code>&lt;router-view/&gt;</code>来承载</p>
<p>子路由</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   name: &quot;路由名&quot;,</span></span><br><span class="line">  <span class="comment">//   path: &quot;/路径&quot;,</span></span><br><span class="line">  <span class="comment">//   component: 组件名,</span></span><br><span class="line">  <span class="comment">//   children: [</span></span><br><span class="line">  <span class="comment">//     &#123;</span></span><br><span class="line">  <span class="comment">//       path: &quot;子路由路径&quot;,</span></span><br><span class="line">  <span class="comment">//       component: 子路由组件名,</span></span><br><span class="line">  <span class="comment">//     &#125;,</span></span><br><span class="line">  <span class="comment">//   ],</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;NEWS&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Detail&#x27;</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="query"><a href="#query" class="headerlink" title="query"></a>query</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- News.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot;&gt;</span><br><span class="line">                &lt;RouterLink :to=&quot;`/news/detail?id=$&#123;news.id&#125;&amp;title=$&#123;news.title&#125;&amp;content=$&#123;news.content&#125;`&quot;&gt;&#123;&#123;</span><br><span class="line">                news.title &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;div class=&quot;main-content&quot; style=&quot;border: 1px solid red;height: 300px;width:300px&quot;&gt;</span><br><span class="line">            &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;News&quot;&gt;</span><br><span class="line">import &#123; RouterView &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const newsList = reactive([</span><br><span class="line">    &#123; id: &#x27;021120230&#x27;, title: &quot;基于区块链&quot;, content: &#x27;solidity&#x27; &#125;,</span><br><span class="line">    &#123; id: &#x27;021120231&#x27;, title: &quot;信息管理系统&quot;, content: &#x27;python&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;编号：&#123;&#123; route.query.id &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;标题：&#123;&#123; route.query.title &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;内容：&#123;&#123; route.query.content &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Detail&quot;&gt;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line">let route = useRoute()</span><br></pre></td></tr></table></figure>

<p>这个不好用，看看得了</p>
<p>下面是<strong>使用对象传参</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- News.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot;&gt;</span><br><span class="line">                &lt;RouterLink :to=&quot;&#123;</span><br><span class="line">                name: &#x27;Detail&#x27;,</span><br><span class="line">                query: &#123;</span><br><span class="line">                    id: news.id,</span><br><span class="line">                    title: news.title,</span><br><span class="line">                    content: news.content</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&quot;&gt;&#123;&#123; news.title &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;div class=&quot;main-content&quot; style=&quot;border: 1px solid red;height: 300px;width:300px&quot;&gt;</span><br><span class="line">            &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;News&quot;&gt;</span><br><span class="line">import &#123; RouterView &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const newsList = reactive([</span><br><span class="line">    &#123; id: &#x27;021120230&#x27;, title: &quot;基于区块链&quot;, content: &#x27;solidity&#x27; &#125;,</span><br><span class="line">    &#123; id: &#x27;021120231&#x27;, title: &quot;信息管理系统&quot;, content: &#x27;python&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- detail.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;编号：&#123;&#123; query.id &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;标题：&#123;&#123; query.title &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;内容：&#123;&#123; query.content &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Detail&quot;&gt;</span><br><span class="line">import &#123; toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line">let route = useRoute()</span><br><span class="line">// 不使用toRefs会丢失响应式</span><br><span class="line">let &#123; query &#125; = toRefs(route)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h4><p>在路由规则中占位</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;NEWS&quot;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Detail&quot;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;detail/:id/:title/:content&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- detail.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;编号：&#123;&#123; route.params.id &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;标题：&#123;&#123; route.params.title &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;内容：&#123;&#123; route.params.content &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Detail&quot;&gt;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const route = useRoute()</span><br><span class="line">console.log(route)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 样式 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- News.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;news in  newsList &quot; :key=&quot;news.id&quot;&gt;</span><br><span class="line">                &lt;!-- 第一种写法 --&gt;</span><br><span class="line">                &lt;!-- &lt;RouterLink :to=&quot;`/news/detail/$&#123;news.id&#125;/$&#123;news.title&#125;/$&#123;news.content&#125;`&quot;&gt;&#123;&#123; news.title &#125;&#125;</span><br><span class="line">                &lt;/RouterLink&gt; --&gt;</span><br><span class="line">                &lt;!-- 第二种写法 --&gt;</span><br><span class="line">                &lt;RouterLink :to=&quot;&#123;</span><br><span class="line">                name: &#x27;Detail&#x27;,</span><br><span class="line">                params: &#123;</span><br><span class="line">                    id: news.id,</span><br><span class="line">                    title: news.title,</span><br><span class="line">                    content: news.content</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; as any&quot;&gt;&#123;&#123; news.title &#125;&#125;</span><br><span class="line">                &lt;/RouterLink&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;div class=&quot;main-content&quot; style=&quot;border: 1px solid red;height: 300px;width:300px&quot;&gt;</span><br><span class="line">            &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;News&quot;&gt;</span><br><span class="line">import &#123; RouterView &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const newsList = reactive([</span><br><span class="line">    &#123; id: &#x27;021120230&#x27;, title: &quot;基于区块链&quot;, content: &#x27;solidity&#x27; &#125;,</span><br><span class="line">    &#123; id: &#x27;021120231&#x27;, title: &quot;信息管理系统&quot;, content: &#x27;python&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<p>对象参数中不可以包含数组</p>
<h3 id="路由props配置"><a href="#路由props配置" class="headerlink" title="路由props配置"></a>路由props配置</h3><p>路由规则中配置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;NEWS&quot;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Detail&quot;</span>,</span><br><span class="line">      <span class="comment">// path: &quot;detail/:id/:title/:content&quot;,//params写法</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;detail&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">      <span class="comment">// props: true, //params</span></span><br><span class="line">      <span class="comment">// query写法</span></span><br><span class="line">      <span class="title function_">props</span>(<span class="params">route</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> route.<span class="property">query</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- detail.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- html --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;编号：&#123;&#123; id &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;标题：&#123;&#123; title &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;内容：&#123;&#123; content &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Detail&quot;&gt;</span><br><span class="line">defineProps([&#x27;id&#x27;, &#x27;title&#x27;, &#x27;content&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="replace属性"><a href="#replace属性" class="headerlink" title="replace属性"></a>replace属性</h3><p>作用：控制路由跳转时操作浏览器历史记录的模式</p>
<p>浏览器历史记录有两种写入方式，分别为<code>push</code>和<code>replace</code></p>
<ul>
<li><code>push</code>：追加历史记录</li>
<li><code>replace</code>：替换当前记录，点击过后不能返回</li>
</ul>
<p>开启<code>replace</code>模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RouterLink replace to=&quot;/home&quot;&gt;首页 &lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><p>使用频率很高，远远大于RouterLink</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Home&quot;&gt;</span><br><span class="line">//效果是，点击首页三秒后跳转至新闻页</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const router = useRouter()</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        router.push(&#x27;/news&#x27;)</span><br><span class="line">    &#125;, 3000)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>将指定路径重定向到另一个路径</p>
<p>在规则中进行修改【此规则包含了所有路由配置写法】</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写一个路由器并暴露出去</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;@/pages/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&quot;@/pages/News.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;@/pages/About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&quot;@/pages/detail.vue&quot;</span>;</span><br><span class="line"><span class="comment">//创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">//路由器工作模式</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   name: &quot;路由名&quot;,</span></span><br><span class="line">    <span class="comment">//   path: &quot;/路径&quot;,</span></span><br><span class="line">    <span class="comment">//   component: 组件名,</span></span><br><span class="line">    <span class="comment">//   children: [</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//       path: &quot;子路由路径&quot;,</span></span><br><span class="line">    <span class="comment">//       component: 子路由组件名,</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//   ],</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;HOME&quot;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;NEWS&quot;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;Detail&quot;</span>,</span><br><span class="line">          <span class="comment">// path: &quot;detail/:id/:title/:content&quot;,//params写法</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;detail&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">          <span class="comment">// props: true, //params</span></span><br><span class="line">          <span class="comment">// query写法</span></span><br><span class="line">          <span class="title function_">props</span>(<span class="params">route</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> route.<span class="property">query</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;ABOUT&quot;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//重定向</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//把路由规则暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><h3 id="安装和部署"><a href="#安装和部署" class="headerlink" title="安装和部署"></a>安装和部署</h3><p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装pinia</span><br><span class="line">$npm i pinia</span><br></pre></td></tr></table></figure>

<p><strong>搭建环境</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="comment">//引入pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">//创建pinia</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"><span class="comment">//安装pinia</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>其作用相当于前端的仓库</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/store/count.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useContentStore = <span class="title function_">defineStore</span>(<span class="string">&quot;count&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//真正存数据的地方</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>: <span class="number">6</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/store/talk.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&quot;talk&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//真正存数据的地方</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">talkList</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;qqqqqqqqqqqqqqqqqqq&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;wwwwwwwwwwwwwww&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;eeeeeeeeeeeeeeeeeeeee&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&quot;4&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- components/Love.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;talk&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;getTalk&quot;&gt;获取一句土味情话&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;&#123;&#123; talk.title &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&#x27;ts&#x27; setup name=&#x27;LoveTalk&#x27;&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; nanoid &#125; from &#x27;nanoid&#x27;</span><br><span class="line">import &#123; useTalkStore &#125; from &#x27;@/store/talk&#x27;</span><br><span class="line">const talkStore = useTalkStore()</span><br><span class="line">async function getTalk() &#123;</span><br><span class="line">    //发请求,连用两次解构赋值和一次重命名</span><br><span class="line">    let &#123; data: &#123; content: title &#125; &#125; = await axios.get(&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;);</span><br><span class="line">    // 把请求回来的字符串，包装成一个对象</span><br><span class="line">    let obj = &#123; id: nanoid(), title: title &#125;</span><br><span class="line">    console.log(obj)</span><br><span class="line">    //放到数组中</span><br><span class="line">    talkStore.talkList.unshift(obj)//最开始</span><br><span class="line">    // talkList.push(obj)//最末尾</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- components/Count.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;count&quot;&gt;</span><br><span class="line">        &lt;h2&gt;当前求和为:&#123;&#123; countStore.sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;minus&quot;&gt;减&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&#x27;ts&#x27; setup name=&quot;Count&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useContentStore &#125; from &#x27;@/store/count&#x27;</span><br><span class="line">// countStore是一个响应式reactive对象，</span><br><span class="line">// 并且会自动解构它下面的ref类型数据，因此不需要写.value</span><br><span class="line">const countStore = useContentStore()</span><br><span class="line">console.log(&#x27;@@@&#x27;, countStore.sum)</span><br><span class="line"></span><br><span class="line">//数据</span><br><span class="line">let n = ref(1) //用户选择的数据</span><br><span class="line"></span><br><span class="line">function add() &#123;</span><br><span class="line">    countStore.sum += n.value</span><br><span class="line">&#125;</span><br><span class="line">function minus() &#123;</span><br><span class="line">    countStore.sum -= n.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改数据-三种方式"><a href="#修改数据-三种方式" class="headerlink" title="修改数据(三种方式)"></a>修改数据(三种方式)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//components/Count.vue</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//&lt;----------第一种修改方式-------------&gt;</span></span><br><span class="line">    <span class="comment">// countStore.sum += n.value</span></span><br><span class="line">    <span class="comment">// countStore.school = &#x27;鸡大&#x27;</span></span><br><span class="line">    <span class="comment">//&lt;----------第二种修改方式-------------&gt;</span></span><br><span class="line">    <span class="comment">// 适用于修改多个数据</span></span><br><span class="line">    <span class="comment">// countStore.$patch(&#123;</span></span><br><span class="line">    <span class="comment">//     sum: 88,</span></span><br><span class="line">    <span class="comment">//     school: &#x27;鸡大&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">//&lt;----------第二种修改方式-------------&gt;</span></span><br><span class="line">    countStore.<span class="title function_">increment</span>(n.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/store/count.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useContentStore = <span class="title function_">defineStore</span>(<span class="string">&quot;count&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//actions里放置的是一个个方法，用于相应组件中的“动作”</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sum</span> += value;</span><br><span class="line">    &#125;,<span class="comment">//很麻烦，日常开发用起来不方便，但是可以模块化，复用它</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//真正存数据的地方</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">school</span>: <span class="string">&quot;SUES&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="subscribe的使用"><a href="#subscribe的使用" class="headerlink" title="$subscribe的使用"></a>$subscribe的使用</h3><p>能够在本地浏览器存储数据，使其不会因为浏览器的刷新而导致数据丢失</p>
<p>还是以土味情话为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--Love.vue--&gt;</span><br><span class="line">&lt;script lang=&#x27;ts&#x27; setup name=&#x27;LoveTalk&#x27;&gt;</span><br><span class="line">import &#123; useTalkStore &#125; from &#x27;@/store/talk&#x27;</span><br><span class="line">const talkStore = useTalkStore()</span><br><span class="line">async function getTalk() &#123;</span><br><span class="line">    talkStore.getATalk()</span><br><span class="line">    talkStore.$subscribe((mutate, state) =&gt; &#123;</span><br><span class="line">        //mutate表示发生变化的内容</span><br><span class="line">        console.log(&#x27;talkStore内的数据发生了变化&#x27;, mutate, state)</span><br><span class="line">        localStorage.setItem(&#x27;talkList&#x27;, JSON.stringify(state.talkList))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/store/talk.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&quot;nanoid&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&quot;talk&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getATalk</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//发请求,连用两次解构赋值和一次重命名</span></span><br><span class="line">      <span class="keyword">let</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: &#123; <span class="attr">content</span>: title &#125;,</span><br><span class="line">      &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>);</span><br><span class="line">      <span class="comment">// 把请求回来的字符串，包装成一个对象</span></span><br><span class="line">      <span class="keyword">let</span> obj = &#123; <span class="attr">id</span>: <span class="title function_">nanoid</span>(), <span class="attr">title</span>: title &#125;;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">      <span class="comment">//放到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">talkList</span>.<span class="title function_">unshift</span>(obj); <span class="comment">//最开始</span></span><br><span class="line">      <span class="comment">// talkList.push(obj)//最末尾</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//真正存数据的地方</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">talkList</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;talkList&quot;</span>) <span class="keyword">as</span> <span class="built_in">string</span>) || [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong></p>
<p><img src="/2024/03/17/Vue3_note/image-20240317151105751.png" alt="image-20240317151105751"></p>
<h3 id="组合式写法"><a href="#组合式写法" class="headerlink" title="组合式写法"></a>组合式写法</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/store/talk.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&quot;talk&quot;</span>, <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> talkList = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;talkList&quot;</span>) <span class="keyword">as</span> <span class="built_in">string</span>) || []</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getATalk</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发请求,连用两次解构赋值和一次重命名</span></span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">content</span>: title &#125;,</span><br><span class="line">    &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>);</span><br><span class="line">    <span class="comment">// 把请求回来的字符串，包装成一个对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">id</span>: <span class="title function_">nanoid</span>(), <span class="attr">title</span>: title &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">    <span class="comment">//放到数组中</span></span><br><span class="line">    talkList.<span class="property">talkList</span>.<span class="title function_">unshift</span>(obj); <span class="comment">//最开始</span></span><br><span class="line">    <span class="comment">// talkList.push(obj)//最末尾</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; talkList, getATalk &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="向后端发起请求"><a href="#向后端发起请求" class="headerlink" title="向后端发起请求"></a>向后端发起请求</h2><p>核心语句，当然后端要做好跨域访问</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>; </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> loginMessage = &#123;</span><br><span class="line">        <span class="attr">user_id</span>: userid.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">password</span>: password.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line"> 	<span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8080/login&#x27;</span>, loginMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写个样例，向后端发送登录请求，并将返回的token存入Pinia中,同时在浏览器也做好存储，避免服务器重启以及刷新浏览器会丢失数据</p>
<p>先新建仓库</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store/loginStore.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">type</span> <span class="title class_">LoginResult</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/interface/loginResult&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useLoginStore = <span class="title function_">defineStore</span>(<span class="string">&quot;login&quot;</span>, <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//真正存数据的地方</span></span><br><span class="line">    <span class="keyword">const</span> userid = <span class="title function_">ref</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;userid&quot;</span>) || <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> username = <span class="title function_">ref</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>) || <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> publicKey = <span class="title function_">ref</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;publicKey&quot;</span>) || <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> konohaToken = <span class="title function_">ref</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;konohaToken&quot;</span>) || <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params">loginResult: LoginResult</span>) &#123;</span><br><span class="line">        userid.<span class="property">value</span> = loginResult.<span class="property">user_id</span></span><br><span class="line">        username.<span class="property">value</span> = loginResult.<span class="property">username</span></span><br><span class="line">        publicKey.<span class="property">value</span> = loginResult.<span class="property">publicKey</span></span><br><span class="line">        konohaToken.<span class="property">value</span> = loginResult.<span class="property">konohaToken</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; userid, username, publicKey, konohaToken, <span class="title class_">Login</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>login.vue</code>中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLoginStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/loginStore&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">const</span> loginStore = <span class="title function_">useLoginStore</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> loginMessage = &#123;</span><br><span class="line">        <span class="attr">user_id</span>: userid.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">password</span>: password.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8080/login&#x27;</span>, loginMessage);</span><br><span class="line">        <span class="comment">// console.log(loginMessage)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send successful:&#x27;</span>, response.<span class="property">data</span>.<span class="property">data</span>);</span><br><span class="line">        <span class="keyword">switch</span> (response.<span class="property">data</span>.<span class="property">code</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">                <span class="comment">// 登录成功后的处理</span></span><br><span class="line">                loginStore.<span class="title class_">Login</span>(response.<span class="property">data</span>.<span class="property">data</span>)</span><br><span class="line">                loginStore.$subscribe(<span class="function">(<span class="params">mutate, state</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//mutate表示发生变化的内容，同时更新浏览器存储</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;loginStore内的数据发生了变化&#x27;</span>, mutate, state)</span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userid&#x27;</span>, state.<span class="property">userid</span>)</span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, state.<span class="property">username</span>)</span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;publicKey&#x27;</span>, state.<span class="property">publicKey</span>)</span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;konohaToken&#x27;</span>, state.<span class="property">konohaToken</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                    <span class="attr">message</span>: response.<span class="property">data</span>.<span class="property">msg</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="comment">//登陆失败或者异常时的处理</span></span><br><span class="line">                <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                    <span class="attr">message</span>: response.<span class="property">data</span>.<span class="property">msg</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//同时清空输入框，这里可以说是非常简单粗暴了</span></span><br><span class="line">                userid.<span class="property">value</span> =<span class="string">&#x27;&#x27;</span></span><br><span class="line">                password.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Login failed:&#x27;</span>, error);</span><br><span class="line">        <span class="comment">// 登录失败的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>P.S <code>get</code>请求要写完整，最后的斜杠不能少</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/showclaims/&quot;</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue3.0</tag>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>肖臻-区块链 笔记</title>
    <url>/2024/01/23/xiaozhen_blockchain_note/</url>
    <content><![CDATA[<p>​	这是一份肖臻老师的课程笔记，主要讲解了区块链的概念，基本没有什么代码片段，因此也可以当作科普类笔记，但是内容较为干枯</p>
<span id="more"></span>

<blockquote>
<ul>
<li>Created by Typora</li>
<li>Author: LRay-iu</li>
<li>createTime: 2023-12-19 22:54</li>
<li>updateTime: 2024-01-23 12:10</li>
</ul>
</blockquote>
<h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><p>课程链接：【北京大学肖臻老师《区块链技术与应用》公开课】 <a href="https://www.bilibili.com/video/BV1Vt411X7JF">https://www.bilibili.com/video/BV1Vt411X7JF</a></p>
<p>区块链demo：<a href="https://andersbrownworth.com/blockchain">https://andersbrownworth.com/blockchain</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这份网课是为了毕设做准备的，因此特此花费了一些时间用以学习区块链的本质</p>
<p>在这份笔记中，你会了解比特币挖矿的真相，以及矿潮没落的原因</p>
<p>但是比较无语的是，这份课程录制的时候我还在上初中，因此有部分内容可能以及随着时间发生了一些变化，需要辩证看待部分内容的正确性</p>
<p>如果您发现笔记之中不正确的地方，欢迎您为我指正错误，联系方式见<strong>关于</strong>里的邮箱，感激不尽！</p>
<h2 id="密码学原理"><a href="#密码学原理" class="headerlink" title="密码学原理"></a>密码学原理</h2><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>加密货币实际是不加密的，线上公开透明；以最著名的加密货币比特币为例，它使用的是哈希和数字签名，密码学中的<strong>哈希</strong>被称为<strong>cryptographic hash function</strong>，它有一个特性叫<strong>collision resistance</strong>，也有地方说成<strong>collision free</strong>，但实际上哈希碰撞是不可避免的,这个特性当个玩笑话即可，马马虎虎可以这么认为，但不能当作真理。</p>
<p><strong>collision resistance</strong>，指的是对于H(x),我们没有办法做到人为高效地找到一个H(x’)，使得H(x)&#x3D;&#x3D;H(x’)，通俗易懂一点来说，就是做不到篡改但是不被发现，只要x有一丁点变化，那么最终的哈希值就会与先前有所不同。在Golang的项目依赖管理go.mod和go.sum中有着类似的机制，go.mod存放了项目所需要的依赖，而go.sum则存放了依赖所对应的哈希值，一旦我们在拉取代码并使用go get下载对应依赖时，下载的依赖被人篡改，那么新依赖计算出来的哈希值就会与go.sum中的原依赖哈希值不符，进而引发警告。</p>
<p><strong>哈希碰撞</strong>，指的是对于x≠y,但是存在H(x)&#x3D;&#x3D;H(y),使得不同输入会在哈希表被映射到同一个位置。由于哈希的输出空间只有2^256，且输出空间理论上是可以无限大的，因此哈希碰撞不可避免。但是目前来说，对于x，我们并没有高效的方式能够求得y满足哈希碰撞，暴力求解理论上可以完成，但是对于2^256种哈希值，这种方法非常困难。</p>
<p><em>&#x2F;&#x2F;此处H(x)，相当于x的digest,部分论文会将其翻译做摘要，姑且可以当作x的指纹，“独一无二”的标识</em></p>
<p>因此，对于哈希函数，必须要严格补充一句，<strong>collision resistance</strong>本身是<strong>无法被证明</strong>且实际是<strong>不可能存在</strong>这种性质的，但是如果一个哈希函数在过去很长一段时间，没有人找到人为高效制造哈希碰撞的方法，我们就默许它是collision resistance的，这属于是一种比较经验化的性质，找不到等于“没有”。当然也有一些哈希函数，在过去是被认为是collision resistance的，但后来被发现可以人为制造哈希碰撞的方法，最为著名的就是MD5加密，以下是在Flask中一段经典的MD5加密代码。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">password = hashlib.md5(password.encode()).hexdigest()</span><br></pre></td></tr></table></figure>

<p>哈希函数还有一个性质，叫<strong>hiding</strong>，简单来说，哈希函数是单向的，x–&gt;H(x)这个过程是不可逆的，除了蛮力，无法高效地破解,但这有一个前提，哈希的输入范围要足够大且分布要足够均匀，否则也会因为输出范围太过狭隘导致被暴力破解，这一点可以参考《模仿游戏》中阿兰·图灵最后破解德军恩格玛电报的原因。</p>
<p>当collision resistance和hiding结合使用时就可以实现<strong>digital commitment</strong>，有时候也叫<strong>digital equivalent of sealed envelope</strong>。</p>
<blockquote>
<p>什么是digital commitment？假设现实世界出现了一名法师奇异博士，他在使用了时间宝石之后，能够准确预言未来发生的事情。请问作为旁观者，我们该如何证明他的能力呢？最简单粗暴的办法就是，让他先预言，再等预言的时间到了，看看预言的事情是否发生。这听上去非常合理，但是事实上，一旦预言被公布出来，那么未来就可能会<strong>因为预言被公布这件事</strong>而发生改变。例如，奇异博士预言了古一会死亡，本来按照时间线，古一可能的的确确是会死亡，但是由于奇异博士的预言，导致众人因为保护古一，而使其没有阵亡，或者说因为众人保护古一的过程中出现了意外导致古一阵亡。这无论是哪种情况，都没办法佐证奇异博士的预言能力。因此，我们得出结论，<strong>预言是不可公开的</strong>。我们正确的做法是让奇异博士将预言的内容封死在绝对安全的保险箱中，确保没有人知道预言，待预言的时间到了，再打开确认有没有发送预言中出现的事情。</p>
</blockquote>
<p>对于电子世界，我们想要做到类似的事情，我们就需要将内容进行哈希加密，将得出的哈希值公布出去，并将原文内容封锁在digital sealed envelope中，一旦到了需要解密的时候，我们再解开digital sealed envelope，由于哈希函数具有hiding的性质，因此即便公布哈希值也推不出原文，更不会影响未来，而又由于具备collision resistance的性质，如果公布出来的内容和原文不一样或者说被篡改了，那么通过哈希值就可以轻易判断。</p>
<p>实际操作中，为满足hiding性质的前提，我们会对原文尾部添加一串随机数，将两个部分同时进行哈希加密，这样可以确保输入范围大，输出分布均匀，如：”今天看起来是个不错的日子||1018“，其中1018就是拼接的随机数。</p>
<p>另外，在比特币中，还有一个性质，叫<strong>puzzle friendly</strong>，这个说的是，在工作量证明机制中，<strong>挖矿没有捷径</strong>，只能够通过一遍遍地试随机数，使得 Hash ( block,header ) &lt;&#x3D; target(指定阈值)。值得一提的是，在其中一名矿工成功计算出随机数之后，其他矿工需要去验证这个随机数是否正确，而这个验证方法十分简单，只需要将其重新带回Hash ( block,header ) ，查看结果是否小于等于目标阈值，因为计算复杂，求证简单，因此，这个性质又被称作”difficult to solve, but easy to verify”[难以解决，但容易求证]</p>
<p>比特币中使用的哈希函数叫SHA-256(Secure Hash Algorithm)，它同时具备了上述性质。</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/image-20240112095737762.png" alt="image-20240112095737762"></p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/image-20240112095746127.png" alt="image-20240112095746127"></p>
<p>上图为哈希加密的一个示例，来源：<a href="https://andersbrownworth.com/blockchain/hash">https://andersbrownworth.com/blockchain/hash</a></p>
<p><em>&#x2F;&#x2F;这个博主的个人网页也有写有关区块链的内容</em></p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>对于不安全的通信渠道，即便是有了普通的加密措施，也就是对称加密，也可能会因为密钥被截取而导致信息泄露，于是非对称加密应运而生。</p>
<p><strong>非对称加密</strong>，即使用公钥加密，私钥解密，由于私钥是存放在本地的，并不需要参与通信，因此我们不需要担心在通信过程导致私钥被截取。而公钥是公开的，所有人都可以拿到，它只具备加密的能力，并不能解密，所以不存在公钥被截取导致信息泄露。在通信过程中，我们使用对方的公钥进行加密，对方收到信息之后，会使用本地的私钥进行解密，传输过程中，信息是处于加密状态的。</p>
<p>值得一提的是，公钥是私钥通过某种方法去推算出来的，且这个运算是不可逆的，也就是说，知道私钥的人可以推导出对应的公钥，但知道公钥的人无法逆向推导出私钥。</p>
<blockquote>
<p>通俗易懂地来说就是，我用我手里的钥匙制作了足够多的锁，我把我的锁发给全世界每个人，他们如果想给我邮寄东西，就必须用我给的锁上锁，上完之后，除了我手里的钥匙，没人能够打开它。这就是非对称加密。</p>
</blockquote>
<p>非对称加密技术我们可以用来制作签名，以比特币交易为例，假设LRay向B转了10个比特币，交易产生并且记录被发布到区块链中，其他节点如何认可此次交易的真实性呢？</p>
<p>那么LRay就会在发布交易时，同时发布一个签名（使用私钥加密这个签名），其他节点再使用公钥去验证这个签名的真实性。</p>
<blockquote>
<p>肖臻：是否存在两个人公钥和私钥一模一样的情况呢？即小黑发起大量攻击，产生大量的公私钥，再检查自身产生的公钥是否和区块链上已有的公钥是否相同，直到产生的某个公钥，恰好能够和用户C的公钥一模一样，这样小黑就得到了用户C的公私钥，那么小黑是否可以使用他的公私钥发布交易，或者篡改用户C的交易呢？</p>
<p>理论上确实可行，但是实际上，对于256位(二进制，10进制大约78位)的公私钥，出现相同的概率微乎其微，哪怕是超级计算机，日夜兼程计算，找到的概率甚至小于地球爆炸的可能性。但这一且都是建立在有一个良好的随机源的基础上，如果随机源不够优秀，可能会在一遍遍的签名中将私钥破解出来。</p>
</blockquote>
<h2 id="比特币的数据结构-已废弃，可不学"><a href="#比特币的数据结构-已废弃，可不学" class="headerlink" title="比特币的数据结构[已废弃，可不学]"></a>比特币的数据结构[已废弃，可不学]</h2><p><img src="/2024/01/23/xiaozhen_blockchain_note/image-20240105091958351.png" alt="image-20240105091958351"></p>
<h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p><em>&#x2F;&#x2F;特奶奶个锤，学了一大半才发现这玩意已经被合并掉了，没话说，日常白学，习惯就好</em></p>
<p>区块链本身是有区块组成的链表，和传统的链表有所不同</p>
<p>首先是哈希指针和传统指针有所不同，相比起传统指针p（存放了结构体在内存中的起始地址），增加了一个H(x)，也就是说，哈希指针不仅需要保存地址，还需要保存一个哈希值，这个哈希值可以用来检测结构体中的内容是否被篡改。</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/cec260ce36410d64a2e680b87dafbbe.png"></p>
<center>hash pointer，哈希指针</center>

<p>下面是一种简单的区块链结构</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/b82daa61a0de14965f383ca4cfbf309.png"></p>
<p>最左边的叫创世区块，是区块链中的第一个区块，之后的每一个区块的都会保存着上一个区块的地址以及哈希值。而最后一个区块的地址和哈希值保存在系统中，一旦中间的某一个区块被篡改，H( )变成了H’( )，那么牵一发而动全身，后面区块的哈希值都会发生变化，最终系统会发现最后一个区块的哈希值与保存的哈希值有所不同。以下是一个范例：</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/image-20240115231345044.png" alt="image-20240115231345044"></p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/image-20240115231352791.png" alt="image-20240115231352791"></p>
<p>一旦发生篡改</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/image-20240115231411208.png" alt="image-20240115231411208"></p>
<p>另外这种结构还具备temper-evident log，即可追踪日志，还是以刚才被篡改的区块为例，假如系统中只保存了后两个区块的，我们想要前面的区块中的内容，我们向前面节点发起了请求，我们对发来的区块链中的most recent block进行哈希计算，得到的哈希值如果和我们最老的区块中保存的哈希值不符合，那么就说明发来的数据是有被篡改的。</p>
<p>在比特币中，除了区块链，还有一种结构，叫<strong>Merkle tree</strong></p>
<h3 id="Merkle-tree"><a href="#Merkle-tree" class="headerlink" title="Merkle tree"></a>Merkle tree</h3><p><img src="/2024/01/23/xiaozhen_blockchain_note/3f0cfb0ee800495f367fb49c58eea45.png"></p>
<center>Merkle tree</center>

<p>长相上和二叉树有类似的地方，但和二叉树有所不同的是，使用了哈希指针代替了普通指针，子节点中的哈希值存在它们的父节点中，优点是只需要记住最上方根节点的哈希值，就可以检测出merkle tree中任何一个节点是否发生篡改，原理和之前的区块链表有所类似。</p>
<p><strong>根哈希值存放在block header中，而block body中包含了交易列表</strong></p>
<p>用途：</p>
<p>比特币中的节点分为轻节点(light node)和全节点(full node)两类，全节点是保存整个区块的内容（block header+block body），而轻节点只保存了block header</p>
<h3 id="Merkle-Proof"><a href="#Merkle-Proof" class="headerlink" title="Merkle Proof"></a>Merkle Proof</h3><p>Merkle Proof ，用于寻找交易所在的节点路径，查询交易是否被写进区块链中。轻节点中只包括了块头部分，因此，MerkleProof的第一步就是向全节点发送请求，之后全节点会返回一条交易路径和沿途的H(),而轻节点要做的就是对哈希值进行计算，判断最终结果与块头中的根哈希值是否相同。</p>
<p><em>&#x2F;&#x2F;具体见下方肖臻老师的演示课件</em></p>
<blockquote>
<p>以下是肖臻老师PPT所做的演示，是将两种区块链结构合二为一，做的显然更加细致</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/9c36b711da645ebc72e4fb5b73b7572.png"></p>
<p>这张图片展示了区块链节点中的以部分，每一个区块下存放着一个merkle tree，而树的地步是交易明细，在我们查询交易的时候，为了验证某个交易是否存在，轻节点会先向全节点发送请求，全节点会返回红色部分的哈希值以及交易的路径，轻节点只需要使用底部需要查验的交易哈希值，一步一步推出父节点中的绿色哈希值，知道推出根节点中的哈希值，与块头中的根哈希值进行比对。</p>
<p><em>红色的哈希值我们是无法验证的，因为轻节点的这一次查询，只能查询路径中的部分，黑色部分都是无法查询的,我们无法判断红色哈希值的正确性</em></p>
</blockquote>
<p>这种查询方式也被成为 proof of membership&#x2F;proof of inclusion,复杂度是θ(log(n))；如果是 proof of non-membership呢？那就是将整个merkle tree都发送给轻节点了，复杂度是θ(n)</p>
<h2 id="ETH以太坊"><a href="#ETH以太坊" class="headerlink" title="ETH以太坊"></a>ETH以太坊</h2><h4 id="机制区别"><a href="#机制区别" class="headerlink" title="机制区别"></a>机制区别</h4><blockquote>
<p>比特币是proof of work（<strong>工作证明机制</strong>）,以太坊是proof of stake（<strong>权益证明机制</strong>）；</p>
<p><em>&#x2F;&#x2F;值得一提的是，比特币和以太坊在2022年已经完成合并，因此先前部分笔记需要进行修改。</em></p>
<p><em>&#x2F;&#x2F; 其实有一部分相当于白学了#无能狂怒 #龙怒</em></p>
</blockquote>
<p><strong>传统比特币</strong>（现已与以太坊合并），在前面交易中收到的货币，必须要在之后一次性花出去</p>
<p>例如：LRay-iu转给B10个比特币，B要在将来一次性全部交易出去，多余的则成为了tranactions fee</p>
<p>原因：比特币没有基于账户的模型，是对交易进行单独处理的，这个在其数据结构中也能看出一点</p>
<p>而<strong>以太坊</strong>是基于account-based ledger，有着基于账户的模型，因此，完全不需要全部交易，多出来的以太币纠结着存放在账户中，同时也不再需要哈希指针指向上一条交易</p>
<p>而在比特币中需要关心的一个问题–货币的双重支付（double spending attack），在以太坊对这个有着天然的防御作用，但是与之相对的有着另一个问题，重放攻击（reply attack）</p>
<blockquote>
<p>简单来说，与双重支付相对，重放指的是收钱方存在恶意，比如LRay-iu向B转了10个以太币，而B在收到这10个以太币之后，将这一条交易又广播了一遍，那么LRay-iu的账户可能会被转2次钱。</p>
</blockquote>
<p>解决方案，在账户下对应保存账户的交易次数nonce。在发布交易的时候节点也会更新交易次数，以避免重放交易。</p>
<h4 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h4><p>智能合约是一种在区块链上执行的自动化合约，它是一段以编程方式编写的代码，旨在自动执行、管理或强制执行合同条款或协议。这些合约以代码的形式存在于区块链上，其中包含了特定的规则和逻辑，通过在区块链网络上运行，可以在没有第三方参与的情况下执行交易或协议。</p>
<p>智能合约运行于区块链网络中的节点上，并且由网络中的所有节点来验证和执行，确保了其去中心化和不可篡改性质。</p>
<p>P.S 换句话说，智能合约一经发布，即便是开发者本身也不能修改合约。</p>
<h4 id="合约账户"><a href="#合约账户" class="headerlink" title="合约账户"></a>合约账户</h4><p>创建合约会返回一个地址，知道这个地址就可以调用这个合约,调用过程中状态会发生变化。</p>
<blockquote>
<p><strong>外部账户</strong>：balance（账户余额），nonce（交易次数）</p>
<p><strong>合约账户</strong>：balance（账户余额），nonce（用来记录，调用其他合约的次数），并不是依赖公私钥进行控制，并且以太坊中有规定，合约账户不可以主动发起交易。code（代码），storage（存储相关状态）</p>
</blockquote>
<h2 id="以太坊数据结构"><a href="#以太坊数据结构" class="headerlink" title="以太坊数据结构"></a>以太坊数据结构</h2><p>对比比特币中的merkle tree并没有提供高效查找和更新的方法</p>
<h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p>Trie 是一种树形结构，由节点和边构成，每个节点代表一个字符（或一个字节）的信息，而边则代表字符之间的关系。Trie 的特点在于利用共享前缀来节省存储空间，提高数据存取的效率。</p>
<blockquote>
<p>以下是一张经典的Trie图</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/ed5b963beaf85e5b9e489a10efcc51f-170441778579113.png"></p>
<p>优点：</p>
<p><strong>高效的数据检索</strong>： Trie 的查找效率取决于key(上述单词的长度)的长度</p>
<p><strong>不会发生数据碰撞</strong>：不同的地址(key)，映射到树中的位置也注定不同</p>
<p><strong>不同节点按照不同的顺序插入树中，得到的树的结构是一样的</strong></p>
<p><strong>局部更新</strong>： 当区块发生变化，只需要对发生变化的部分进行更新</p>
<p>缺点：</p>
<p><strong>存储敏感性：</strong> Trie 数据结构对存储敏感，对于大型区块链，存储 Trie 可能需要大量的存储空间。</p>
</blockquote>
<h3 id="Patricia-tree"><a href="#Patricia-tree" class="headerlink" title="Patricia tree"></a>Patricia tree</h3><p>为了解决占据存储的问题，有了优化过的<strong>Patricia tree</strong> ，也有写作 **Patricia trie **，</p>
<blockquote>
<p>经过压缩过的树，层数减少，访问内存的次数也减少，从而提高了性能；</p>
<p>而新加入的词会扩展已经被压缩过的节点</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/04b959cbb244f9b3d13a0cefae513ab.png"></p>
</blockquote>
<h3 id="Merkle-Patricia-tree"><a href="#Merkle-Patricia-tree" class="headerlink" title="Merkle Patricia tree"></a>Merkle Patricia tree</h3><p>Merkle Patricia tree (MPT),所有账户组织成一张Patricia tree，用路径压缩，再将指针替换成哈希指针，最后计算出状态树根节点的哈希值，写在block header中。</p>
<h3 id="状态树"><a href="#状态树" class="headerlink" title="状态树"></a>状态树</h3><p>P.S 以太坊中的账户地址一般是160位的，也就是20个字节，通常表示成40个16进制数字</p>
<p><img src="/2024/01/23/xiaozhen_blockchain_note/5d552b84a412de924d855c63a4498a7.png"></p>
<center>以太坊状态树，来源：肖臻老师PPT</center>

<p>值得一提的是，状态树的更新并不会在原处修改，而是会另开一个区块；</p>
<p><strong>原因</strong>：以太坊由于有智能合约存在，不能像比特币那样随意回滚</p>
<h2 id="交易树"><a href="#交易树" class="headerlink" title="交易树-"></a>交易树-</h2><p><strong>作用：</strong></p>
<ul>
<li>提供merkle proof</li>
<li>查找过去一段时间与某个智能合约有关的交易</li>
</ul>
<p>交易树中包含了这个区块中的所有交易，并且可以通过<strong>bloom filter</strong>快速查找交易是否存在。</p>
<h4 id="bloom-filter"><a href="#bloom-filter" class="headerlink" title="bloom filter"></a>bloom filter</h4><p>用于查找交易，存放在块头中，在以太坊中将交易映射至一张表之中，在查找交易的时候，只需要将交易哈希处理后，在表中查找对应位置是否为1；之后在根据结果判断是否需要向全节点查询更详细的内容</p>
<h3 id="收据树"><a href="#收据树" class="headerlink" title="收据树"></a>收据树</h3><p>收据树存储了每个区块中交易的收据（receipts）。交易执行完成后，会生成一个收据，记录了交易的执行结果、日志、事件等信息。这些收据包含了交易的详细信息，例如合约的调用结果、Gas消耗、事件日志等。</p>
<p>收据树的根哈希值也被包含在区块头中，因此可以通过区块头的根哈希验证交易的有效性，并且可以快速检索特定交易的执行结果。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>状态树中保存的是(key,value)</p>
<p>用RLP（Recursive Length Prefix）作序列化之后再存储，涉及库（Protobuf 只支持一种类型：nested array of bytes字符数组)</p>
<p>它和交易树、收据树的区别是它包含了系统中所有账户的状态，无论这个账户是否参与了当前区块的交易。</p>
<blockquote>
<p><strong>有没有可能A向B转了10ETH，但是B这个账户以前从来没听说过？</strong></p>
<p>答：存在，以太坊中，创建账户是不需要通知其他人的，只有这个账户第一次产生交易，其他节点才会知道这个账户存在，这个时候会在状态树中新加入一个账户。</p>
<p><strong>可以将状态树设计修改成每个区块的状态树只包含这个区块中相关交易的账户？</strong></p>
<p>答：这会导致没有任何一个区块保存了完整的状态树，当我们查找状态信息时需要一节一节地去上一个区块中查找对应账户的状态信息，假如这个账户许久没有发生交易，那么，这个查询过程会需要花费很久，甚至会追溯至创世区块。</p>
<p>更大地问题是，假如回到上一个问题中，A向B转了10个ETH，但假如B这个账户是刚刚建立的，那么其他节点在查找这个账户的时候，会一直查找上一个区块，直到创世区块之后才能够得知B账户是新建的</p>
</blockquote>
<p>&#x2F;&#x2F;<em>以太坊数据结构的代码此处暂时省略（看不懂），等之后看懂了再补充在这里</em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太坊交易树和收据树树数据结构</span></span><br><span class="line"><span class="comment">//block.go</span></span><br></pre></td></tr></table></figure>



<h2 id="ETH以太坊–智能合约"><a href="#ETH以太坊–智能合约" class="headerlink" title="ETH以太坊–智能合约"></a>ETH以太坊–智能合约</h2><p>智能合约本质是运行在区块链上的一段代码，代码的逻辑定义了合约的内容，语言是solidity，语法上和js接近。</p>
<p><em>&#x2F;&#x2F;这块没听懂，我暂且先跳过了</em></p>
<p><em>&#x2F;&#x2F;当然是因为我太笨了，不过如果你和我一样笨的话，建议别看他讲的</em></p>
]]></content>
      <categories>
        <category>Web3</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>以太坊</tag>
        <tag>比特币</tag>
      </tags>
  </entry>
</search>
